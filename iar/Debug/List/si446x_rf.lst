###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:36:14 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c     #
#    Command line =  E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c -e  #
#                    -Ol --no_cse --no_unroll --no_inline --no_code_motion    #
#                    --no_tbaa --no_cross_call --debug --code_model medium    #
#                    --data_model medium -o E:\hwpro-2016\20160627_L\iar\Debu #
#                    g\Obj\ --dlib_config "C:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D  #
#                    STM8L15X_MD -lC E:\hwpro-2016\20160627_L\iar\Debug\List\ #
#                     -I E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\    #
#                    -I E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I          #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\si446x_rf.lst    #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\si446x_rf.o       #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c
      1          #include "stm8l15x.h"
      2          #include "radio.h"
      3          #include "lib/random.h"
      4          #include "basictype.h"

  typedef unsigned char 	  uint8_t;
                        	  ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",8  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned short	  uint16_t;
                        	  ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",10  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned char     u8;
                            ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",16  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned short    u16;
                            ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",17  Warning[Pe301]: typedef
          name has already been declared (with same type)
      5          
      6          //#include "si4438.h"
      7          #include "si446x_defs_u.h"
      8          #include "si446x_cmd.h"
      9          #include "si446x.h"
     10          
     11          #include "sysprintf.h"
     12          #include <string.h>
     13          #include "stm8l15x_it.h"
     14          
     15          
     16          
     17          /*---------------------------------------------------------------------------*/
     18          static int si446x_radio_rf_init(void);
     19          static int si446x_radio_prepare(const void *payload,unsigned short payload_len);
     20          static int si446x_radio_transmit(unsigned short payload_len);
     21          static int si446x_radio_send(const void *data, unsigned short len);
     22          static int si446x_radio_read(void *buf, unsigned short bufsize);
     23          static int si446x_radio_channel_clear(void);
     24          static int si446x_radio_receiving_packet(void);
     25          static int si446x_radio_pending_packet(void);
     26          static int si446x_radio_on(void);
     27          static int si446x_radio_off(void);
     28          static int add_to_rxbuf(uint8_t * src);
     29          static int read_from_rxbuf(void *dest, unsigned short len);
     30          
     31          #define SI446X_MAX_PACKET_LEN	32
     32          #define SI446X_CUR_RSSI			31
     33          
     34          /*
     35           * The buffers which hold incoming data.
     36           */
     37          #ifndef SI446X_RADIO_RXBUFS
     38          #define SI446X_RADIO_RXBUFS 4
     39          #endif 
     40          
     41          
     42          /* +1 because of the first byte, which will contain the length of the packet. */
     43          // +1 last data is rssi
     44          //len1 [data] rssi1

   \                                 In section .near.bss, align 1
     45          static uint8_t si446x_rxbufs[SI446X_RADIO_RXBUFS][SI446X_MAX_PACKET_LEN];//len1 [data] rssi1  last_rssi
   \                     si446x_rxbufs:
   \   000000              DS8 128
     46          
     47          
     48          #if SI446X_RADIO_RXBUFS > 1

   \                                 In section .near.data, align 1
     49          static volatile int8_t first = -1, last = 0;
   \                     first:
   \   000000 FF           DC8 -1

   \                                 In section .near.bss, align 1
   \                     last:
   \   000000              DS8 1
     50          #else   
     51          static const int8_t first = 0, last = 0;
     52          #endif  
     53          
     54          
     55          #if SI446X_RADIO_RXBUFS > 1
     56          #define CLEAN_RXBUFS() do{first = -1; last = 0;}while(0)
     57          #define RXBUFS_EMPTY() (first == -1)
     58          static int RXBUFS_FULL( )
     59          {
     60          	int8_t first_tmp = first;
     61          	return first_tmp == last;
     62          }
     63          #else 
     64          #define CLEAN_RXBUFS( ) (si446x_rxbufs[0][0] = 0)
     65          #define RXBUFS_EMPTY( ) (si446x_rxbufs[0][0] == 0)
     66          #define RXBUFS_FULL( ) (si446x_rxbufs[0][0] != 0)
     67          #endif 
     68          

   \                                 In section .near.bss, align 1
     69          static uint8_t si446x_txbuf[SI446X_MAX_PACKET_LEN];
   \                     si446x_txbuf:
   \   000000              DS8 32
     70          
     71          #define CLEAN_TXBUF() (si446x_txbuf[0] = 0)
     72          #define TXBUF_EMPTY() (si446x_txbuf[0] == 0)
     73          
     74          #define BUSYWAIT_UNTIL(cond, max_time)
     75          

   \                                 In section .near.bss, align 1
     76          static u_char ubcurrssi;
   \                     ubcurrssi:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     77          static uint8_t locked;
   \                     locked:
   \   000000              DS8 1
     78          

   \                                 In section .near.bss, align 1
     79          static volatile uint8_t is_transmitting;
   \                     is_transmitting:
   \   000000              DS8 1
     80          static volatile uint8_t seqnum;
     81          
     82          static volatile uint8_t rf_state_led_lock = 0;
     83          

   \                                 In section .near.data, align 1
     84          volatile  SI446X_STATE si446x_state = SI446X_IDLE;
   \                     si446x_state:
   \   000000 10           DC8 16

   \                                 In section .near.bss, align 1
     85          volatile uint8_t ubRxFlag;
   \                     ubRxFlag:
   \   000000              DS8 1
     86          

   \                                 In section .near.bss, align 1
     87          volatile u_short  count_tx = 0;
   \                     count_tx:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     88          volatile u_short  count_rx = 0;
   \                     count_rx:
   \   000000              DS8 2
     89          
     90          #define RF_RSSI_THD	   100
     91          
     92          extern void sysPrintExp(unsigned int dwPos);
     93          extern u_long sysGetLR(void);
     94          
     95          /* If set to 1, a send() returns only after the packet has been transmitted.
     96            This is necessary if you use the x-mac module, for example. */
     97          #ifndef RADIO_WAIT_FOR_PACKET_SENT
     98          #define RADIO_WAIT_FOR_PACKET_SENT 1
     99          #endif  /* RADIO_WAIT_FOR_PACKET_SENT */
    100          
    101          

   \                                 In section .near.bss, align 1
    102          static u_char ubarxbuf[129] = {0x00};
   \                     ubarxbuf:
   \   000000              DS8 129
    103          
    104          #define GET_LOCK() locked++
    105          
    106          /*--------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    107          static void RELEASE_LOCK(void)
    108          {
    109          	if(locked > 0)
   \                     RELEASE_LOCK:
   \   000000 C6 ....      LD        A, L:locked
   \   000003 A1 00        CP        A, #0x0
   \   000005 27 08        JREQ      L:??RELEASE_LOCK_0
    110          		locked--;
   \   000007 C6 ....      LD        A, L:locked
   \   00000A AB FF        ADD       A, #0xff
   \   00000C C7 ....      LD        L:locked, A
    111          }
   \                     ??RELEASE_LOCK_0:
   \   00000F 87           RETF
    112          
    113          
    114          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    115          static int si446x_radio_rf_init(void)
    116          {
    117          	si446xRadioInit( );
   \                     si446x_radio_rf_init:
   \   000000 8D ......    CALLF     si446xRadioInit
    118          	
    119          	locked = 0;
   \   000004 35 00 ....   MOV       L:locked, #0x0
    120          	si446x_state = SI446X_IDLE;
   \   000008 35 10 ....   MOV       L:si446x_state, #0x10
    121          
    122          	CLEAN_RXBUFS();
   \   00000C 35 FF ....   MOV       L:first, #0xffffffffffffffff
   \   000010 35 00 ....   MOV       L:last, #0x0
    123          	CLEAN_TXBUF();
   \   000014 35 00 ....   MOV       L:si446x_txbuf, #0x0
    124          
    125          	return 0;
   \   000018 5F           CLRW      X
   \   000019 87           RETF
    126          }
    127          
    128          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    129          static int si446x_radio_transmit(unsigned short payload_len)
    130          {
    131          	#define DEBUGTEST 1
    132          	//si446x_txbuf[0] = payload_len;  //data packet length 
    133          	si446x_txbuf[0] = payload_len + 2;  //data packet length  + 2 BYTE CRC
   \                     si446x_radio_transmit:
   \   000000 9F           LD        A, XL
   \   000001 AB 02        ADD       A, #0x2
   \   000003 C7 ....      LD        L:si446x_txbuf, A
    134          
    135          	GET_LOCK();
   \   000006 C6 ....      LD        A, L:locked
   \   000009 AB 01        ADD       A, #0x1
   \   00000B C7 ....      LD        L:locked, A
    136          
    137          	while((si446x_state & SI446X_TX) || (si446x_state & SI446X_RX))
   \   00000E 7202 .... 05 BTJT      L:si446x_state, #0x1, L:??si446x_radio_transmit_0
   \   000013 7201 .... 13 BTJF      L:si446x_state, #0x0, L:??si446x_radio_transmit_1
    138          	{	
    139                  /* we are not transmitting. This means that
    140                     we just started receiving a packet or sending a paket,
    141                     so we drop the transmission. */
    142          		XPRINTF((10, "SEND DROP-----------\r\n"));       
   \                     ??si446x_radio_transmit_0:
   \   000018 90AE ....    LDW       Y, #`?<Constant "SEND DROP-----------\\r\\n">`
   \   00001C AE 000A      LDW       X, #0xa
   \   00001F 8D ......    CALLF     __xstd_printf
    143          		RELEASE_LOCK();
   \   000023 8D ......    CALLF     RELEASE_LOCK
    144                  return RADIO_TX_COLLISION;
   \   000027 AE 0002      LDW       X, #0x2
   \   00002A 87           RETF
    145               }
    146          
    147          	si446x_state = SI446X_TX;
   \                     ??si446x_radio_transmit_1:
   \   00002B 35 02 ....   MOV       L:si446x_state, #0x2
    148          	is_transmitting = 1;
   \   00002F 35 01 ....   MOV       L:is_transmitting, #0x1
    149          	if(si446xRadioSendFixLenData(si446x_txbuf) == 0x00) 
   \   000033 AE ....      LDW       X, #si446x_txbuf
   \   000036 8D ......    CALLF     si446xRadioSendFixLenData
   \   00003A 5D           TNZW      X
   \   00003B 26 2A        JRNE      L:??si446x_radio_transmit_2
    150          	{
    151          		#if  DEBUGTEST > 0
    152          		{
    153          			MEM_DUMP(10, "TX->",(u_char*)si446x_txbuf, si446x_txbuf[0]+1);
   \   00003D C6 ....      LD        A, L:si446x_txbuf
   \   000040 5F           CLRW      X
   \   000041 97           LD        XL, A
   \   000042 5C           INCW      X
   \   000043 BF ..        LDW       S:?w1, X
   \   000045 AE ....      LDW       X, #si446x_txbuf
   \   000048 BF ..        LDW       S:?w0, X
   \   00004A 90AE ....    LDW       Y, #`?<Constant "TX->">`
   \   00004E AE 000A      LDW       X, #0xa
   \   000051 8D ......    CALLF     __xstd_dump
    154          		}
    155          		#endif
    156          		CLEAN_TXBUF( );
   \   000055 35 00 ....   MOV       L:si446x_txbuf, #0x0
    157          		is_transmitting = 0;
   \   000059 35 00 ....   MOV       L:is_transmitting, #0x0
    158          		RELEASE_LOCK( );
   \   00005D 8D ......    CALLF     RELEASE_LOCK
    159          		si446x_state = SI446X_IDLE; // when send packet, return IDLE state
   \   000061 35 10 ....   MOV       L:si446x_state, #0x10
    160          		//memset((u_char*)si4432_txbuf, 0, si4432_txbuf[0] + 1);//clear txbuf
    161          		return RADIO_TX_OK;
   \   000065 5F           CLRW      X
   \   000066 87           RETF
    162          	}
    163          	else
    164          	{
    165          		RELEASE_LOCK( );
   \                     ??si446x_radio_transmit_2:
   \   000067 8D ......    CALLF     RELEASE_LOCK
    166          		/* TODO: Do we have to retransmit? */
    167          		CLEAN_TXBUF( );
   \   00006B 35 00 ....   MOV       L:si446x_txbuf, #0x0
    168          		XPRINTF((10, "transmit error\r\n"));
   \   00006F 90AE ....    LDW       Y, #`?<Constant "transmit error\\r\\n">`
   \   000073 AE 000A      LDW       X, #0xa
   \   000076 8D ......    CALLF     __xstd_printf
    169          		si446x_recfg( );//init again 
                 		^
Warning[Pe223]: function "si446x_recfg" declared implicitly
   \   00007A 8D ......    CALLF     si446x_recfg
    170          		is_transmitting = 0;
   \   00007E 35 00 ....   MOV       L:is_transmitting, #0x0
    171          		si446x_state = SI446X_IDLE; // when send packet, return IDLE state
   \   000082 35 10 ....   MOV       L:si446x_state, #0x10
    172          		return RADIO_TX_ERR;
   \   000086 5F           CLRW      X
   \   000087 5C           INCW      X
   \   000088 87           RETF
    173          	}
    174          }
    175          
    176          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    177          static int si446x_radio_prepare(const void *payload, unsigned short payload_len)
    178          {
   \                     si446x_radio_prepare:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 BF ..        LDW       S:?w6, X
   \   00000A 90BF ..      LDW       S:?w4, Y
    179          	u_short uwCrc = 0;
   \   00000D 3F ..        CLR       S:?b11
   \   00000F 3F ..        CLR       S:?b10
    180          	GET_LOCK( );
   \   000011 C6 ....      LD        A, L:locked
   \   000014 AB 01        ADD       A, #0x1
   \   000016 C7 ....      LD        L:locked, A
    181          	if(payload_len > SI446X_MAX_PACKET_LEN) 
   \   000019 BE ..        LDW       X, S:?w4
   \   00001B A3 0021      CPW       X, #0x21
   \   00001E 25 1B        JRC       L:??si446x_radio_prepare_0
    182          	{
    183          		XPRINTF((10,"SI4432: payload length=%d is too long.\r\n", payload_len));
   \   000020 8D ......    CALLF     L:?push_w4
   \   000024 90AE ....    LDW       Y, #`?<Constant "SI4432: payload lengt...">`
   \   000028 AE 000A      LDW       X, #0xa
   \   00002B 8D ......    CALLF     __xstd_printf
   \   00002F 5B 02        ADD       SP, #0x2
    184          		RELEASE_LOCK( );
   \   000031 8D ......    CALLF     RELEASE_LOCK
    185          		return RADIO_TX_ERR;
   \   000035 5F           CLRW      X
   \   000036 5C           INCW      X
   \   000037 AC ......    JPF       L:?epilogue_l2_w6
    186          	}
    187          	#if !RADIO_WAIT_FOR_PACKET_SENT
    188          	/* 
    189          	* Check if the txbuf is empty. Wait for a finite time.
    190          	* This should not occur if we wait for the end of transmission in 
    191          	* si446x_radio_transmit().
    192          	*/
    193          	if(wait_for_tx()) 
    194          	{
    195          		XPRINTF((10,"si446x: radio prepare tx buffer full.\r\n"));
    196          		RELEASE_LOCK( );
    197          		return RADIO_TX_ERR;
    198          	}
    199          	#endif /* RADIO_WAIT_FOR_PACKET_SENT */
    200          	
    201          	/*
    202          	* Copy to the txbuf. 
    203          	* The first byte must be the packet length.
    204          	*/
    205          	CLEAN_TXBUF();
   \                     ??si446x_radio_prepare_0:
   \   00003B 35 00 ....   MOV       L:si446x_txbuf, #0x0
    206          	uwCrc = crc16_data((const u_char*)payload, payload_len,0);
                 	        ^
Warning[Pe223]: function "crc16_data" declared implicitly
   \   00003F 3F ..        CLR       S:?b1
   \   000041 3F ..        CLR       S:?b0
   \   000043 90BE ..      LDW       Y, S:?w4
   \   000046 BE ..        LDW       X, S:?w6
   \   000048 8D ......    CALLF     crc16_data
   \   00004C BF ..        LDW       S:?w5, X
    207          	memcpy(si446x_txbuf+1, payload, payload_len);
   \   00004E 8D ......    CALLF     L:?mov_w0_w4
   \   000052 90BE ..      LDW       Y, S:?w6
   \   000055 AE ....      LDW       X, #si446x_txbuf + 1
   \   000058 8D ......    CALLF     memcpy
    208          	si446x_txbuf[payload_len + 1] = uwCrc &0xff;
   \   00005C BE ..        LDW       X, S:?w4
   \   00005E 1C ....      ADDW      X, #si446x_txbuf + 1
   \   000061 B6 ..        LD        A, S:?b11
   \   000063 F7           LD        (X), A
    209          	si446x_txbuf[payload_len + 2] = (uwCrc>>8)&0xff;
   \   000064 BE ..        LDW       X, S:?w4
   \   000066 1C ....      ADDW      X, #si446x_txbuf + 2
   \   000069 9093         LDW       Y, X
   \   00006B BE ..        LDW       X, S:?w5
   \   00006D 4F           CLR       A
   \   00006E 01           RRWA      X, A
   \   00006F 9F           LD        A, XL
   \   000070 90F7         LD        (Y), A
    210          
    211          	RELEASE_LOCK( );
   \   000072 8D ......    CALLF     RELEASE_LOCK
    212          	return RADIO_TX_OK;
   \   000076 5F           CLRW      X
   \   000077 AC ......    JPF       L:?epilogue_l2_w6
    213          }
    214          
    215          
    216          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    217          int si446x_radio_send(const void *payload, unsigned short payload_len)
    218          {
   \                     si446x_radio_send:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 90BF ..      LDW       S:?w4, Y
    219          	si446x_radio_prepare(payload, payload_len);
   \   000007 90BE ..      LDW       Y, S:?w4
   \   00000A 8D ......    CALLF     si446x_radio_prepare
    220          	return si446x_radio_transmit(payload_len);
   \   00000E BE ..        LDW       X, S:?w4
   \   000010 8D ......    CALLF     si446x_radio_transmit
   \   000014 AC ......    JPF       L:?epilogue_w4
    221          }
    222          
    223          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    224          static int si446x_radio_off(void)
    225          {
    226          	return 1;
   \                     si446x_radio_off:
   \   000000 5F           CLRW      X
   \   000001 5C           INCW      X
   \   000002 87           RETF
    227          }
    228          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    229          static int si446x_radio_on(void)
    230          {
    231          	return 1;
   \                     si446x_radio_on:
   \   000000 5F           CLRW      X
   \   000001 5C           INCW      X
   \   000002 87           RETF
    232          }
    233          
    234          
    235          
    236          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    237          static int si446x_radio_channel_clear(void)
    238          {
    239            //return ST_RadioChannelIsClear();
    240            	if ((si446x_state&SI446X_RX_RECEIVING == SI446X_RX_RECEIVING)||(si446x_state&SI446X_TX == SI446X_TX))
   \                     si446x_radio_channel_clear:
   \   000000 7200 .... 05 BTJT      L:si446x_state, #0x0, L:??si446x_radio_channel_clear_0
   \   000005 7201 .... 02 BTJF      L:si446x_state, #0x0, L:??si446x_radio_channel_clear_1
    241            	{
    242            		return 0;//rf busy
   \                     ??si446x_radio_channel_clear_0:
   \   00000A 5F           CLRW      X
   \   00000B 87           RETF
    243            	}
    244          
    245            	//need be improve
    246            	if (si446x_get_cur_rssi( ) > RF_RSSI_THD)
                   	    ^
Warning[Pe223]: function "si446x_get_cur_rssi" declared implicitly
   \                     ??si446x_radio_channel_clear_1:
   \   00000C 8D ......    CALLF     si446x_get_cur_rssi
   \   000010 A3 0065      CPW       X, #0x65
   \   000013 2F 02        JRSLT     L:??si446x_radio_channel_clear_2
    247            	{
    248            		return 0;//busy
   \   000015 5F           CLRW      X
   \   000016 87           RETF
    249            	}
    250          	return 1;
   \                     ??si446x_radio_channel_clear_2:
   \   000017 5F           CLRW      X
   \   000018 5C           INCW      X
   \   000019 87           RETF
    251          }
    252          
    253          
    254          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    255          static int si446x_radio_receiving_packet(void)
    256          {
    257            //return receiving_packet;
    258              return si446x_state & SI446X_RX_RECEIVING;
   \                     si446x_radio_receiving_packet:
   \   000000 C6 ....      LD        A, L:si446x_state
   \   000003 5F           CLRW      X
   \   000004 97           LD        XL, A
   \   000005 02           RLWA      X, A
   \   000006 A4 00        AND       A, #0x0
   \   000008 02           RLWA      X, A
   \   000009 A4 20        AND       A, #0x20
   \   00000B 02           RLWA      X, A
   \   00000C 87           RETF
    259          }
    260          
    261          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    262          static int si446x_radio_pending_packet(void)
    263          {
    264            return !RXBUFS_EMPTY();
   \                     si446x_radio_pending_packet:
   \   000000 C6 ....      LD        A, L:first
   \   000003 A1 FF        CP        A, #0xffffffffffffffff
   \   000005 27 04        JREQ      L:??si446x_radio_pending_packet_0
   \   000007 A6 01        LD        A, #0x1
   \   000009 20 01        JRA       L:??si446x_radio_pending_packet_1
   \                     ??si446x_radio_pending_packet_0:
   \   00000B 4F           CLR       A
   \                     ??si446x_radio_pending_packet_1:
   \   00000C 5F           CLRW      X
   \   00000D 97           LD        XL, A
   \   00000E 87           RETF
    265          }
    266          
    267          
    268          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    269          int si446x_radio_is_on(void)
    270          {
    271            return 0;
   \                     si446x_radio_is_on:
   \   000000 5F           CLRW      X
   \   000001 87           RETF
    272          }
    273          
    274          
    275          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    276          static int si446x_radio_read(void *buf, unsigned short bufsize)
    277          {
    278            return read_from_rxbuf(buf, bufsize);
   \                     si446x_radio_read:
   \   000000 AC ......    JPF       read_from_rxbuf
    279          }
    280          
    281          
    282          /*---------------------------------------------------------------------------*/
    283          static int add_to_rxbuf(uint8_t *src)
    284          {
    285          	if(RXBUFS_FULL()) 
    286          	{
    287          		return 0;
    288          	}
    289          
    290          	memcpy(si446x_rxbufs[last], src, src[0] + 1);//src[0] is data length in buf not include src[0], so all data length need to add 1 
    291          	si446x_rxbufs[last][SI446X_CUR_RSSI] = src[SI446X_CUR_RSSI];
    292          	//memcpy(si4432_rxbufs[last], src, src[0]);
    293          	#if SI446X_RADIO_RXBUFS > 1
    294          	last = (last + 1) % SI446X_RADIO_RXBUFS;
    295          	if(first == -1) 
    296          	{
    297          		first = 0;
    298          	}
    299          	#endif
    300          	
    301          	memset(src, 0, src[0] + 1);//clear buf
    302          	return 1;
    303          }
    304          
    305          
    306          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1, keep-with-next
    307          static int read_from_rxbuf(void *dest, unsigned short len)
    308          {
   \                     read_from_rxbuf:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 BF ..        LDW       S:?w1, X
   \   000009 90BF ..      LDW       S:?w4, Y
    309          	//PRINTF("first 0   %d\r\n", first);
    310          	u_char  packet_rssi;
    311          	int8_t rssi;
                 	       ^
Warning[Pe550]: variable "rssi" was set but never used
    312          	if(RXBUFS_EMPTY()) 
   \   00000C C6 ....      LD        A, L:first
   \   00000F A1 FF        CP        A, #0xffffffffffffffff
   \   000011 26 04        JRNE      L:??read_from_rxbuf_0
    313          	{          
    314          		return 0;
   \   000013 5F           CLRW      X
   \   000014 CC ....      JP        L:??read_from_rxbuf_1
    315          	}
    316          
    317          	if(si446x_rxbufs[first][0] > len) 
   \                     ??read_from_rxbuf_0:
   \   000017 C6 ....      LD        A, L:first
   \   00001A 8D ......    CALLF     L:?sext16_x_a
   \   00001E 9093         LDW       Y, X
   \   000020 AE 0020      LDW       X, #0x20
   \   000023 BF ..        LDW       S:?w0, X
   \   000025 93           LDW       X, Y
   \   000026 8D ......    CALLF     L:?mul16_x_x_w0
   \   00002A D6 ....      LD        A, (L:si446x_rxbufs,X)
   \   00002D 5F           CLRW      X
   \   00002E 97           LD        XL, A
   \   00002F BF ..        LDW       S:?w0, X
   \   000031 BE ..        LDW       X, S:?w4
   \   000033 B3 ..        CPW       X, S:?w0
   \   000035 24 06        JRNC      L:??read_from_rxbuf_2
    318          	{   /* Too large packet for dest. */
    319          		len = 0;
   \   000037 3F ..        CLR       S:?b9
   \   000039 3F ..        CLR       S:?b8
   \   00003B 20 6E        JRA       L:??read_from_rxbuf_3
    320          	} 
    321          	else 
    322          	{
    323          		//len = si446x_rxbufs[first][0];
    324          		len = si446x_rxbufs[first][0]-2;
   \                     ??read_from_rxbuf_2:
   \   00003D C6 ....      LD        A, L:first
   \   000040 8D ......    CALLF     L:?sext16_x_a
   \   000044 9093         LDW       Y, X
   \   000046 AE 0020      LDW       X, #0x20
   \   000049 BF ..        LDW       S:?w0, X
   \   00004B 93           LDW       X, Y
   \   00004C 8D ......    CALLF     L:?mul16_x_x_w0
   \   000050 D6 ....      LD        A, (L:si446x_rxbufs,X)
   \   000053 5F           CLRW      X
   \   000054 97           LD        XL, A
   \   000055 5A           DECW      X
   \   000056 5A           DECW      X
   \   000057 BF ..        LDW       S:?w4, X
    325          		packet_rssi = si446x_rxbufs[first][SI446X_CUR_RSSI];
   \   000059 C6 ....      LD        A, L:first
   \   00005C 8D ......    CALLF     L:?sext16_x_a
   \   000060 9093         LDW       Y, X
   \   000062 AE 0020      LDW       X, #0x20
   \   000065 BF ..        LDW       S:?w0, X
   \   000067 93           LDW       X, Y
   \   000068 8D ......    CALLF     L:?mul16_x_x_w0
   \   00006C 1C ....      ADDW      X, #si446x_rxbufs + 31
   \   00006F F6           LD        A, (X)
    326          		rssi = -((int8_t)((0xff-packet_rssi)>>1));
   \   000070 5F           CLRW      X
   \   000071 97           LD        XL, A
   \   000072 BF ..        LDW       S:?w0, X
   \   000074 AE 00FF      LDW       X, #0xff
   \   000077 72B0 ....    SUBW      X, S:?w0
   \   00007B 57           SRAW      X
   \   00007C 41           EXG       A, XL
   \   00007D B7 ..        LD        S:?b10, A
   \   00007F 41           EXG       A, XL
   \   000080 30 ..        NEG       S:?b10
    327          		//memcpy(dest, (uint8_t*)&si446x_rxbufs[first][0] + 1, len);
    328          		memcpy(dest, (uint8_t*)&si446x_rxbufs[first][0] + 1, len);
   \   000082 8D ......    CALLF     L:?mov_w0_w4
   \   000086 90BE ..      LDW       Y, S:?w0
   \   000089 C6 ....      LD        A, L:first
   \   00008C 8D ......    CALLF     L:?sext16_x_a
   \   000090 BF ..        LDW       S:?w2, X
   \   000092 AE 0020      LDW       X, #0x20
   \   000095 BF ..        LDW       S:?w0, X
   \   000097 BE ..        LDW       X, S:?w2
   \   000099 8D ......    CALLF     L:?mul16_x_x_w0
   \   00009D 1C ....      ADDW      X, #si446x_rxbufs + 1
   \   0000A0 90BF ..      LDW       S:?w0, Y
   \   0000A3 9093         LDW       Y, X
   \   0000A5 BE ..        LDW       X, S:?w1
   \   0000A7 8D ......    CALLF     memcpy
    329          		//packetbuf_set_attr(PACKETBUF_ATTR_RSSI, last_rssi);
    330          	}
    331          
    332          	#if SI446X_RADIO_RXBUFS > 1
    333          	{
    334          		int first_tmp;
    335          		first = (first + 1) % SI446X_RADIO_RXBUFS;
   \                     ??read_from_rxbuf_3:
   \   0000AB C6 ....      LD        A, L:first
   \   0000AE 8D ......    CALLF     L:?sext16_x_a
   \   0000B2 5C           INCW      X
   \   0000B3 90AE 0004    LDW       Y, #0x4
   \   0000B7 8D ......    CALLF     L:?smod16_y_x_y
   \   0000BB 909F         LD        A, YL
   \   0000BD C7 ....      LD        L:first, A
    336          		first_tmp = first;
   \   0000C0 C6 ....      LD        A, L:first
   \   0000C3 8D ......    CALLF     L:?sext16_x_a
   \   0000C7 BF ..        LDW       S:?w0, X
    337          		if(first_tmp == last) 
   \   0000C9 C6 ....      LD        A, L:last
   \   0000CC 8D ......    CALLF     L:?sext16_x_a
   \   0000D0 B3 ..        CPW       X, S:?w0
   \   0000D2 26 08        JRNE      L:??read_from_rxbuf_4
    338          		{
    339          			CLEAN_RXBUFS();
   \   0000D4 35 FF ....   MOV       L:first, #0xffffffffffffffff
   \   0000D8 35 00 ....   MOV       L:last, #0x0
    340          		}
    341          	}
    342          	#else
    343          	CLEAN_RXBUFS();
    344          	#endif
    345          
    346          	return len;
   \                     ??read_from_rxbuf_4:
   \   0000DC BE ..        LDW       X, S:?w4
   \                     ??read_from_rxbuf_1:
   \   0000DE 32 ....      POP       S:?b10
   \   0000E1 AC ......    JPF       L:?epilogue_w4
    347          }
    348          
    349          
    350          
    351          
    352          
    353          static int is_broadcast_addr(uint8_t mode, uint8_t *addr)
    354          {
    355          
    356            return 1;
    357          }
    358          
    359          
    360          
    361          /******************************************************************/
    362          //TX receive led state  red led
    363          #define RF_CHECK_TIME_BASE			(30*60*CLOCK_SECOND)
    364          #define RF_CHECK_TIME_RATE			(1000)
    365          
    366          static void rf_check_process(void)
    367          {
    368          	if ( count_tx ==0 || count_rx == 0 )
    369          	{
    370          		ubRxFlag = 0;
    371          		si446x_recfg( );
                 		^
Warning[Pe223]: function "si446x_recfg" declared implicitly

  static int add_to_rxbuf(uint8_t *src)
             ^
"E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c",283  Warning[Pe177]: 
          function "add_to_rxbuf" was declared but never referenced

  static int is_broadcast_addr(uint8_t mode, uint8_t *addr)
             ^
"E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c",353  Warning[Pe177]: 
          function "is_broadcast_addr" was declared but never referenced

  static void rf_check_process(void)
              ^
"E:\hwpro-2016\20160627_L\si4438\radiolib\si446x_rf.c",366  Warning[Pe177]: 
          function "rf_check_process" was declared but never referenced
    372          		si446x_state = SI446X_IDLE;
    373          
    374          		XPRINTF((0, "rf recfg\n"));
    375          	}
    376          	XPRINTF((0, "tx %d, rx %d\n", count_tx, count_rx));
    377          	count_tx = 0;
    378          	count_rx = 0;
    379          }
    380          
    381          
    382          

   \                                 In section .far_func.text, align 1
    383          void static ph_prx_handler(void)
    384          {
    385          	si446xReadMutiData(ubarxbuf);
   \                     ph_prx_handler:
   \   000000 AE ....      LDW       X, #ubarxbuf
   \   000003 8D ......    CALLF     si446xReadMutiData
    386          
    387          	if (ubarxbuf[0] != 0)
   \   000007 C6 ....      LD        A, L:ubarxbuf
   \   00000A A1 00        CP        A, #0x0
   \   00000C 27 06        JREQ      L:??ph_prx_handler_0
    388          	{
    389          		ubarxbuf[SI446X_CUR_RSSI] = ubcurrssi; //add rssi to last data position
   \   00000E C6 ....      LD        A, L:ubcurrssi
   \   000011 C7 ....      LD        L:ubarxbuf + 31, A
    390          	}
    391          	si446xStartRX( );
   \                     ??ph_prx_handler_0:
   \   000014 8D ......    CALLF     si446xStartRX
    392          	si446x_state = SI446X_IDLE;
   \   000018 35 10 ....   MOV       L:si446x_state, #0x10
    393          	ubRxFlag = 0;	
   \   00001C 35 00 ....   MOV       L:ubRxFlag, #0x0
    394          }
   \   000020 87           RETF
    395          

   \                                 In section .far_func.text, align 1
    396          void static modem_syde_handler(void)
    397          {
    398          	//u_char ubrssi = 0;
    399          	si446x_get_modem_status(0x00);
   \                     modem_syde_handler:
   \   000000 4F           CLR       A
   \   000001 8D ......    CALLF     si446x_get_modem_status
    400          	ubcurrssi = Si446xCmd.GET_MODEM_STATUS.CURR_RSSI;
   \   000005 C6 ....      LD        A, L:Si446xCmd + 2
   \   000008 C7 ....      LD        L:ubcurrssi, A
    401          	//last_rssi = -((int8_t)((0xff-ubcurrssi)>>1));
    402          	//XPRINTF((0, "last_rssi = %d\r\n", last_rssi));
    403          	ubarxbuf[0] = 0;
   \   00000B 35 00 ....   MOV       L:ubarxbuf, #0x0
    404          	si446x_state = SI446X_RX;
   \   00000F 35 01 ....   MOV       L:si446x_state, #0x1
    405          	ubRxFlag = 1;
   \   000013 35 01 ....   MOV       L:ubRxFlag, #0x1
    406          }
   \   000017 87           RETF
    407          

   \                                 In section .far_func.text, align 1
    408          void static chip_cmderror_handler(void)
    409          {
    410          	si446x_change_dev_current_state(SI446X_SLEEP);
   \                     chip_cmderror_handler:
   \   000000 A6 01        LD        A, #0x1
   \   000002 8D ......    CALLF     si446x_change_dev_current_state
    411          	si446xStartRX( );
   \   000006 AC ......    JPF       si446xStartRX
    412          }
    413          
    414          
    415          #if 0
    416          /**
    417            * @brief External IT PIN4 Interrupt routine.
    418            * @param  None
    419            * @retval None
    420            */
    421          INTERRUPT_HANDLER(EXTI4_IRQHandler, 12)
    422          {
    423            /* In order to detect unexpected events during development,
    424               it is recommended to set a breakpoint on the following instruction.
    425            */
    426            EXTI_ClearITPendingBit(EXTI_IT_Pin4);
    427            Set_Int_Event( SPI_INT );
    428          }
    429          #endif
    430          

   \                                 In section .far_func.text, align 1
    431          INTERRUPT_HANDLER(EXTI4_IRQHandler, 12)
    432          {	
   \                     EXTI4_IRQHandler:
   \                     _interrupt_14:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
   \   00000E 8D ......    CALLF     L:?push_w4
   \   000012 3B ....      PUSH      S:?b10
    433          	U8 si446x_ph_pend = 0x00;
   \   000015 3F ..        CLR       S:?b10
    434          	U8 si446x_modem_pend = 0x00;
   \   000017 3F ..        CLR       S:?b9
    435          	U8 si446x_chip_pend = 0x00;
   \   000019 3F ..        CLR       S:?b8
    436          
    437          	EXTI_ClearITPendingBit(EXTI_IT_Pin4);
   \   00001B AE 0010      LDW       X, #0x10
   \   00001E 8D ......    CALLF     EXTI_ClearITPendingBit
    438          
    439          	//EXTI_ClearITPendingBit(EXTI_Line6);	
    440          			
    441          	si446x_get_int_status( );
   \   000022 8D ......    CALLF     si446x_get_int_status
    442          	si446x_ph_pend = Si446xCmd.GET_INT_STATUS.PH_PEND;
   \   000026 C6 ....      LD        A, L:Si446xCmd + 2
   \   000029 B7 ..        LD        S:?b10, A
    443          	si446x_modem_pend = Si446xCmd.GET_INT_STATUS.MODEM_PEND;
   \   00002B C6 ....      LD        A, L:Si446xCmd + 4
   \   00002E B7 ..        LD        S:?b9, A
    444          	si446x_chip_pend = Si446xCmd.GET_INT_STATUS.CHIP_PEND;
   \   000030 C6 ....      LD        A, L:Si446xCmd + 6
   \   000033 B7 ..        LD        S:?b8, A
    445          	
    446          	//packet sent finish
    447          	if (si446x_ph_pend& SI446X_INT_CTL_PH_PSENT_EN)//packet sent
   \   000035 B6 ..        LD        A, S:?b10
   \   000037 A4 20        AND       A, #0x20
   \   000039 A1 00        CP        A, #0x0
   \   00003B 27 0B        JREQ      L:??EXTI4_IRQHandler_0
    448          	{
    449          		si446x_set_pksent( );
   \   00003D 8D ......    CALLF     si446x_set_pksent
    450          		//XPRINTF((0, "PH = %02x\r\n", ubph_en));
    451          		count_tx++;
   \   000041 CE ....      LDW       X, L:count_tx
   \   000044 5C           INCW      X
   \   000045 CF ....      LDW       L:count_tx, X
    452          	}
    453          	//packet rx finish
    454          	if (si446x_ph_pend & SI446X_INT_CTL_PH_PRX_EN)
   \                     ??EXTI4_IRQHandler_0:
   \   000048 B6 ..        LD        A, S:?b10
   \   00004A A4 10        AND       A, #0x10
   \   00004C A1 00        CP        A, #0x0
   \   00004E 27 0B        JREQ      L:??EXTI4_IRQHandler_1
    455          	{
    456          		ph_prx_handler( );
   \   000050 8D ......    CALLF     ph_prx_handler
    457          		count_rx++;
   \   000054 CE ....      LDW       X, L:count_rx
   \   000057 5C           INCW      X
   \   000058 CF ....      LDW       L:count_rx, X
    458          	}
    459          	//packet crc error
    460          	if (si446x_ph_pend & SI446X_INT_CTL_PH_CRCE_EN)
   \                     ??EXTI4_IRQHandler_1:
   \   00005B B6 ..        LD        A, S:?b10
   \   00005D A4 08        AND       A, #0x8
   \   00005F A1 00        CP        A, #0x0
   \   000061 27 0A        JREQ      L:??EXTI4_IRQHandler_2
    461          	{
    462          		si446x_change_dev_current_state(SI446X_SLEEP);
   \   000063 A6 01        LD        A, #0x1
   \   000065 8D ......    CALLF     si446x_change_dev_current_state
    463          		si446xStartRX( );
   \   000069 8D ......    CALLF     si446xStartRX
    464          	}
    465          
    466          	//syde
    467          	if (si446x_modem_pend & SI446X_INT_CTL_MODEM_SYDE_EN)
   \                     ??EXTI4_IRQHandler_2:
   \   00006D B6 ..        LD        A, S:?b9
   \   00006F A4 01        AND       A, #0x1
   \   000071 A1 00        CP        A, #0x0
   \   000073 27 04        JREQ      L:??EXTI4_IRQHandler_3
    468          	{
    469          		modem_syde_handler();
   \   000075 8D ......    CALLF     modem_syde_handler
    470          	}
    471          
    472          	//cmd error
    473          	if (si446x_chip_pend & SI446X_INT_CTL_CHIP_CMERR_EN)
   \                     ??EXTI4_IRQHandler_3:
   \   000079 B6 ..        LD        A, S:?b8
   \   00007B A4 08        AND       A, #0x8
   \   00007D A1 00        CP        A, #0x0
   \   00007F 27 0D        JREQ      L:??EXTI4_IRQHandler_4
    474          	{
    475          		chip_cmderror_handler( );
   \   000081 8D ......    CALLF     chip_cmderror_handler
    476          		XPRINTF((0, "cmd_error\n"));
   \   000085 90AE ....    LDW       Y, #`?<Constant "cmd_error\\n">`
   \   000089 5F           CLRW      X
   \   00008A 8D ......    CALLF     __xstd_printf
    477          	}
    478          	//Set_Int_Event( SPI_INT );
    479          }
   \                     ??EXTI4_IRQHandler_4:
   \   00008E 32 ....      POP       S:?b10
   \   000091 8D ......    CALLF     L:?pop_w4
   \   000095 8D ......    CALLF     L:?pop_l1
   \   000099 8D ......    CALLF     L:?pop_l0
   \   00009D 80           IRET
    480          
    481          
    482          /*--------------------------------------------------------------------------*/

   \                                 In section .near.rodata, align 1
    483          const struct radio_driver si446x_radio_driver = {
   \                     si446x_radio_driver:
   \   000000 ......       DC24 si446x_radio_rf_init, si446x_radio_prepare, si446x_radio_transmit
   \          ......      
   \   000009 ......       DC24 si446x_radio_send, si446x_radio_read, si446x_radio_channel_clear
   \          ......      
   \   000012 ......       DC24 si446x_radio_receiving_packet, si446x_radio_pending_packet
   \          ......      
   \   000018 ......       DC24 si446x_radio_on, si446x_radio_off
   \          ......      

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "SEND DROP-----------\\r\\n">`:
   \   000000 53 45 4E 44  DC8 "SEND DROP-----------\015\012"
   \          20 44 52 4F 

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "TX->">`:
   \   000000 54 58 2D 3E  DC8 "TX->"
   \          00          

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "transmit error\\r\\n">`:
   \   000000 74 72 61 6E  DC8 "transmit error\015\012"
   \          73 6D 69 74 

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "SI4432: payload lengt...">`:
   \   000000 53 49 34 34  DC8 "SI4432: payload length=%d is too long.\015\012"
   \          33 32 3A 20 

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "cmd_error\\n">`:
   \   000000 63 6D 64 5F  DC8 "cmd_error\012"
   \          65 72 72 6F 
    484            si446x_radio_rf_init,
    485            si446x_radio_prepare,
    486            si446x_radio_transmit,
    487            si446x_radio_send,
    488            si446x_radio_read,
    489            si446x_radio_channel_clear,
    490            si446x_radio_receiving_packet,
    491            si446x_radio_pending_packet,
    492            si446x_radio_on,
    493            si446x_radio_off,
    494          };
    495          
    496          
    497          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      23  ?<Constant "SEND DROP-----------\r\n">
      41  ?<Constant "SI4432: payload lengt...">
       5  ?<Constant "TX->">
      11  ?<Constant "cmd_error\n">
      17  ?<Constant "transmit error\r\n">
     158  EXTI4_IRQHandler
      16  RELEASE_LOCK
      10  chip_cmderror_handler
       2  count_rx
       2  count_tx
       1  first
       1  is_transmitting
       1  last
       1  locked
      24  modem_syde_handler
      33  ph_prx_handler
     229  read_from_rxbuf
      26  si446x_radio_channel_clear
      30  si446x_radio_driver
       2  si446x_radio_is_on
       3  si446x_radio_off
       3  si446x_radio_on
      15  si446x_radio_pending_packet
     123  si446x_radio_prepare
       4  si446x_radio_read
      13  si446x_radio_receiving_packet
      26  si446x_radio_rf_init
      24  si446x_radio_send
     137  si446x_radio_transmit
     128  si446x_rxbufs
       1  si446x_state
      32  si446x_txbuf
       1  ubRxFlag
     129  ubarxbuf
       1  ubcurrssi

 
 846 bytes in section .far_func.text
 298 bytes in section .near.bss
   2 bytes in section .near.data
 127 bytes in section .near.rodata
 
 846 bytes of CODE  memory
 127 bytes of CONST memory
 300 bytes of DATA  memory

Errors: none
Warnings: 12
