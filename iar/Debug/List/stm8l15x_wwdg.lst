###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:51 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wwdg. #
#                    c                                                        #
#    Command line =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wwdg. #
#                    c -e -Ol --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model medium --data_model medium -o               #
#                    E:\hwpro-2016\20160627_L\iar\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8L15X_MD -lC             #
#                    E:\hwpro-2016\20160627_L\iar\Debug\List\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\ -I     #
#                    E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I             #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_wwdg.ls #
#                    t                                                        #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_wwdg.o   #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wwdg.c
      1          /**
      2            ********************************************************************************
      3            * @file    stm8l15x_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Window watchdog (WWDG) peripheral:           
      9            *           - Refresh window and Counter configuration
     10            *           - WWDG activation
     11            *           - Couter and software reset management
     12            *             
     13            *  @verbatim
     14            *    
     15            *          ===================================================================
     16            *                                     WWDG features
     17            *          ===================================================================
     18            *                                        
     19            *          Once enabled the WWDG generates a system reset on expiry of a programmed
     20            *          time period, unless the program refreshes the counter (downcounter) 
     21            *          before to reach 0x3F value (i.e. a reset is generated when the counter
     22            *          value rolls over from 0x40 to 0x3F). 
     23            *          An MCU reset is also generated if the counter value is refreshed
     24            *          before the counter has reached the refresh window value. This 
     25            *          implies that the counter must be refreshed in a limited window.
     26            *            
     27            *          Once enabled the WWDG cannot be disabled except by a system reset.
     28            *          
     29            *          If the WWDG is activated and the watchdog reset on halt option is 
     30            *          selected (Option byte), then the HALT instruction will generate a reset.
     31            *          
     32            *          WWDGF flag in RST_SR register can be used to inform when a WWDG
     33            *          reset occurs.
     34            *            
     35            *          WWDG timeout = (WWDG counter clock) * 12288 * (T[5:0] + 1)
     36            *                      
     37            *          Min-max timeout value @16 MHz(PCLK1): ~0.768 ms / ~49.152 ms
     38            *                            
     39            *          ===================================================================
     40            *                                 How to use this driver
     41            *          =================================================================== 
     42            *          1. Configure the WWDG refresh window using WWDG_SetWindowValue() function
     43            *            
     44            *          2. Set the WWDG counter value and start it using WWDG_Enable() function.
     45            *             When the WWDG is enabled the counter value should be configured to 
     46            *             a value greater than 0x40 to prevent generating an immediate reset.     
     47            *            
     48            *          3. Then the application program must refresh the WWDG counter at regular
     49            *             intervals during normal operation to prevent an MCU reset, using
     50            *             WWDG_SetCounter() function. This operation must occur only when
     51            *             the counter value is lower than the refresh window value, 
     52            *             programmed using WWDG_SetWindowValue().         
     53            *
     54            *  @endverbatim  
     55            *
     56            ******************************************************************************
     57            * @attention
     58            *
     59            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     60            *
     61            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     62            * You may not use this file except in compliance with the License.
     63            * You may obtain a copy of the License at:
     64            *
     65            *        http://www.st.com/software_license_agreement_liberty_v2
     66            *
     67            * Unless required by applicable law or agreed to in writing, software 
     68            * distributed under the License is distributed on an "AS IS" BASIS, 
     69            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     70            * See the License for the specific language governing permissions and
     71            * limitations under the License.
     72            *
     73            ******************************************************************************
     74            */
     75          
     76          /* Includes ------------------------------------------------------------------*/
     77          #include "stm8l15x_wwdg.h"
     78          
     79          /** @addtogroup STM8L15x_StdPeriph_Driver
     80            * @{
     81            */
     82          /** @defgroup WWDG 
     83            * @brief WWDG driver modules
     84            * @{
     85            */
     86            
     87          /* Private typedef -----------------------------------------------------------*/
     88          /* Private define ------------------------------------------------------------*/
     89          #define BIT_MASK          ((uint8_t)0x7F)
     90          /* Private macro -------------------------------------------------------------*/
     91          /* Private variables ---------------------------------------------------------*/
     92          /* Private function prototypes -----------------------------------------------*/
     93          /* Private functions ---------------------------------------------------------*/
     94          
     95          /** @defgroup WWDG_Private_Functions
     96            * @{
     97            */
     98            
     99          /** @defgroup WWDG_Group1 Refresh window and Counter configuration functions
    100           *  @brief   Refresh window and Counter configuration functions 
    101           *
    102          @verbatim   
    103           ===============================================================================
    104                        Refresh window and Counter configuration functions
    105           ===============================================================================  
    106          
    107          @endverbatim
    108            * @{
    109            */
    110            
    111          /**
    112            * @brief  Initializes the WWDG peripheral.
    113            *         This function set Window Register = WindowValue, Counter Register
    114            *         according to Counter and \b ENABLE \b WWDG
    115            * @param  Counter : WWDG counter value
    116            * @param  WindowValue : specifies the WWDG Window Register, range is 0x00 to 0x7F.
    117            * @retval None
    118            */

   \                                 In section .far_func.text, align 1
    119          void WWDG_Init(uint8_t Counter, uint8_t WindowValue)
    120          {
    121            /* Check the parameters */
    122            assert_param(IS_WWDG_WINDOW_LIMIT_VALUE(WindowValue));
    123            
    124            WWDG->WR = WWDG_WR_RESET_VALUE;
   \                     WWDG_Init:
   \   000000 35 7F 50D4   MOV       L:0x50d4, #0x7f
    125            WWDG->CR = (uint8_t)(WWDG_CR_WDGA | Counter);
   \   000004 AA 80        OR        A, #0x80
   \   000006 C7 50D3      LD        L:0x50d3, A
    126            WWDG->WR = (uint8_t)((uint8_t)BIT_MASK & (uint8_t) WindowValue);
   \   000009 B6 ..        LD        A, S:?b0
   \   00000B A4 7F        AND       A, #0x7f
   \   00000D C7 50D4      LD        L:0x50d4, A
    127          }
   \   000010 87           RETF
    128          
    129          /**
    130            * @brief  Sets the WWDG window value.
    131            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    132            *         This parameter value must be lower than 0x80.
    133            * @retval None
    134            */

   \                                 In section .far_func.text, align 1
    135          void WWDG_SetWindowValue(uint8_t WindowValue)
    136          {
   \                     WWDG_SetWindowValue:
   \   000000 52 01        SUB       SP, #0x1
   \   000002 B7 ..        LD        S:?b0, A
    137            __IO uint8_t tmpreg = 0;
   \   000004 4F           CLR       A
   \   000005 6B 01        LD        (0x1,SP), A
    138          
    139            /* Check the parameters */
    140            assert_param(IS_WWDG_WINDOW_LIMIT_VALUE(WindowValue));
    141          
    142            /* Set W[6:0] bits according to WindowValue value */
    143            tmpreg |= (uint8_t) (WindowValue & (uint8_t) BIT_MASK);
   \   000007 B6 ..        LD        A, S:?b0
   \   000009 A4 7F        AND       A, #0x7f
   \   00000B 1A 01        OR        A, (0x1,SP)
   \   00000D 6B 01        LD        (0x1,SP), A
    144          
    145            /* Store the new value */
    146            WWDG->WR = tmpreg;
   \   00000F 7B 01        LD        A, (0x1,SP)
   \   000011 C7 50D4      LD        L:0x50d4, A
    147          }
   \   000014 5B 01        ADD       SP, #0x1
   \   000016 87           RETF
    148          
    149          /**
    150            * @brief  Sets the WWDG counter value.
    151            * @param  Counter: specifies the watchdog counter value.
    152            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    153            *   an immediate reset) 
    154            * @retval None
    155            */

   \                                 In section .far_func.text, align 1
    156          void WWDG_SetCounter(uint8_t Counter)
    157          {
    158            /* Check the parameters */
    159            assert_param(IS_WWDG_COUNTER_VALUE(Counter));
    160          
    161            /* Write to T[6:0] bits to configure the counter value, no need to do
    162               a read-modify-write; writing a 0 to WDGA bit does nothing */
    163            WWDG->CR = (uint8_t)(Counter & (uint8_t)BIT_MASK);
   \                     WWDG_SetCounter:
   \   000000 A4 7F        AND       A, #0x7f
   \   000002 C7 50D3      LD        L:0x50d3, A
    164          }
   \   000005 87           RETF
    165          /**
    166            * @}
    167            */
    168          
    169          /** @defgroup WWDG_Group2 WWDG activation function 
    170           *  @brief   WWDG activation function  
    171           *
    172          @verbatim   
    173           ===============================================================================
    174                                    WWDG activation function 
    175           ===============================================================================  
    176          
    177          @endverbatim
    178            * @{
    179            */
    180            
    181          /**
    182            * @brief  Enables WWDG and load the counter value.
    183            * @param  Counter: specifies the watchdog counter value.
    184            *         This parameter must be a number between 0x40 and 0x7F.
    185            * @retval None
    186            */

   \                                 In section .far_func.text, align 1
    187          void WWDG_Enable(uint8_t Counter)
    188          {
    189            /* Check the parameters */
    190            assert_param(IS_WWDG_COUNTER_VALUE(Counter));
    191            WWDG->CR = (uint8_t)(WWDG_CR_WDGA | Counter);
   \                     WWDG_Enable:
   \   000000 AA 80        OR        A, #0x80
   \   000002 C7 50D3      LD        L:0x50d3, A
    192          }
   \   000005 87           RETF
    193          
    194          /**
    195            * @}
    196            */
    197          
    198          /** @defgroup WWDG_Group3 WWDG counter and software reset management 
    199           *  @brief   WWDG counter and software reset management
    200           *
    201          @verbatim   
    202           ===============================================================================
    203                             WWDG counter and software reset management 
    204           ===============================================================================  
    205          
    206          @endverbatim
    207            * @{
    208            */
    209          /**
    210            * @brief Gets the WWDG Counter Value.
    211            *        This value could be used to check if WWDG is in the window, where
    212            *        refresh is allowed.
    213            * @param  None
    214            * @retval WWDG Counter Value
    215            */

   \                                 In section .far_func.text, align 1
    216          uint8_t WWDG_GetCounter(void)
    217          {
    218            return(WWDG->CR);
   \                     WWDG_GetCounter:
   \   000000 C6 50D3      LD        A, L:0x50d3
   \   000003 87           RETF
    219          }
    220          
    221          /**
    222            * @brief Generates immediate WWDG RESET.
    223            * @param  None
    224            * @retval None
    225            */

   \                                 In section .far_func.text, align 1
    226          void WWDG_SWReset(void)
    227          {
    228            WWDG->CR = WWDG_CR_WDGA; /* Activate WWDG, with clearing T6 */
   \                     WWDG_SWReset:
   \   000000 35 80 50D3   MOV       L:0x50d3, #0x80
    229          }
   \   000004 87           RETF
    230          
    231          /**
    232            * @}
    233            */
    234          
    235          /**
    236            * @}
    237            */
    238            
    239          /**
    240            * @}
    241            */
    242          
    243          /**
    244            * @}
    245            */
    246          
    247          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  WWDG_Enable
       4  WWDG_GetCounter
      17  WWDG_Init
       5  WWDG_SWReset
       6  WWDG_SetCounter
      23  WWDG_SetWindowValue

 
 61 bytes in section .far_func.text
 
 61 bytes of CODE memory

Errors: none
Warnings: none
