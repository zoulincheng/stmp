###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:50 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wfe.c #
#    Command line =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wfe.c #
#                     -e -Ol --no_cse --no_unroll --no_inline                 #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model medium --data_model medium -o               #
#                    E:\hwpro-2016\20160627_L\iar\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8L15X_MD -lC             #
#                    E:\hwpro-2016\20160627_L\iar\Debug\List\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\ -I     #
#                    E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I             #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_wfe.lst #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_wfe.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_wfe.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_wfe.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Wait for Event (WFE) peripheral:           
      9            *           - WFE Source configuration and management
     10            *             
     11            *  @verbatim
     12            *               
     13            *          ===================================================================
     14            *                               WFE specific features
     15            *          ===================================================================
     16            *
     17            *           Wait for event mode (WFE) stops the CPU but allows the other peripherals
     18            *           and interrupt controller to continue running.
     19            *           This mode is entered from Run mode by executing a WFE instruction.
     20            *           Peripheral events can be generated by the timers, serial interfaces, 
     21            *           DMA controller, comparators and I/O ports. 
     22            *           These are enabled by using the WFE_WakeUpSourceEventCmd() function.
     23            *           
     24            *           When a peripheral event is enabled, the corresponding interrupts are 
     25            *           not served and you have to clear the corresponding flag status.
     26            *           
     27            *           There are two ways to wake up the CPU from WFE mode:
     28            *            - Interrupts: When an interrupt occurs, the CPU wakes up from WFE mode
     29            *              serves the interrupt then goes back to WFE mode.
     30            *            - Wake up event: when a wake up event occurs, the CPU wakes up and 
     31            *              resumes processing, in this case and to save time and power consumption
     32            *              there is no context save/restore activity.            
     33            *                          
     34            *
     35            *  @endverbatim
     36            *                 
     37            ******************************************************************************
     38            * @attention
     39            *
     40            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     41            *
     42            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     43            * You may not use this file except in compliance with the License.
     44            * You may obtain a copy of the License at:
     45            *
     46            *        http://www.st.com/software_license_agreement_liberty_v2
     47            *
     48            * Unless required by applicable law or agreed to in writing, software 
     49            * distributed under the License is distributed on an "AS IS" BASIS, 
     50            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     51            * See the License for the specific language governing permissions and
     52            * limitations under the License.
     53            *
     54            ******************************************************************************
     55            */
     56          
     57          /* Includes ------------------------------------------------------------------*/
     58          #include "stm8l15x_wfe.h"
     59          
     60          /** @addtogroup STM8L15x_StdPeriph_Driver
     61            * @{
     62            */
     63            
     64          /** @defgroup WFE 
     65            * @brief WFE driver modules
     66            * @{
     67            */
     68             
     69          /* Private typedef -----------------------------------------------------------*/
     70          /* Private define ------------------------------------------------------------*/
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private function prototypes -----------------------------------------------*/
     73          /* Private functions ---------------------------------------------------------*/
     74          /** @defgroup WFE_Private_Functions
     75            * @{
     76            */
     77          
     78          /** @defgroup WFE_Group1 WFE Source configuration and management functions 
     79           *  @brief   WFE Source configuration and management functions  
     80           *
     81          @verbatim   
     82           ===============================================================================
     83                         WFE Source configuration and management functions 
     84           ===============================================================================  
     85          
     86          @endverbatim
     87            * @{
     88            */
     89           
     90          /**
     91            * @brief  Deinitializes the WFE registers to their default reset value.
     92            * @param  None
     93            * @retval None
     94            */

   \                                 In section .far_func.text, align 1
     95          void WFE_DeInit(void)
     96          {
     97            WFE->CR1 = WFE_CRX_RESET_VALUE;
   \                     WFE_DeInit:
   \   000000 35 00 50A6   MOV       L:0x50a6, #0x0
     98            WFE->CR2 = WFE_CRX_RESET_VALUE;
   \   000004 35 00 50A7   MOV       L:0x50a7, #0x0
     99            WFE->CR3 = WFE_CRX_RESET_VALUE;
   \   000008 35 00 50A8   MOV       L:0x50a8, #0x0
    100            WFE->CR4 = WFE_CRX_RESET_VALUE;
   \   00000C 35 00 50A9   MOV       L:0x50a9, #0x0
    101          }
   \   000010 87           RETF
    102          
    103          /**
    104            * @brief  Set the source that can generate the wake-up event.
    105            * @param  WFE_Source: The wake-up event source .
    106            *          This parameter can be one of the following values:
    107            *            @arg WFE_Source_TIM2_EV0: TIM2 Update/Trigger and Break interrupt  
    108            *            @arg WFE_Source_TIM2_EV1: TIM2 Capture/Compare interrupt 
    109            *            @arg WFE_Source_TIM1_EV0: TIM1 Update/Trigger and Break interrupt
    110            *            @arg WFE_Source_TIM1_EV1: TIM1 Capture/Compare interrupt 
    111            *            @arg WFE_Source_EXTI_EV0: I/O port interrupt from Pins 0
    112            *            @arg WFE_Source_EXTI_EV1: I/O port interrupt from Pins 1
    113            *            @arg WFE_Source_EXTI_EV2: I/O port interrupt from Pins 2
    114            *            @arg WFE_Source_EXTI_EV3: I/O port interrupt from Pins 3
    115            *            @arg WFE_Source_EXTI_EV4: I/O port interrupt from Pins 4
    116            *            @arg WFE_Source_EXTI_EV5: I/O port interrupt from Pins 5
    117            *            @arg WFE_Source_EXTI_EV6: I/O port interrupt from Pins 6
    118            *            @arg WFE_Source_EXTI_EV7: I/O port interrupt from Pins 7
    119            *            @arg WFE_Source_EXTI_EVB_G: I/O port interrupt from port B and G
    120            *            @arg WFE_Source_EXTI_EVD_H: I/O port interrupt from Port D and H
    121            *            @arg WFE_Source_EXTI_EVE_F: I/O port interrupt from Port E and F 
    122            *            @arg WFE_Source_ADC1_COMP_EV: ADC1, COMP1 and COMP2 interrupts
    123            *            @arg WFE_Source_TIM3_EV0: TIM3 Update/Trigger and Break interrupt
    124            *            @arg WFE_Source_TIM3_EV1: TIM3 Capture/Compare interrupt
    125            *            @arg WFE_Source_TIM4_EV: TIM4 Update and Trigger interrupt
    126            *            @arg WFE_Source_SPI1_EV: SPI1 Rx and Tx interrupt
    127            *            @arg WFE_Source_I2C1_EV: I2C1 Rx and Tx interrupt
    128            *            @arg WFE_Source_USART1_EV: USART1 Rx and Tx interrupt
    129            *            @arg WFE_Source_DMA1CH01_EV: DMA1 channel 0 and  1 interrupt
    130            *            @arg WFE_Source_DMA1CH23_EV: DMA1 channel 2 and  3  interrupt 
    131            *            @arg WFE_Source_RTC_CSS_EV: RTC or CSS on LSE event
    132            *            @arg WFE_Source_SPI2_EV: SPI2 Rx and Tx interrupt
    133            *            @arg WFE_Source_USART2_EV: USART2 Rx and Tx interrupt
    134            *            @arg WFE_Source_USART3_EV: USART3 Rx and Tx interrupt
    135            *            @arg WFE_Source_TIM5_EV0: TIM5 Update/Trigger and Break interrupt
    136            *            @arg WFE_Source_TIM5_EV1: TIM5 Capture/Compare interrupt                                                        
    137            * @param  NewState : The wake-up new state.
    138            *          This parameter can be: ENABLE or DISABLE.
    139            * @retval None
    140            */

   \                                 In section .far_func.text, align 1
    141          void WFE_WakeUpSourceEventCmd(WFE_Source_TypeDef WFE_Source, FunctionalState NewState)
    142          {
   \                     WFE_WakeUpSourceEventCmd:
   \   000000 9093         LDW       Y, X
   \   000002 B7 ..        LD        S:?b1, A
    143            uint8_t register_index = 0;
   \   000004 3F ..        CLR       S:?b0
    144            /* Check function parameters */
    145            assert_param(IS_WFE_SOURCE(WFE_Source));
    146            assert_param(IS_FUNCTIONAL_STATE(NewState));
    147          
    148            /* The mask is reversed in order to  */
    149            register_index = (uint8_t)((uint16_t)WFE_Source >> 0x08);
   \   000006 93           LDW       X, Y
   \   000007 4F           CLR       A
   \   000008 01           RRWA      X, A
   \   000009 9F           LD        A, XL
   \   00000A B7 ..        LD        S:?b0, A
    150          
    151            if (NewState != DISABLE)
   \   00000C 3D ..        TNZ       S:?b1
   \   00000E 27 33        JREQ      L:??WFE_WakeUpSourceEventCmd_0
    152            {
    153              switch (register_index)
   \   000010 B6 ..        LD        A, S:?b0
   \   000012 4A           DEC       A
   \   000013 27 0A        JREQ      L:??WFE_WakeUpSourceEventCmd_1
   \   000015 4A           DEC       A
   \   000016 27 10        JREQ      L:??WFE_WakeUpSourceEventCmd_2
   \   000018 4A           DEC       A
   \   000019 27 16        JREQ      L:??WFE_WakeUpSourceEventCmd_3
   \   00001B 4A           DEC       A
   \   00001C 27 1C        JREQ      L:??WFE_WakeUpSourceEventCmd_4
   \   00001E 87           RETF
    154              {
    155                case 1:
    156                  WFE->CR1 |= (uint8_t)WFE_Source;
   \                     ??WFE_WakeUpSourceEventCmd_1:
   \   00001F 909F         LD        A, YL
   \   000021 CA 50A6      OR        A, L:0x50a6
   \   000024 C7 50A6      LD        L:0x50a6, A
    157                  break;
   \   000027 87           RETF
    158          
    159                case 2:
    160                  WFE->CR2 |= (uint8_t)WFE_Source;
   \                     ??WFE_WakeUpSourceEventCmd_2:
   \   000028 909F         LD        A, YL
   \   00002A CA 50A7      OR        A, L:0x50a7
   \   00002D C7 50A7      LD        L:0x50a7, A
    161                  break;
   \   000030 87           RETF
    162          
    163                case 3:
    164                  WFE->CR3 |= (uint8_t)WFE_Source;
   \                     ??WFE_WakeUpSourceEventCmd_3:
   \   000031 909F         LD        A, YL
   \   000033 CA 50A8      OR        A, L:0x50a8
   \   000036 C7 50A8      LD        L:0x50a8, A
    165                  break;
   \   000039 87           RETF
    166          
    167                case 4:
    168                  WFE->CR4 |= (uint8_t)WFE_Source;
   \                     ??WFE_WakeUpSourceEventCmd_4:
   \   00003A 909F         LD        A, YL
   \   00003C CA 50A9      OR        A, L:0x50a9
   \   00003F C7 50A9      LD        L:0x50a9, A
    169                  break;
   \   000042 87           RETF
    170          
    171                default:
    172                  break;
    173              }
    174            }
    175            else
    176            {
    177              switch (register_index)
   \                     ??WFE_WakeUpSourceEventCmd_0:
   \   000043 B6 ..        LD        A, S:?b0
   \   000045 4A           DEC       A
   \   000046 27 0A        JREQ      L:??WFE_WakeUpSourceEventCmd_5
   \   000048 4A           DEC       A
   \   000049 27 11        JREQ      L:??WFE_WakeUpSourceEventCmd_6
   \   00004B 4A           DEC       A
   \   00004C 27 18        JREQ      L:??WFE_WakeUpSourceEventCmd_7
   \   00004E 4A           DEC       A
   \   00004F 27 1F        JREQ      L:??WFE_WakeUpSourceEventCmd_8
   \   000051 87           RETF
    178              {
    179                case 1:
    180                  WFE->CR1 &= (uint8_t)(~(uint8_t)WFE_Source);
   \                     ??WFE_WakeUpSourceEventCmd_5:
   \   000052 909F         LD        A, YL
   \   000054 43           CPL       A
   \   000055 C4 50A6      AND       A, L:0x50a6
   \   000058 C7 50A6      LD        L:0x50a6, A
    181                  break;
   \   00005B 87           RETF
    182          
    183                case 2:
    184                  WFE->CR2 &= (uint8_t)(~ (uint8_t)WFE_Source);
   \                     ??WFE_WakeUpSourceEventCmd_6:
   \   00005C 909F         LD        A, YL
   \   00005E 43           CPL       A
   \   00005F C4 50A7      AND       A, L:0x50a7
   \   000062 C7 50A7      LD        L:0x50a7, A
    185                  break;
   \   000065 87           RETF
    186          
    187                case 3:
    188                  WFE->CR3 &= (uint8_t)(~(uint8_t)WFE_Source);
   \                     ??WFE_WakeUpSourceEventCmd_7:
   \   000066 909F         LD        A, YL
   \   000068 43           CPL       A
   \   000069 C4 50A8      AND       A, L:0x50a8
   \   00006C C7 50A8      LD        L:0x50a8, A
    189                  break;
   \   00006F 87           RETF
    190          
    191                case 4:
    192                  WFE->CR4 &= (uint8_t)(~(uint8_t)WFE_Source);
   \                     ??WFE_WakeUpSourceEventCmd_8:
   \   000070 909F         LD        A, YL
   \   000072 43           CPL       A
   \   000073 C4 50A9      AND       A, L:0x50a9
   \   000076 C7 50A9      LD        L:0x50a9, A
    193                  break;
    194          
    195                default:
    196                  break;
    197              }
    198            }
    199          }
   \   000079 87           RETF
    200          
    201          /**
    202            * @brief  Gets the status of the specified source event.
    203            * @param  WFE_Source: The wake-up event source.
    204            *          This parameter can be one of the following values:
    205            *            @arg WFE_Source_TIM2_EV0: TIM2 Update/Trigger and Break interrupt  
    206            *            @arg WFE_Source_TIM2_EV1: TIM2 Capture/Compare interrupt 
    207            *            @arg WFE_Source_TIM1_EV0: TIM1 Update/Trigger and Break interrupt
    208            *            @arg WFE_Source_TIM1_EV1: TIM1 Capture/Compare interrupt 
    209            *            @arg WFE_Source_EXTI_EV0: I/O port interrupt from Pins 0
    210            *            @arg WFE_Source_EXTI_EV1: I/O port interrupt from Pins 1
    211            *            @arg WFE_Source_EXTI_EV2: I/O port interrupt from Pins 2
    212            *            @arg WFE_Source_EXTI_EV3: I/O port interrupt from Pins 3
    213            *            @arg WFE_Source_EXTI_EV4: I/O port interrupt from Pins 4
    214            *            @arg WFE_Source_EXTI_EV5: I/O port interrupt from Pins 5
    215            *            @arg WFE_Source_EXTI_EV6: I/O port interrupt from Pins 6
    216            *            @arg WFE_Source_EXTI_EV7: I/O port interrupt from Pins 7
    217            *            @arg WFE_Source_EXTI_EVB_G: I/O port interrupt from port B and G
    218            *            @arg WFE_Source_EXTI_EVD_H: I/O port interrupt from Port D and H
    219            *            @arg WFE_Source_EXTI_EVE_F: I/O port interrupt from Port E and F 
    220            *            @arg WFE_Source_ADC1_COMP_EV: ADC1, COMP1 and COMP2 interrupts
    221            *            @arg WFE_Source_TIM3_EV0: TIM3 Update/Trigger and Break interrupt
    222            *            @arg WFE_Source_TIM3_EV1: TIM3 Capture/Compare interrupt
    223            *            @arg WFE_Source_TIM4_EV: TIM4 Update and Trigger interrupt
    224            *            @arg WFE_Source_SPI1_EV: SPI1 Rx and Tx interrupt
    225            *            @arg WFE_Source_I2C1_EV: I2C1 Rx and Tx interrupt
    226            *            @arg WFE_Source_USART1_EV: USART1 Rx and Tx interrupt
    227            *            @arg WFE_Source_DMA1CH01_EV: DMA1 channel 0 and  1 interrupt
    228            *            @arg WFE_Source_DMA1CH23_EV: DMA1 channel 2 and  3  interrupt 
    229            *            @arg WFE_Source_RTC_CSS_EV: RTC or CSS on LSE event
    230            *            @arg WFE_Source_SPI2_EV: SPI2 Rx and Tx interrupt
    231            *            @arg WFE_Source_USART2_EV: USART2 Rx and Tx interrupt
    232            *            @arg WFE_Source_USART3_EV: USART3 Rx and Tx interrupt
    233            *            @arg WFE_Source_TIM5_EV0: TIM5 Update/Trigger and Break interrupt
    234            *            @arg WFE_Source_TIM5_EV1: TIM5 Capture/Compare interrupt  
    235            * @retval Source Event state, ENABLE or DISABLE
    236            */

   \                                 In section .far_func.text, align 1
    237          FunctionalState WFE_GetWakeUpSourceEventStatus(WFE_Source_TypeDef WFE_Source)
    238          {
   \                     WFE_GetWakeUpSourceEventStatus:
   \   000000 BF ..        LDW       S:?w1, X
    239            FunctionalState status = DISABLE;
   \   000002 4F           CLR       A
    240            /* Check function parameters */
    241            assert_param(IS_WFE_SOURCE(WFE_Source));
    242          
    243            switch (WFE_Source)
   \   000003 BE ..        LDW       X, S:?w1
   \   000005 90AE ....    LDW       Y, #??switch_table_0
   \   000009 8D ......    CALLF     L:?switch16vlt_0x_x_0y
   \   00000D FC           JP        (X)
    244            {
    245              case WFE_Source_TIM2_EV0:
    246              case WFE_Source_TIM2_EV1:
    247              case WFE_Source_TIM1_EV0:
    248              case WFE_Source_TIM1_EV1:
    249              case WFE_Source_EXTI_EV0:
    250              case WFE_Source_EXTI_EV1:
    251              case WFE_Source_EXTI_EV2:
    252              case WFE_Source_EXTI_EV3:
    253          
    254                if ((WFE->CR1 & (uint8_t)WFE_Source) != (uint8_t)0x00)
   \                     ??WFE_GetWakeUpSourceEventStatus_0:
   \   00000E B6 ..        LD        A, S:?b3
   \   000010 C4 50A6      AND       A, L:0x50a6
   \   000013 A1 00        CP        A, #0x0
   \   000015 27 03        JREQ      L:??WFE_GetWakeUpSourceEventStatus_1
    255                {
    256                  /* The wake-up event source is enabled*/
    257                  status = ENABLE;
   \   000017 A6 01        LD        A, #0x1
   \   000019 87           RETF
    258                }
    259                else
    260                {
    261                  /* The wake-up event source is disabled*/
    262                  status = DISABLE;
   \                     ??WFE_GetWakeUpSourceEventStatus_1:
   \   00001A 4F           CLR       A
    263                }
    264                break;
   \   00001B 87           RETF
    265          
    266              case WFE_Source_EXTI_EV4:
    267              case WFE_Source_EXTI_EV5:
    268              case WFE_Source_EXTI_EV6:
    269              case WFE_Source_EXTI_EV7:
    270              case WFE_Source_EXTI_EVB_G:
    271              case WFE_Source_EXTI_EVD_H:
    272              case WFE_Source_EXTI_EVE_F:
    273              case WFE_Source_ADC1_COMP_EV:
    274          
    275                if ((WFE->CR2 & (uint8_t)WFE_Source) != (uint8_t)0x00)
   \                     ??WFE_GetWakeUpSourceEventStatus_2:
   \   00001C B6 ..        LD        A, S:?b3
   \   00001E C4 50A7      AND       A, L:0x50a7
   \   000021 A1 00        CP        A, #0x0
   \   000023 27 03        JREQ      L:??WFE_GetWakeUpSourceEventStatus_3
    276                {
    277                  /* The wake-up event source is enabled*/
    278                  status = ENABLE;
   \   000025 A6 01        LD        A, #0x1
   \   000027 87           RETF
    279                }
    280                else
    281                {
    282                  /* The wake-up event source is disabled*/
    283                  status = DISABLE;
   \                     ??WFE_GetWakeUpSourceEventStatus_3:
   \   000028 4F           CLR       A
    284                }
    285                break;
   \   000029 87           RETF
    286              case WFE_Source_TIM3_EV0:
    287              case WFE_Source_TIM3_EV1:
    288              case WFE_Source_TIM4_EV:
    289              case WFE_Source_SPI1_EV:
    290              case WFE_Source_I2C1_EV:
    291              case WFE_Source_USART1_EV:
    292              case WFE_Source_DMA1CH01_EV:
    293              case WFE_Source_DMA1CH23_EV:
    294          
    295                if ((WFE->CR3 & (uint8_t)WFE_Source) != (uint8_t)0x00)
   \                     ??WFE_GetWakeUpSourceEventStatus_4:
   \   00002A B6 ..        LD        A, S:?b3
   \   00002C C4 50A8      AND       A, L:0x50a8
   \   00002F A1 00        CP        A, #0x0
   \   000031 27 03        JREQ      L:??WFE_GetWakeUpSourceEventStatus_5
    296                {
    297                  /* The wake-up event source is enabled*/
    298                  status = ENABLE;
   \   000033 A6 01        LD        A, #0x1
   \   000035 87           RETF
    299                }
    300                else
    301                {
    302                  /* The wake-up event source is disabled*/
    303                  status = DISABLE;
   \                     ??WFE_GetWakeUpSourceEventStatus_5:
   \   000036 4F           CLR       A
    304                }
    305                break;
   \   000037 87           RETF
    306          
    307              case WFE_Source_TIM5_EV0:
    308              case WFE_Source_TIM5_EV1:
    309              case WFE_Source_AES_EV:
    310              case WFE_Source_SPI2_EV:
    311              case WFE_Source_USART2_EV:
    312              case WFE_Source_USART3_EV:
    313              case WFE_Source_RTC_CSS_EV:
    314          
    315                if ((WFE->CR4 & (uint8_t)WFE_Source) != (uint8_t)0x00)
   \                     ??WFE_GetWakeUpSourceEventStatus_6:
   \   000038 B6 ..        LD        A, S:?b3
   \   00003A C4 50A9      AND       A, L:0x50a9
   \   00003D A1 00        CP        A, #0x0
   \   00003F 27 03        JREQ      L:??WFE_GetWakeUpSourceEventStatus_7
    316                {
    317                  /* The wake-up event source is enabled*/
    318                  status = ENABLE;
   \   000041 A6 01        LD        A, #0x1
   \   000043 87           RETF
    319                }
    320                else
    321                {
    322                  /* The wake-up event source is disabled*/
    323                  status = DISABLE;
   \                     ??WFE_GetWakeUpSourceEventStatus_7:
   \   000044 4F           CLR       A
    324                }
    325                break;
    326              default:
    327                break;
    328            }
    329            return status;
   \                     ??WFE_GetWakeUpSourceEventStatus_8:
   \   000045 87           RETF
    330          }

   \                                 In section .near_func.text, align 1
   \                     ??switch_table_0:
   \   000000 0101         DC16      0x101
   \   000002 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000004 0102         DC16      0x102
   \   000006 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000008 0104         DC16      0x104
   \   00000A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   00000C 0108         DC16      0x108
   \   00000E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000010 0110         DC16      0x110
   \   000012 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000014 0120         DC16      0x120
   \   000016 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000018 0140         DC16      0x140
   \   00001A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   00001C 0180         DC16      0x180
   \   00001E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_0)
   \   000020 0201         DC16      0x201
   \   000022 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000024 0202         DC16      0x202
   \   000026 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000028 0204         DC16      0x204
   \   00002A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   00002C 0208         DC16      0x208
   \   00002E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000030 0210         DC16      0x210
   \   000032 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000034 0220         DC16      0x220
   \   000036 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000038 0240         DC16      0x240
   \   00003A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   00003C 0280         DC16      0x280
   \   00003E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_2)
   \   000040 0301         DC16      0x301
   \   000042 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000044 0302         DC16      0x302
   \   000046 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000048 0304         DC16      0x304
   \   00004A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   00004C 0308         DC16      0x308
   \   00004E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000050 0310         DC16      0x310
   \   000052 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000054 0320         DC16      0x320
   \   000056 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000058 0340         DC16      0x340
   \   00005A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   00005C 0380         DC16      0x380
   \   00005E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_4)
   \   000060 0401         DC16      0x401
   \   000062 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   000064 0402         DC16      0x402
   \   000066 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   000068 0404         DC16      0x404
   \   00006A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   00006C 0408         DC16      0x408
   \   00006E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   000070 0410         DC16      0x410
   \   000072 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   000074 0420         DC16      0x420
   \   000076 ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   000078 0440         DC16      0x440
   \   00007A ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_6)
   \   00007C 0000         DC16      0x0
   \   00007E ....         DC16      LWRD(??WFE_GetWakeUpSourceEventStatus_8)
    331          
    332          /**
    333            * @}
    334            */
    335          
    336          /**
    337            * @}
    338            */
    339            
    340          /**
    341            * @}
    342            */
    343          
    344          /**
    345            * @}
    346            */
    347          
    348          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  ??switch_table_0
      17  WFE_DeInit
      70  WFE_GetWakeUpSourceEventStatus
     122  WFE_WakeUpSourceEventCmd

 
 209 bytes in section .far_func.text
 128 bytes in section .near_func.text
 
 337 bytes of CODE memory

Errors: none
Warnings: none
