###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:42:00 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\app\chain.c                     #
#    Command line =  E:\hwpro-2016\20160627_L\app\chain.c -e -Ol --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o E:\hwpro-2016\20160627_L\iar\Debu #
#                    g\Obj\ --dlib_config "C:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D  #
#                    STM8L15X_MD -lC E:\hwpro-2016\20160627_L\iar\Debug\List\ #
#                     -I E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\    #
#                    -I E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I          #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\chain.lst        #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\chain.o           #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\app\chain.c
      1          #include "stm8l15x.h"
      2          #include "basictype.h"

  typedef unsigned char 	  uint8_t;
                        	  ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",8  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned short	  uint16_t;
                        	  ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",10  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned char     u8;
                            ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",16  Warning[Pe301]: typedef
          name has already been declared (with same type)

  typedef unsigned short    u16;
                            ^
"E:\hwpro-2016\20160627_L\user\inc\basictype.h",17  Warning[Pe301]: typedef
          name has already been declared (with same type)
      3          #include "chain.h"
      4          

   \                                 In section .near.bss, align 1
      5          NODE *head = NULL;
   \                     head:
   \   000000              DS8 2
      6          

   \                                 In section .far_func.text, align 1
      7          u8 start_timerEx( NODE* p, unsigned int timestamp_value, EVENT task_value )
      8          {
   \                     start_timerEx:
   \   000000 8D ......    CALLF     L:?push_w4
      9          	NODE* newTimer = NULL;
   \   000004 3F ..        CLR       S:?b9
   \   000006 3F ..        CLR       S:?b8
     10          	if(timestamp_value == 0)
   \   000008 905D         TNZW      Y
   \   00000A 26 08        JRNE      L:??start_timerEx_0
     11          	{
     12          		set_event(task_value);//TODO
                 		^
Warning[Pe223]: function "set_event" declared implicitly
   \   00000C BE ..        LDW       X, S:?w0
   \   00000E 8D ......    CALLF     set_event
   \   000012 20 06        JRA       L:??start_timerEx_1
     13          	}
     14          	else
     15          	{
     16          		newTimer = add_node( p, timestamp_value, task_value );
   \                     ??start_timerEx_0:
   \   000014 8D ......    CALLF     add_node
   \   000018 BF ..        LDW       S:?w4, X
     17          	}
     18          	return ( (newTimer != NULL) ? SUCCESS : ERROR );
   \                     ??start_timerEx_1:
   \   00001A BE ..        LDW       X, S:?w4
   \   00001C 5D           TNZW      X
   \   00001D 27 06        JREQ      L:??start_timerEx_2
   \   00001F A6 01        LD        A, #0x1
   \   000021 AC ......    JPF       L:?epilogue_w4
   \                     ??start_timerEx_2:
   \   000025 4F           CLR       A
   \   000026 AC ......    JPF       L:?epilogue_w4
     19          }
     20          

   \                                 In section .far_func.text, align 1
     21          u8 delete_timerEx( NODE* p )
     22          {
   \                     delete_timerEx:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 BF ..        LDW       S:?w4, X
     23          	u8 state;
     24          	RTC_WakeUpCmd(DISABLE);
                 	^
Warning[Pe223]: function "RTC_WakeUpCmd" declared implicitly
   \   000006 5F           CLRW      X
   \   000007 8D ......    CALLF     RTC_WakeUpCmd
     25          	//Is_rtc_settable = TRUE;
     26          	state = delete_node( p );
   \   00000B BE ..        LDW       X, S:?w4
   \   00000D 8D ......    CALLF     delete_node
     27          	return ( state );
   \   000011 AC ......    JPF       L:?epilogue_w4
     28          }
     29          

   \                                 In section .far_func.text, align 1
     30          NODE* add_node(NODE* p, unsigned int timestamp_value, EVENT task_value)
     31          {
   \                     add_node:
   \   000000 BF ..        LDW       S:?w3, X
     32          	NODE* pNode;
     33          	if(p == NULL )
   \   000002 BE ..        LDW       X, S:?w3
   \   000004 5D           TNZW      X
   \   000005 26 02        JRNE      L:??add_node_0
     34          	return NULL;
   \   000007 5F           CLRW      X
   \   000008 87           RETF
     35          	if(head == NULL)
   \                     ??add_node_0:
   \   000009 CE ....      LDW       X, L:head
   \   00000C 5D           TNZW      X
   \   00000D 26 22        JRNE      L:??add_node_1
     36          	{
     37          		head = p;
   \   00000F BE ..        LDW       X, S:?w3
   \   000011 CF ....      LDW       L:head, X
     38          		head->timestamp = timestamp_value;
   \   000014 93           LDW       X, Y
   \   000015 72CF ....    LDW       [L:head.w], X
     39          		head->task = task_value;
   \   000019 CE ....      LDW       X, L:head
   \   00001C 5C           INCW      X
   \   00001D 5C           INCW      X
   \   00001E 9093         LDW       Y, X
   \   000020 BE ..        LDW       X, S:?w0
   \   000022 90FF         LDW       (Y), X
     40          		head->node_next = NULL;
   \   000024 CE ....      LDW       X, L:head
   \   000027 1C 0004      ADDW      X, #0x4
   \   00002A 9093         LDW       Y, X
   \   00002C 5F           CLRW      X
   \   00002D 90FF         LDW       (Y), X
   \   00002F 20 5F        JRA       L:??add_node_2
     41          	}
     42          	else
     43          	{
     44          		pNode = head;
   \                     ??add_node_1:
   \   000031 CE ....      LDW       X, L:head
   \   000034 BF ..        LDW       S:?w1, X
   \   000036 20 08        JRA       L:??add_node_3
     45          		while( pNode->node_next != NULL || ( pNode == p ) )
     46          		{
     47          			if (pNode == p)
     48          			{
     49          				p->task = task_value;
     50          				p->timestamp = timestamp_value;
     51          				return pNode;
     52          			}
     53          			pNode = pNode->node_next;
   \                     ??add_node_4:
   \   000038 BE ..        LDW       X, S:?w1
   \   00003A 1C 0004      ADDW      X, #0x4
   \   00003D FE           LDW       X, (X)
   \   00003E BF ..        LDW       S:?w1, X
   \                     ??add_node_3:
   \   000040 BE ..        LDW       X, S:?w1
   \   000042 1C 0004      ADDW      X, #0x4
   \   000045 FE           LDW       X, (X)
   \   000046 5D           TNZW      X
   \   000047 26 06        JRNE      L:??add_node_5
   \   000049 BE ..        LDW       X, S:?w1
   \   00004B B3 ..        CPW       X, S:?w3
   \   00004D 26 18        JRNE      L:??add_node_6
   \                     ??add_node_5:
   \   00004F BE ..        LDW       X, S:?w1
   \   000051 B3 ..        CPW       X, S:?w3
   \   000053 26 E3        JRNE      L:??add_node_4
   \   000055 BE ..        LDW       X, S:?w3
   \   000057 1C 0002      ADDW      X, #0x2
   \   00005A BF ..        LDW       S:?w2, X
   \   00005C BE ..        LDW       X, S:?w0
   \   00005E 92CF ..      LDW       [S:?w2.w], X
   \   000061 91CF ..      LDW       [S:?w3.w], Y
   \   000064 BE ..        LDW       X, S:?w1
   \   000066 87           RETF
     54          		}
     55          		pNode->node_next = p;
   \                     ??add_node_6:
   \   000067 BE ..        LDW       X, S:?w1
   \   000069 1C 0004      ADDW      X, #0x4
   \   00006C BF ..        LDW       S:?w1, X
   \   00006E BE ..        LDW       X, S:?w3
   \   000070 92CF ..      LDW       [S:?w1.w], X
     56          		pNode = p;
   \   000073 8D ......    CALLF     L:?mov_w1_w3
     57          		pNode->task = task_value;
   \   000077 BE ..        LDW       X, S:?w1
   \   000079 1C 0002      ADDW      X, #0x2
   \   00007C BF ..        LDW       S:?w2, X
   \   00007E BE ..        LDW       X, S:?w0
   \   000080 92CF ..      LDW       [S:?w2.w], X
     58          		pNode->timestamp = timestamp_value;
   \   000083 91CF ..      LDW       [S:?w1.w], Y
     59          		pNode->node_next = NULL;
   \   000086 BE ..        LDW       X, S:?w1
   \   000088 1C 0004      ADDW      X, #0x4
   \   00008B 9093         LDW       Y, X
   \   00008D 5F           CLRW      X
   \   00008E 90FF         LDW       (Y), X
     60          	}
     61          	return pNode;
   \                     ??add_node_2:
   \   000090 BE ..        LDW       X, S:?w1
   \   000092 87           RETF
     62          }
     63          

   \                                 In section .far_func.text, align 1
     64          ErrorStatus delete_node(NODE* pDelete)
     65          {
   \                     delete_node:
   \   000000 BF ..        LDW       S:?w0, X
     66          	NODE* pNode_front;
     67          	NODE* pNode_present;
     68          
     69          	if(head == NULL || pDelete == NULL)
   \   000002 CE ....      LDW       X, L:head
   \   000005 5D           TNZW      X
   \   000006 27 05        JREQ      L:??delete_node_0
   \   000008 BE ..        LDW       X, S:?w0
   \   00000A 5D           TNZW      X
   \   00000B 26 02        JRNE      L:??delete_node_1
     70          	return ERROR;
   \                     ??delete_node_0:
   \   00000D 4F           CLR       A
   \   00000E 87           RETF
     71          
     72          	pNode_present = head;
   \                     ??delete_node_1:
   \   00000F CE ....      LDW       X, L:head
   \   000012 9093         LDW       Y, X
     73          	pNode_front = pNode_present;
   \   000014 90BF ..      LDW       S:?w1, Y
   \   000017 20 0A        JRA       L:??delete_node_2
     74          	while((pNode_present != pDelete) && (pNode_present != NULL))
     75          	{
     76          		pNode_front = pNode_present;
   \                     ??delete_node_3:
   \   000019 90BF ..      LDW       S:?w1, Y
     77          		pNode_present = pNode_present->node_next;
   \   00001C 93           LDW       X, Y
   \   00001D 1C 0004      ADDW      X, #0x4
   \   000020 FE           LDW       X, (X)
   \   000021 9093         LDW       Y, X
     78          	}
   \                     ??delete_node_2:
   \   000023 90B3 ..      CPW       Y, S:?w0
   \   000026 27 04        JREQ      L:??delete_node_4
   \   000028 905D         TNZW      Y
   \   00002A 26 ED        JRNE      L:??delete_node_3
     79          	if(pNode_present == pDelete)
   \                     ??delete_node_4:
   \   00002C 90B3 ..      CPW       Y, S:?w0
   \   00002F 26 30        JRNE      L:??delete_node_5
     80          	{
     81          		if(pDelete == head)
   \   000031 BE ..        LDW       X, S:?w0
   \   000033 C3 ....      CPW       X, L:head
   \   000036 26 0C        JRNE      L:??delete_node_6
     82          		{
     83          			head = head->node_next;
   \   000038 CE ....      LDW       X, L:head
   \   00003B 1C 0004      ADDW      X, #0x4
   \   00003E FE           LDW       X, (X)
   \   00003F CF ....      LDW       L:head, X
   \   000042 20 13        JRA       L:??delete_node_7
     84          		}
     85          		else
     86          		{
     87          			pNode_front->node_next = pNode_present->node_next;
   \                     ??delete_node_6:
   \   000044 93           LDW       X, Y
   \   000045 1C 0004      ADDW      X, #0x4
   \   000048 FE           LDW       X, (X)
   \   000049 BF ..        LDW       S:?w0, X
   \   00004B BE ..        LDW       X, S:?w1
   \   00004D 1C 0004      ADDW      X, #0x4
   \   000050 BF ..        LDW       S:?w1, X
   \   000052 BE ..        LDW       X, S:?w0
   \   000054 92CF ..      LDW       [S:?w1.w], X
     88          		}
     89          		pNode_present ->node_next = NULL;
   \                     ??delete_node_7:
   \   000057 93           LDW       X, Y
   \   000058 1C 0004      ADDW      X, #0x4
   \   00005B 905F         CLRW      Y
   \   00005D FF           LDW       (X), Y
     90          		return SUCCESS;
   \   00005E A6 01        LD        A, #0x1
   \   000060 87           RETF
     91          	}
     92          	return ERROR;
   \                     ??delete_node_5:
   \   000061 4F           CLR       A
   \   000062 87           RETF
     93          }
     94          

   \                                 In section .far_func.text, align 1
     95          void delete_all_node(void)
     96          {
     97          	//disableInterrupts();
     98          	head = NULL;
   \                     delete_all_node:
   \   000000 5F           CLRW      X
   \   000001 CF ....      LDW       L:head, X
     99          	//enableInterrupts();
    100          
    101          }
   \   000004 87           RETF
    102          

   \                                 In section .far_func.text, align 1
    103          unsigned char insert_node(NODE* pInsert, unsigned int timestamp_value, EVENT task_value, unsigned char place)
    104          {
   \                     insert_node:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w7
   \   000008 3B ....      PUSH      S:?b12
   \   00000B 8D ......    CALLF     L:?push_w0
   \   00000F BF ..        LDW       S:?w4, X
   \   000011 90BF ..      LDW       S:?w7, Y
   \   000014 B7 ..        LD        S:?b12, A
    105          	NODE* pNode_front;
    106          	NODE* pNode_present;
    107          	unsigned int i = 0;
   \   000016 3F ..        CLR       S:?b11
   \   000018 3F ..        CLR       S:?b10
    108          	if(pInsert == NULL )
   \   00001A BE ..        LDW       X, S:?w4
   \   00001C 5D           TNZW      X
   \   00001D 26 04        JRNE      L:??insert_node_0
    109          		return ERROR;
   \   00001F 4F           CLR       A
   \   000020 CC ....      JP        L:??insert_node_1
    110          	if((pNode_present = find_node(pInsert, F_POINT, 0)) != NULL)
   \                     ??insert_node_0:
   \   000023 905F         CLRW      Y
   \   000025 A6 02        LD        A, #0x2
   \   000027 BE ..        LDW       X, S:?w4
   \   000029 8D ......    CALLF     find_node
   \   00002D BF ..        LDW       S:?w0, X
   \   00002F 5D           TNZW      X
   \   000030 27 06        JREQ      L:??insert_node_2
    111          	{
    112          		delete_node(pNode_present);
   \   000032 BE ..        LDW       X, S:?w0
   \   000034 8D ......    CALLF     delete_node
    113          	}
    114          
    115          	if(head == NULL)
   \                     ??insert_node_2:
   \   000038 CE ....      LDW       X, L:head
   \   00003B 5D           TNZW      X
   \   00003C 26 11        JRNE      L:??insert_node_3
    116          	{
    117          		add_node(pInsert, timestamp_value, task_value);
   \   00003E 1E 01        LDW       X, (0x1,SP)
   \   000040 BF ..        LDW       S:?w0, X
   \   000042 90BE ..      LDW       Y, S:?w7
   \   000045 BE ..        LDW       X, S:?w4
   \   000047 8D ......    CALLF     add_node
    118          		return i;
   \   00004B B6 ..        LD        A, S:?b11
   \   00004D 20 64        JRA       L:??insert_node_1
    119          	}
    120          
    121          	pNode_present = head;
   \                     ??insert_node_3:
   \   00004F CE ....      LDW       X, L:head
   \   000052 BF ..        LDW       S:?w0, X
    122          	pNode_front = pNode_present;
   \   000054 90BE ..      LDW       Y, S:?w0
    123          	for(i = 0; i < place; i++)
   \   000057 3F ..        CLR       S:?b11
   \   000059 3F ..        CLR       S:?b10
   \   00005B 20 05        JRA       L:??insert_node_4
   \                     ??insert_node_5:
   \   00005D BE ..        LDW       X, S:?w5
   \   00005F 5C           INCW      X
   \   000060 BF ..        LDW       S:?w5, X
   \                     ??insert_node_4:
   \   000062 5F           CLRW      X
   \   000063 41           EXG       A, XL
   \   000064 B6 ..        LD        A, S:?b12
   \   000066 41           EXG       A, XL
   \   000067 BF ..        LDW       S:?w1, X
   \   000069 BE ..        LDW       X, S:?w5
   \   00006B B3 ..        CPW       X, S:?w1
   \   00006D 24 10        JRNC      L:??insert_node_6
    124          	{
    125          		pNode_front = pNode_present;
   \   00006F 90BE ..      LDW       Y, S:?w0
    126          		pNode_present = pNode_present->node_next;
   \   000072 BE ..        LDW       X, S:?w0
   \   000074 1C 0004      ADDW      X, #0x4
   \   000077 FE           LDW       X, (X)
   \   000078 BF ..        LDW       S:?w0, X
    127          		if(pNode_present == NULL)
   \   00007A BE ..        LDW       X, S:?w0
   \   00007C 5D           TNZW      X
   \   00007D 26 DE        JRNE      L:??insert_node_5
    128          		{
    129          			break;
    130          		}
    131          	}
    132          	pInsert->node_next = pNode_present;
   \                     ??insert_node_6:
   \   00007F BE ..        LDW       X, S:?w4
   \   000081 1C 0004      ADDW      X, #0x4
   \   000084 BF ..        LDW       S:?w1, X
   \   000086 BE ..        LDW       X, S:?w0
   \   000088 92CF ..      LDW       [S:?w1.w], X
    133          	pInsert->timestamp = timestamp_value;
   \   00008B BE ..        LDW       X, S:?w7
   \   00008D 92CF ..      LDW       [S:?w4.w], X
    134          	pInsert->task = task_value;
   \   000090 BE ..        LDW       X, S:?w4
   \   000092 1C 0002      ADDW      X, #0x2
   \   000095 BF ..        LDW       S:?w0, X
   \   000097 1E 01        LDW       X, (0x1,SP)
   \   000099 92CF ..      LDW       [S:?w0.w], X
    135          	if(place != 0)
   \   00009C 3D ..        TNZ       S:?b12
   \   00009E 27 0C        JREQ      L:??insert_node_7
    136          	{
    137          		pNode_front->node_next = pInsert;
   \   0000A0 93           LDW       X, Y
   \   0000A1 1C 0004      ADDW      X, #0x4
   \   0000A4 9093         LDW       Y, X
   \   0000A6 BE ..        LDW       X, S:?w4
   \   0000A8 90FF         LDW       (Y), X
   \   0000AA 20 05        JRA       L:??insert_node_8
    138          	}
    139          	else
    140          	{
    141          		head = pInsert;
   \                     ??insert_node_7:
   \   0000AC BE ..        LDW       X, S:?w4
   \   0000AE CF ....      LDW       L:head, X
    142          	}
    143          	return i;
   \                     ??insert_node_8:
   \   0000B1 B6 ..        LD        A, S:?b11
   \                     ??insert_node_1:
   \   0000B3 5B 02        ADD       SP, #0x2
   \   0000B5 32 ....      POP       S:?b12
   \   0000B8 8D ......    CALLF     L:?pop_w7
   \   0000BC AC ......    JPF       L:?epilogue_l2
    144          }
    145          

   \                                 In section .far_func.text, align 1
    146          NODE* find_node(NODE* pFind, FINDDATA type, unsigned int value)
    147          {
   \                     find_node:
   \   000000 BF ..        LDW       S:?w3, X
   \   000002 B7 ..        LD        S:?b4, A
   \   000004 90BF ..      LDW       S:?w1, Y
    148          	NODE* pNode;
    149          	if(pFind == NULL )
   \   000007 BE ..        LDW       X, S:?w3
   \   000009 5D           TNZW      X
   \   00000A 26 02        JRNE      L:??find_node_0
    150          		return NULL;
   \   00000C 5F           CLRW      X
   \   00000D 87           RETF
    151          	pNode = head;
   \                     ??find_node_0:
   \   00000E CE ....      LDW       X, L:head
   \   000011 20 04        JRA       L:??find_node_1
    152          	while(pNode != NULL)
    153          	{
    154          		switch (type)
    155          		{
    156          			case F_TIMESTAMP:
    157          				if(pNode->timestamp == value)
    158          				{
    159          					return pNode;
    160          				}
    161          				break;
    162          
    163          			case F_TASK:
    164          				if(pNode->task == value)
    165          				{
    166          					return pNode;
    167          				}
    168          				break;
    169          
    170          			case F_POINT:
    171          				if(pNode == pFind)
    172          				{
    173          					return pNode;
    174          				}
    175          				break;
    176          			default:
    177          				break;
    178          		}
    179          		pNode = pNode->node_next;
   \                     ??find_node_2:
   \   000013 1C 0004      ADDW      X, #0x4
   \   000016 FE           LDW       X, (X)
   \                     ??find_node_1:
   \   000017 5D           TNZW      X
   \   000018 27 2B        JREQ      L:??find_node_3
   \   00001A B6 ..        LD        A, S:?b4
   \   00001C 4D           TNZ       A
   \   00001D 27 08        JREQ      L:??find_node_4
   \   00001F 4A           DEC       A
   \   000020 27 0C        JREQ      L:??find_node_5
   \   000022 4A           DEC       A
   \   000023 27 1B        JREQ      L:??find_node_6
   \   000025 20 EC        JRA       L:??find_node_2
   \                     ??find_node_4:
   \   000027 90BE ..      LDW       Y, S:?w1
   \   00002A F3           CPW       Y, (X)
   \   00002B 26 E6        JRNE      L:??find_node_2
   \   00002D 87           RETF
   \                     ??find_node_5:
   \   00002E 9093         LDW       Y, X
   \   000030 72A9 0002    ADDW      Y, #0x2
   \   000034 90BF ..      LDW       S:?w0, Y
   \   000037 90BE ..      LDW       Y, S:?w1
   \   00003A 91C3 ..      CPW       Y, [S:?w0.w]
   \   00003D 26 D4        JRNE      L:??find_node_2
   \   00003F 87           RETF
   \                     ??find_node_6:
   \   000040 B3 ..        CPW       X, S:?w3
   \   000042 26 CF        JRNE      L:??find_node_2
   \   000044 87           RETF
    180          	}
    181          	return NULL;
   \                     ??find_node_3:
   \   000045 5F           CLRW      X
   \   000046 87           RETF
    182          }
    183          
    184          
    185          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
     147  add_node
       5  delete_all_node
      99  delete_node
      21  delete_timerEx
      71  find_node
       2  head
     192  insert_node
      42  start_timerEx

 
 577 bytes in section .far_func.text
   2 bytes in section .near.bss
 
 577 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: 6
