###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:48 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_iwdg. #
#                    c                                                        #
#    Command line =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_iwdg. #
#                    c -e -Ol --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model medium --data_model medium -o               #
#                    E:\hwpro-2016\20160627_L\iar\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8L15X_MD -lC             #
#                    E:\hwpro-2016\20160627_L\iar\Debug\List\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\ -I     #
#                    E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I             #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_iwdg.ls #
#                    t                                                        #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_iwdg.o   #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_iwdg.c
      1          /**
      2            ********************************************************************************
      3            * @file    stm8l15x_iwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Independent watchdog (IWDG) peripheral:           
      9            *           - Prescaler and Counter configuration
     10            *           - IWDG activation
     11            *
     12            *  @verbatim  
     13            *  
     14            *          ===================================================================
     15            *                                     IWDG features
     16            *          ===================================================================
     17            *    
     18            *          The IWDG can be started by either software or hardware (configurable
     19            *          through option byte).
     20            *            
     21            *          The IWDG is clocked by its own dedicated low-speed clock (LSI) and
     22            *          thus stays active even if the main clock fails.
     23            *          Once the IWDG is started, the LSI is forced ON and cannot be disabled
     24            *          (LSI cannot be disabled too), and the counter starts counting down from 
     25            *          the reset value of 0xFF. When it reaches the end of count value (0x00)
     26            *          a system reset is generated.
     27            *          The IWDG counter should be reloaded at regular intervals to prevent
     28            *          an MCU reset.
     29            *                           
     30            *          The IWDG is implemented in the VDD voltage domain that is still functional
     31            *          in Halt and Active Halt mode depending on the configuration of the IWDG_HALT
     32            *          option byte. (IWDG reset can wake-up from Halt).          
     33            *            
     34            *          IWDGF flag in RST_SR register can be used to inform when a IWDG
     35            *          reset occurs.
     36            *            
     37            *          Min-max timeout value @38KHz (LSI): 0.10 ms / ~1.724s
     38            *          The IWDG timeout may vary due to LSI frequency dispersion. STM8L15x
     39            *          devices provide the capability to measure the LSI frequency (LSI clock
     40            *          connected internally to TIM2 CH1 input capture). The measured value
     41            *          can be used to have an IWDG timeout with an acceptable accuracy. 
     42            *          For more information, please refer to the STM8L15x Reference manual
     43            *          
     44            *                            
     45            *          ===================================================================
     46            *                                 How to use this driver
     47            *          ===================================================================
     48            *          1. Enable write access to IWDG_PR and IWDG_RLR registers using
     49            *             IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function
     50            *               
     51            *          2. Configure the IWDG prescaler using IWDG_SetPrescaler() function
     52            *            
     53            *          3. Configure the IWDG counter value using IWDG_SetReload() function.
     54            *             This value will be loaded in the IWDG counter each time the counter
     55            *             is reloaded, then the IWDG will start counting down from this value.
     56            *            
     57            *          4. Start the IWDG using IWDG_Enable() function, when the IWDG is used
     58            *             in software mode (no need to enable the LSI, it will be enabled
     59            *             by hardware)
     60            *             
     61            *          5. Then the application program must reload the IWDG counter at regular
     62            *             intervals during normal operation to prevent an MCU reset, using
     63            *             IWDG_ReloadCounter() function.      
     64            *          
     65            *  @endverbatim
     66            *    
     67             ******************************************************************************
     68            * @attention
     69            *
     70            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     71            *
     72            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     73            * You may not use this file except in compliance with the License.
     74            * You may obtain a copy of the License at:
     75            *
     76            *        http://www.st.com/software_license_agreement_liberty_v2
     77            *
     78            * Unless required by applicable law or agreed to in writing, software 
     79            * distributed under the License is distributed on an "AS IS" BASIS, 
     80            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     81            * See the License for the specific language governing permissions and
     82            * limitations under the License.
     83            *
     84            ******************************************************************************
     85            */
     86          
     87          /* Includes ------------------------------------------------------------------*/
     88          #include "stm8l15x_iwdg.h"
     89          
     90          /** @addtogroup STM8L15x_StdPeriph_Driver
     91            * @{
     92            */
     93            
     94          /** @defgroup IWDG 
     95            * @brief IWDG driver modules
     96            * @{
     97            */ 
     98          /* Private typedef -----------------------------------------------------------*/
     99          /* Private define ------------------------------------------------------------*/
    100          /* Private macro -------------------------------------------------------------*/
    101          /* Private function prototypes -----------------------------------------------*/
    102          /* Private functions ---------------------------------------------------------*/
    103          
    104          /** @defgroup IWDG_Private_Functions
    105            * @{
    106            */
    107          
    108          /** @defgroup IWDG_Group1 Prescaler and Counter configuration functions
    109           *  @brief   Prescaler and Counter configuration functions
    110           *
    111          @verbatim   
    112           ===============================================================================
    113                            Prescaler and Counter configuration functions
    114           ===============================================================================  
    115          
    116          @endverbatim
    117            * @{
    118            */
    119            
    120          /**
    121            * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
    122            * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
    123            *          This parameter can be one of the following values:
    124            *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
    125            *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
    126            * @retval None
    127            */

   \                                 In section .far_func.text, align 1
    128          void IWDG_WriteAccessCmd(IWDG_WriteAccess_TypeDef IWDG_WriteAccess)
    129          {
    130            /* Check the parameters */
    131            assert_param(IS_IWDG_WRITE_ACCESS_MODE(IWDG_WriteAccess));
    132            IWDG->KR = IWDG_WriteAccess; /* Write Access */
   \                     IWDG_WriteAccessCmd:
   \   000000 C7 50E0      LD        L:0x50e0, A
    133          }
   \   000003 87           RETF
    134          
    135          /**
    136            * @brief  Sets IWDG Prescaler value.
    137            * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
    138            *          This parameter can be one of the following values:
    139            *            @arg IWDG_Prescaler_4: IWDG prescaler set to 4
    140            *            @arg IWDG_Prescaler_8: IWDG prescaler set to 8
    141            *            @arg IWDG_Prescaler_16: IWDG prescaler set to 16
    142            *            @arg IWDG_Prescaler_32: IWDG prescaler set to 32
    143            *            @arg IWDG_Prescaler_64: IWDG prescaler set to 64
    144            *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
    145            *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
    146            * @retval None
    147            */

   \                                 In section .far_func.text, align 1
    148          void IWDG_SetPrescaler(IWDG_Prescaler_TypeDef IWDG_Prescaler)
    149          {
    150            /* Check the parameters */
    151            assert_param(IS_IWDG_PRESCALER_VALUE(IWDG_Prescaler));
    152            IWDG->PR = IWDG_Prescaler;
   \                     IWDG_SetPrescaler:
   \   000000 C7 50E1      LD        L:0x50e1, A
    153          }
   \   000003 87           RETF
    154          
    155          /**
    156            * @brief  Sets IWDG Reload value.
    157            * @note   Write access should be enabled
    158            * @param  IWDG_Reload : Reload register value.
    159            *         This parameter must be a number between 0 and 0xFF.
    160            * @retval None
    161            */

   \                                 In section .far_func.text, align 1
    162          void IWDG_SetReload(uint8_t IWDG_Reload)
    163          {
    164            IWDG->RLR = IWDG_Reload;
   \                     IWDG_SetReload:
   \   000000 C7 50E2      LD        L:0x50e2, A
    165          }
   \   000003 87           RETF
    166          
    167          /**
    168            * @brief  Reloads IWDG counter with value defined in the reload register
    169            *         (write access to IWDG_PR and IWDG_RLR registers disabled).
    170            * @param  None
    171            * @retval None
    172            */

   \                                 In section .far_func.text, align 1
    173          void IWDG_ReloadCounter(void)
    174          {
    175            IWDG->KR = IWDG_KEY_REFRESH;
   \                     IWDG_ReloadCounter:
   \   000000 35 AA 50E0   MOV       L:0x50e0, #0xaa
    176          }
   \   000004 87           RETF
    177          
    178          /**
    179            * @}
    180            */
    181          
    182          /** @defgroup IWDG_Group2 IWDG activation function
    183           *  @brief   IWDG activation function 
    184           *
    185          @verbatim   
    186           ===============================================================================
    187                                    IWDG activation function
    188           ===============================================================================  
    189          
    190          @endverbatim
    191            * @{
    192            */
    193          
    194          /**
    195            * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
    196            * @param  None
    197            * @retval None
    198            */

   \                                 In section .far_func.text, align 1
    199          void IWDG_Enable(void)
    200          {
    201            IWDG->KR = IWDG_KEY_ENABLE;
   \                     IWDG_Enable:
   \   000000 35 CC 50E0   MOV       L:0x50e0, #0xcc
    202          }
   \   000004 87           RETF
    203          
    204          /**
    205            * @}
    206            */
    207          
    208          /**
    209            * @}
    210            */
    211            
    212          /**
    213            * @}
    214            */
    215          
    216          /**
    217            * @}
    218            */
    219          
    220          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       5  IWDG_Enable
       5  IWDG_ReloadCounter
       4  IWDG_SetPrescaler
       4  IWDG_SetReload
       4  IWDG_WriteAccessCmd

 
 22 bytes in section .far_func.text
 
 22 bytes of CODE memory

Errors: none
Warnings: none
