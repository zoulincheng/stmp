###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:48 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\user\src\stm8l15x_it.c          #
#    Command line =  E:\hwpro-2016\20160627_L\user\src\stm8l15x_it.c -e -Ol   #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_cross_call --debug --code_model medium    #
#                    --data_model medium -o E:\hwpro-2016\20160627_L\iar\Debu #
#                    g\Obj\ --dlib_config "C:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D  #
#                    STM8L15X_MD -lC E:\hwpro-2016\20160627_L\iar\Debug\List\ #
#                     -I E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\    #
#                    -I E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I          #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_it.lst  #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_it.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\user\src\stm8l15x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project\Internal_RC_Oscillators_Calibration\src\stm8l15x_it.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    10/06/2010
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all peripherals interrupt service routine.
      9            ******************************************************************************
     10            * @copy
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8l15x_it.h"
     24          
     25          /** @addtogroup InternalRCCalibration
     26            * @{
     27            */
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     33          uint16_t IC1ReadValue1 = 0, IC1ReadValue2 = 0;
   \                     IC1ReadValue1:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
   \                     IC1ReadValue2:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     34          __IO uint16_t CaptureState = 0;
   \                     CaptureState:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     35          __IO uint32_t Capture = 0;
   \                     Capture:
   \   000000              DS8 4
     36          
     37          /* Private function prototypes -----------------------------------------------*/
     38          /* Private functions ---------------------------------------------------------*/
     39          /* Public functions ----------------------------------------------------------*/
     40          
     41          #ifdef _COSMIC_
     42          /**
     43            * @brief Dummy interrupt routine
     44            * @par Parameters:
     45            * None
     46            * @retval
     47            * None
     48          */
     49          INTERRUPT_HANDLER(NonHandledInterrupt, 0)
     50          {
     51            /* In order to detect unexpected events during development,
     52               it is recommended to set a breakpoint on the following instruction.
     53            */
     54          }
     55          #endif
     56          
     57          /**
     58            * @brief TRAP interrupt routine
     59            * @par Parameters:
     60            * None
     61            * @retval
     62            * None
     63          */

   \                                 In section .far_func.text, align 1
     64          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     65          {
     66            /* In order to detect unexpected events during development,
     67               it is recommended to set a breakpoint on the following instruction.
     68            */
     69          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80           IRET
     70          
     71          /**
     72            * @brief FLASH Interrupt routine.
     73            * @param  None
     74            * @retval None
     75            */

   \                                 In section .far_func.text, align 1
     76          INTERRUPT_HANDLER(FLASH_IRQHandler, 1)
     77          {
     78            /* In order to detect unexpected events during development,
     79               it is recommended to set a breakpoint on the following instruction.
     80            */
     81          }
   \                     FLASH_IRQHandler:
   \                     _interrupt_3:
   \   000000 80           IRET
     82          
     83          /**
     84            * @brief DMA1 channel0 and channel1 Interrupt routine.
     85            * @param  None
     86            * @retval None
     87            */

   \                                 In section .far_func.text, align 1
     88          INTERRUPT_HANDLER(DMA1_CHANNEL0_1_IRQHandler, 2)
     89          {
     90            /* In order to detect unexpected events during development,
     91               it is recommended to set a breakpoint on the following instruction.
     92            */
     93          }
   \                     DMA1_CHANNEL0_1_IRQHandler:
   \                     _interrupt_4:
   \   000000 80           IRET
     94          
     95          /**
     96            * @brief DMA1 channel2 and channel3 Interrupt routine.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .far_func.text, align 1
    100          INTERRUPT_HANDLER(DMA1_CHANNEL2_3_IRQHandler, 3)
    101          {
    102            /* In order to detect unexpected events during development,
    103               it is recommended to set a breakpoint on the following instruction.
    104            */
    105          }
   \                     DMA1_CHANNEL2_3_IRQHandler:
   \                     _interrupt_5:
   \   000000 80           IRET
    106          
    107          
    108          
    109          /**
    110            * @brief External IT PORTE/F and PVD Interrupt routine.
    111            * @param  None
    112            * @retval None
    113            */

   \                                 In section .far_func.text, align 1
    114          INTERRUPT_HANDLER(EXTIE_F_PVD_IRQHandler, 5)
    115          {
    116            /* In order to detect unexpected events during development,
    117               it is recommended to set a breakpoint on the following instruction.
    118            */
    119          }
   \                     EXTIE_F_PVD_IRQHandler:
   \                     _interrupt_7:
   \   000000 80           IRET
    120          
    121          /**
    122            * @brief External IT PORTB / PORTG Interrupt routine.
    123            * @param  None
    124            * @retval None
    125            */

   \                                 In section .far_func.text, align 1
    126          INTERRUPT_HANDLER(EXTIB_G_IRQHandler, 6)
    127          {
    128            /* In order to detect unexpected events during development,
    129               it is recommended to set a breakpoint on the following instruction.
    130            */
    131          }
   \                     EXTIB_G_IRQHandler:
   \                     _interrupt_8:
   \   000000 80           IRET
    132          
    133          /**
    134            * @brief External IT PORTD /PORTH Interrupt routine.
    135            * @param  None
    136            * @retval None
    137            */

   \                                 In section .far_func.text, align 1
    138          INTERRUPT_HANDLER(EXTID_H_IRQHandler, 7)
    139          {
    140            /* In order to detect unexpected events during development,
    141               it is recommended to set a breakpoint on the following instruction.
    142            */
    143          }
   \                     EXTID_H_IRQHandler:
   \                     _interrupt_9:
   \   000000 80           IRET
    144          
    145          /**
    146            * @brief External IT PIN0 Interrupt routine.
    147            * @param  None
    148            * @retval None
    149            */
    150          #if 0
    151          INTERRUPT_HANDLER(EXTI0_IRQHandler, 8)
    152          {
    153            /* In order to detect unexpected events during development,
    154               it is recommended to set a breakpoint on the following instruction.
    155            */
    156          }
    157          #endif
    158          
    159          /**
    160            * @brief External IT PIN1 Interrupt routine.
    161            * @param  None
    162            * @retval None
    163            */

   \                                 In section .far_func.text, align 1
    164          INTERRUPT_HANDLER(EXTI1_IRQHandler, 9)
    165          {
    166            /* In order to detect unexpected events during development,
    167               it is recommended to set a breakpoint on the following instruction.
    168            */
    169          }
   \                     EXTI1_IRQHandler:
   \                     _interrupt_11:
   \   000000 80           IRET
    170          
    171          /**
    172            * @brief External IT PIN2 Interrupt routine.
    173            * @param  None
    174            * @retval None
    175            */

   \                                 In section .far_func.text, align 1
    176          INTERRUPT_HANDLER(EXTI2_IRQHandler, 10)
    177          {
    178            /* In order to detect unexpected events during development,
    179               it is recommended to set a breakpoint on the following instruction.
    180            */
    181          }
   \                     EXTI2_IRQHandler:
   \                     _interrupt_12:
   \   000000 80           IRET
    182          
    183          /**
    184            * @brief External IT PIN3 Interrupt routine.
    185            * @param  None
    186            * @retval None
    187            */

   \                                 In section .far_func.text, align 1
    188          INTERRUPT_HANDLER(EXTI3_IRQHandler, 11)
    189          {
    190            /* In order to detect unexpected events during development,
    191               it is recommended to set a breakpoint on the following instruction.
    192            */
    193          }
   \                     EXTI3_IRQHandler:
   \                     _interrupt_13:
   \   000000 80           IRET
    194          
    195          
    196          #if 0
    197          /**
    198            * @brief External IT PIN4 Interrupt routine.
    199            * @param  None
    200            * @retval None
    201            */
    202          INTERRUPT_HANDLER(EXTI4_IRQHandler, 12)
    203          {
    204            /* In order to detect unexpected events during development,
    205               it is recommended to set a breakpoint on the following instruction.
    206            */
    207          }
    208          #endif
    209          /**
    210            * @brief External IT PIN5 Interrupt routine.
    211            * @param  None
    212            * @retval None
    213            */

   \                                 In section .far_func.text, align 1
    214          INTERRUPT_HANDLER(EXTI5_IRQHandler, 13)
    215          {
    216            /* In order to detect unexpected events during development,
    217               it is recommended to set a breakpoint on the following instruction.
    218            */
    219          }
   \                     EXTI5_IRQHandler:
   \                     _interrupt_15:
   \   000000 80           IRET
    220          
    221          /**
    222            * @brief External IT PIN6 Interrupt routine.
    223            * @param  None
    224            * @retval None
    225            */

   \                                 In section .far_func.text, align 1
    226          INTERRUPT_HANDLER(EXTI6_IRQHandler, 14)
    227          {
    228            /* In order to detect unexpected events during development,
    229               it is recommended to set a breakpoint on the following instruction.
    230            */
    231          }
   \                     EXTI6_IRQHandler:
   \                     _interrupt_16:
   \   000000 80           IRET
    232          
    233          /**
    234            * @brief External IT PIN7 Interrupt routine.
    235            * @param  None
    236            * @retval None
    237            */

   \                                 In section .far_func.text, align 1
    238          INTERRUPT_HANDLER(EXTI7_IRQHandler, 15)
    239          {
    240            /* In order to detect unexpected events during development,
    241               it is recommended to set a breakpoint on the following instruction.
    242            */
    243          }
   \                     EXTI7_IRQHandler:
   \                     _interrupt_17:
   \   000000 80           IRET
    244          
    245          /**
    246            * @brief LCD /AES Interrupt routine.
    247            * @param  None
    248            * @retval None
    249            */

   \                                 In section .far_func.text, align 1
    250          INTERRUPT_HANDLER(LCD_AES_IRQHandler, 16)
    251          {
    252            /* In order to detect unexpected events during development,
    253               it is recommended to set a breakpoint on the following instruction.
    254            */
    255          }
   \                     LCD_AES_IRQHandler:
   \                     _interrupt_18:
   \   000000 80           IRET
    256          
    257          /**
    258            * @brief CLK switch/CSS/TIM1 break Interrupt routine.
    259            * @param  None
    260            * @retval None
    261            */

   \                                 In section .far_func.text, align 1
    262          INTERRUPT_HANDLER(SWITCH_CSS_BREAK_DAC_IRQHandler, 17)
    263          {
    264            /* In order to detect unexpected events during development,
    265               it is recommended to set a breakpoint on the following instruction.
    266            */
    267          }
   \                     SWITCH_CSS_BREAK_DAC_IRQHandler:
   \                     _interrupt_19:
   \   000000 80           IRET
    268          
    269          /**
    270            * @brief ADC1/Comparator Interrupt routine.
    271            * @param  None
    272            * @retval None
    273            */

   \                                 In section .far_func.text, align 1
    274          INTERRUPT_HANDLER(ADC1_COMP_IRQHandler, 18)
    275          {
    276            /* In order to detect unexpected events during development,
    277               it is recommended to set a breakpoint on the following instruction.
    278            */
    279          }
   \                     ADC1_COMP_IRQHandler:
   \                     _interrupt_20:
   \   000000 80           IRET
    280          
    281          /**
    282            * @brief TIM2 Update/Overflow/Trigger/Break /USART2 TX Interrupt routine.
    283            * @param  None
    284            * @retval None
    285            */

   \                                 In section .far_func.text, align 1
    286          INTERRUPT_HANDLER(TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQHandler, 19)
    287          {
    288            /* In order to detect unexpected events during development,
    289               it is recommended to set a breakpoint on the following instruction.
    290            */
    291          }
   \                     TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQHandler:
   \                     _interrupt_21:
   \   000000 80           IRET
    292          
    293          /**
    294            * @brief Timer2 Capture/Compare / USART2 RX Interrupt routine.
    295            * @param  None
    296            * @retval None
    297            */

   \                                 In section .far_func.text, align 1
    298          INTERRUPT_HANDLER(TIM2_CC_USART2_RX_IRQHandler, 20)
    299          {
   \                     TIM2_CC_USART2_RX_IRQHandler:
   \                     _interrupt_22:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    300            /* In order to detect unexpected events during development,
    301               it is recommended to set a breakpoint on the following instruction.
    302            */
    303            /* If the Input capture 1 interrupt has been occured: new period occured */
    304            if (TIM2_GetITStatus(TIM2_IT_CC1) != RESET)
   \   00000E A6 02        LD        A, #0x2
   \   000010 8D ......    CALLF     TIM2_GetITStatus
   \   000014 A1 00        CP        A, #0x0
   \   000016 27 72        JREQ      L:??TIM2_CC_USART2_RX_IRQHandler_0
    305            {
    306              /* Clear TIM2 Capture Compare 1 interrupt pending bit */
    307              TIM2_ClearITPendingBit(TIM2_IT_CC1);
   \   000018 A6 02        LD        A, #0x2
   \   00001A 8D ......    CALLF     TIM2_ClearITPendingBit
    308              if (CaptureState == 1)
   \   00001E CE ....      LDW       X, L:CaptureState
   \   000021 A3 0001      CPW       X, #0x1
   \   000024 26 0F        JRNE      L:??TIM2_CC_USART2_RX_IRQHandler_1
    309              {
    310                /* Get the Input Capture value */
    311                IC1ReadValue1 = TIM2_GetCapture1();
   \   000026 8D ......    CALLF     TIM2_GetCapture1
   \   00002A CF ....      LDW       L:IC1ReadValue1, X
    312                CaptureState = 2;
   \   00002D AE 0002      LDW       X, #0x2
   \   000030 CF ....      LDW       L:CaptureState, X
   \   000033 20 55        JRA       L:??TIM2_CC_USART2_RX_IRQHandler_0
    313              }
    314              else if (CaptureState == 2)
   \                     ??TIM2_CC_USART2_RX_IRQHandler_1:
   \   000035 CE ....      LDW       X, L:CaptureState
   \   000038 A3 0002      CPW       X, #0x2
   \   00003B 26 4D        JRNE      L:??TIM2_CC_USART2_RX_IRQHandler_0
    315              {
    316                /* Get the Input Capture value */
    317                IC1ReadValue2 = TIM2_GetCapture1();
   \   00003D 8D ......    CALLF     TIM2_GetCapture1
   \   000041 CF ....      LDW       L:IC1ReadValue2, X
    318                /* Disable TIM2 */
    319                TIM2_Cmd(DISABLE);
   \   000044 4F           CLR       A
   \   000045 8D ......    CALLF     TIM2_Cmd
    320                TIM2_ITConfig(TIM2_IT_CC1, DISABLE);
   \   000049 3F ..        CLR       S:?b0
   \   00004B A6 02        LD        A, #0x2
   \   00004D 8D ......    CALLF     TIM2_ITConfig
    321          
    322                /* Capture computation */
    323                if (IC1ReadValue2 > IC1ReadValue1)
   \   000051 CE ....      LDW       X, L:IC1ReadValue1
   \   000054 C3 ....      CPW       X, L:IC1ReadValue2
   \   000057 24 15        JRNC      L:??TIM2_CC_USART2_RX_IRQHandler_2
    324                {
    325                  Capture = (IC1ReadValue2 - IC1ReadValue1);
   \   000059 CE ....      LDW       X, L:IC1ReadValue2
   \   00005C 72B0 ....    SUBW      X, L:IC1ReadValue1
   \   000060 BF ..        LDW       S:?w1, X
   \   000062 5F           CLRW      X
   \   000063 BF ..        LDW       S:?w0, X
   \   000065 AE ....      LDW       X, #Capture
   \   000068 8D ......    CALLF     L:?load32_0x_l0
   \   00006C 20 16        JRA       L:??TIM2_CC_USART2_RX_IRQHandler_3
    326                }
    327                else
    328                {
    329                  Capture = ((0xFFFF - IC1ReadValue1) + IC1ReadValue2);
   \                     ??TIM2_CC_USART2_RX_IRQHandler_2:
   \   00006E 5F           CLRW      X
   \   00006F 5A           DECW      X
   \   000070 72B0 ....    SUBW      X, L:IC1ReadValue1
   \   000074 72BB ....    ADDW      X, L:IC1ReadValue2
   \   000078 BF ..        LDW       S:?w1, X
   \   00007A 5F           CLRW      X
   \   00007B BF ..        LDW       S:?w0, X
   \   00007D AE ....      LDW       X, #Capture
   \   000080 8D ......    CALLF     L:?load32_0x_l0
    330                }
    331                /* capture of two values is done */
    332                CaptureState = 255;
   \                     ??TIM2_CC_USART2_RX_IRQHandler_3:
   \   000084 AE 00FF      LDW       X, #0xff
   \   000087 CF ....      LDW       L:CaptureState, X
    333              }
    334            }
    335          }
   \                     ??TIM2_CC_USART2_RX_IRQHandler_0:
   \   00008A 8D ......    CALLF     L:?pop_l1
   \   00008E 8D ......    CALLF     L:?pop_l0
   \   000092 80           IRET
    336          
    337          /**
    338            * @brief Timer3 Update/Overflow/Trigger/Break Interrupt routine.
    339            * @param  None
    340            * @retval None
    341            */

   \                                 In section .far_func.text, align 1
    342          INTERRUPT_HANDLER(TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQHandler, 21)
    343          {
    344            /* In order to detect unexpected events during development,
    345               it is recommended to set a breakpoint on the following instruction.
    346            */
    347          }
   \                     TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQHandler:
   \                     _interrupt_23:
   \   000000 80           IRET
    348          
    349          /**
    350            * @brief Timer3 Capture/Compare /USART3 RX Interrupt routine.
    351            * @param  None
    352            * @retval None
    353            */

   \                                 In section .far_func.text, align 1
    354          INTERRUPT_HANDLER(TIM3_CC_USART3_RX_IRQHandler, 22)
    355          {
    356            /* In order to detect unexpected events during development,
    357               it is recommended to set a breakpoint on the following instruction.
    358            */
    359          }
   \                     TIM3_CC_USART3_RX_IRQHandler:
   \                     _interrupt_24:
   \   000000 80           IRET
    360          
    361          /**
    362            * @brief TIM1 Update/Overflow/Trigger/Commutation Interrupt routine.
    363            * @param  None
    364            * @retval None
    365            */

   \                                 In section .far_func.text, align 1
    366          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_COM_IRQHandler, 23)
    367          {
    368            /* In order to detect unexpected events during development,
    369               it is recommended to set a breakpoint on the following instruction.
    370            */
    371          }
   \                     TIM1_UPD_OVF_TRG_COM_IRQHandler:
   \                     _interrupt_25:
   \   000000 80           IRET
    372          
    373          /**
    374            * @brief TIM1 Capture/Compare Interrupt routine.
    375            * @param  None
    376            * @retval None
    377            */

   \                                 In section .far_func.text, align 1
    378          INTERRUPT_HANDLER(TIM1_CC_IRQHandler, 24)
    379          {
    380            /* In order to detect unexpected events during development,
    381               it is recommended to set a breakpoint on the following instruction.
    382            */
    383          }
   \                     TIM1_CC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80           IRET
    384          
    385          /**
    386            * @brief TIM4 Update/Overflow/Trigger Interrupt routine.
    387            * @param  None
    388            * @retval None
    389            */

   \                                 In section .far_func.text, align 1
    390          INTERRUPT_HANDLER(TIM4_UPD_OVF_TRG_IRQHandler, 25)
    391          {
    392            /* In order to detect unexpected events during development,
    393               it is recommended to set a breakpoint on the following instruction.
    394            */
    395          }
   \                     TIM4_UPD_OVF_TRG_IRQHandler:
   \                     _interrupt_27:
   \   000000 80           IRET
    396          
    397          /**
    398            * @brief SPI1 Interrupt routine.
    399            * @param  None
    400            * @retval None
    401            */

   \                                 In section .far_func.text, align 1
    402          INTERRUPT_HANDLER(SPI1_IRQHandler, 26)
    403          {
    404            /* In order to detect unexpected events during development,
    405               it is recommended to set a breakpoint on the following instruction.
    406            */
    407          }
   \                     SPI1_IRQHandler:
   \                     _interrupt_28:
   \   000000 80           IRET
    408          
    409          /**
    410            * @brief USART1 TX / TIM5 Update/Overflow/Trigger/Break Interrupt  routine.
    411            * @param  None
    412            * @retval None
    413            */

   \                                 In section .far_func.text, align 1
    414          INTERRUPT_HANDLER(USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQHandler, 27)
    415          {
    416            /* In order to detect unexpected events during development,
    417               it is recommended to set a breakpoint on the following instruction.
    418            */
    419          }
   \                     USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_29:
   \   000000 80           IRET
    420          
    421          /**
    422            * @brief USART1 RX / Timer5 Capture/Compare Interrupt routine.
    423            * @param  None
    424            * @retval None
    425            */

   \                                 In section .far_func.text, align 1
    426          INTERRUPT_HANDLER(USART1_RX_TIM5_CC_IRQHandler, 28)
    427          {
    428            /* In order to detect unexpected events during development,
    429               it is recommended to set a breakpoint on the following instruction.
    430            */
    431          }
   \                     USART1_RX_TIM5_CC_IRQHandler:
   \                     _interrupt_30:
   \   000000 80           IRET
    432          
    433          /**
    434            * @brief I2C1 / SPI2 Interrupt routine.
    435            * @param  None
    436            * @retval None
    437            */

   \                                 In section .far_func.text, align 1
    438          INTERRUPT_HANDLER(I2C1_SPI2_IRQHandler, 29)
    439          {
    440            /* In order to detect unexpected events during development,
    441               it is recommended to set a breakpoint on the following instruction.
    442            */
    443          }
   \                     I2C1_SPI2_IRQHandler:
   \                     _interrupt_31:
   \   000000 80           IRET
    444          
    445          /**
    446            * @}
    447            */
    448          /******************* (C) COPYRIGHT 2010 STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ADC1_COMP_IRQHandler
       4  Capture
       2  CaptureState
       1  DMA1_CHANNEL0_1_IRQHandler
       1  DMA1_CHANNEL2_3_IRQHandler
       1  EXTI1_IRQHandler
       1  EXTI2_IRQHandler
       1  EXTI3_IRQHandler
       1  EXTI5_IRQHandler
       1  EXTI6_IRQHandler
       1  EXTI7_IRQHandler
       1  EXTIB_G_IRQHandler
       1  EXTID_H_IRQHandler
       1  EXTIE_F_PVD_IRQHandler
       1  FLASH_IRQHandler
       1  I2C1_SPI2_IRQHandler
       2  IC1ReadValue1
       2  IC1ReadValue2
       1  LCD_AES_IRQHandler
       1  SPI1_IRQHandler
       1  SWITCH_CSS_BREAK_DAC_IRQHandler
       1  TIM1_CC_IRQHandler
       1  TIM1_UPD_OVF_TRG_COM_IRQHandler
     147  TIM2_CC_USART2_RX_IRQHandler
       1  TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQHandler
       1  TIM3_CC_USART3_RX_IRQHandler
       1  TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQHandler
       1  TIM4_UPD_OVF_TRG_IRQHandler
       1  TRAP_IRQHandler
       1  USART1_RX_TIM5_CC_IRQHandler
       1  USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQHandler

 
 173 bytes in section .far_func.text
  10 bytes in section .near.bss
 
 173 bytes of CODE memory
  10 bytes of DATA memory

Errors: none
Warnings: none
