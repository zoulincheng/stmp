###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:51 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\utils\xprintf\xprintf.c         #
#    Command line =  E:\hwpro-2016\20160627_L\utils\xprintf\xprintf.c -e -Ol  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_cross_call --debug --code_model medium    #
#                    --data_model medium -o E:\hwpro-2016\20160627_L\iar\Debu #
#                    g\Obj\ --dlib_config "C:\Program Files (x86)\IAR         #
#                    Systems\Embedded Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D  #
#                    STM8L15X_MD -lC E:\hwpro-2016\20160627_L\iar\Debug\List\ #
#                     -I E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\    #
#                    -I E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I          #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\xprintf.lst      #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\xprintf.o         #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\utils\xprintf\xprintf.c
      1          /*------------------------------------------------------------------------/
      2          /  Universal string handler for user console interface
      3          /-------------------------------------------------------------------------/
      4          /
      5          /  Copyright (C) 2011, ChaN, all right reserved.
      6          /
      7          / * This software is a free software and there is NO WARRANTY.
      8          / * No restriction on use. You can use, modify and redistribute it for
      9          /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
     10          / * Redistributions of source code must retain the above copyright notice.
     11          /
     12          /-------------------------------------------------------------------------*/
     13          
     14          
     15          #include "xprintf.h"
     16          
     17          
     18          #if _USE_XFUNC_OUT
     19          #include <stdarg.h>

   \                                 In section .near.bss, align 1
     20          void (*xfunc_out)(unsigned char);	/* Pointer to the output stream */
   \                     xfunc_out:
   \   000000              DS8 3

   \                                 In section .near.bss, align 1
     21          static char *outptr;
   \                     outptr:
   \   000000              DS8 2
     22          
     23          extern int dbgSendChar(int ch);
     24          
     25          
     26          /*----------------------------------------------*/
     27          /* Put a character                              */
     28          /*----------------------------------------------*/
     29          

   \                                 In section .far_func.text, align 1
     30          void xputc (char c)
     31          {
   \                     xputc:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
     32          	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
   \   000005 B6 ..        LD        A, S:?b8
   \   000007 A1 0A        CP        A, #0xa
   \   000009 26 06        JRNE      L:??xputc_0
   \   00000B A6 0D        LD        A, #0xd
   \   00000D 8D ......    CALLF     xputc
     33          
     34          
     35          
     36          	if (outptr) {
   \                     ??xputc_0:
   \   000011 CE ....      LDW       X, L:outptr
   \   000014 5D           TNZW      X
   \   000015 27 0F        JREQ      L:??xputc_1
     37          		*outptr++ = (unsigned char)c;
   \   000017 B6 ..        LD        A, S:?b8
   \   000019 72C7 ....    LD        [L:outptr.w], A
   \   00001D CE ....      LDW       X, L:outptr
   \   000020 5C           INCW      X
   \   000021 CF ....      LDW       L:outptr, X
     38          		return;
   \   000024 20 09        JRA       L:??xputc_2
     39          	}
     40          
     41          	//if (xfunc_out) xfunc_out((unsigned char)c);
     42          	dbgSendChar((unsigned char)c);
   \                     ??xputc_1:
   \   000026 5F           CLRW      X
   \   000027 41           EXG       A, XL
   \   000028 B6 ..        LD        A, S:?b8
   \   00002A 41           EXG       A, XL
   \   00002B 8D ......    CALLF     dbgSendChar
     43          }
   \                     ??xputc_2:
   \   00002F 32 ....      POP       S:?b8
   \   000032 87           RETF
     44          
     45          
     46          
     47          /*----------------------------------------------*/
     48          /* Put a null-terminated string                 */
     49          /*----------------------------------------------*/
     50          

   \                                 In section .far_func.text, align 1
     51          void xputs (					/* Put a string to the default device */
     52          	const char* str				/* Pointer to the string */
     53          )
     54          {
   \                     xputs:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 BF ..        LDW       S:?w4, X
   \   000006 20 0C        JRA       L:??xputs_0
     55          	while (*str)
     56          		xputc(*str++);
   \                     ??xputs_1:
   \   000008 92C6 ..      LD        A, [S:?w4.w]
   \   00000B 8D ......    CALLF     xputc
   \   00000F BE ..        LDW       X, S:?w4
   \   000011 5C           INCW      X
   \   000012 BF ..        LDW       S:?w4, X
   \                     ??xputs_0:
   \   000014 923D ..      TNZ       [S:?w4.w]
   \   000017 26 EF        JRNE      L:??xputs_1
     57          }
   \   000019 AC ......    JPF       L:?epilogue_w4
     58          
     59          

   \                                 In section .far_func.text, align 1
     60          void xfputs (					/* Put a string to the specified device */
     61          	void(*func)(unsigned char),	/* Pointer to the output function */
     62          	const char*	str				/* Pointer to the string */
     63          )
     64          {
   \                     xfputs:
   \   000000 8D ......    CALLF     L:?push_e2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 BF ..        LDW       S:?w6, X
     65          	void (*pf)(unsigned char);
     66          
     67          
     68          	pf = xfunc_out;		/* Save current output device */
   \   00000A AE ....      LDW       X, #xfunc_out
   \   00000D 8D ......    CALLF     L:?load24_e2_0x
     69          	xfunc_out = func;	/* Switch output to specified device */
   \   000011 AE ....      LDW       X, #xfunc_out
   \   000014 8D ......    CALLF     L:?load24_0x_e0
   \   000018 20 0C        JRA       L:??xfputs_0
     70          	while (*str)		/* Put the string */
     71          		xputc(*str++);
   \                     ??xfputs_1:
   \   00001A 92C6 ..      LD        A, [S:?w6.w]
   \   00001D 8D ......    CALLF     xputc
   \   000021 BE ..        LDW       X, S:?w6
   \   000023 5C           INCW      X
   \   000024 BF ..        LDW       S:?w6, X
   \                     ??xfputs_0:
   \   000026 923D ..      TNZ       [S:?w6.w]
   \   000029 26 EF        JRNE      L:??xfputs_1
     72          	xfunc_out = pf;		/* Restore output device */
   \   00002B AE ....      LDW       X, #xfunc_out
   \   00002E 8D ......    CALLF     L:?load24_0x_e2
     73          }
   \   000032 8D ......    CALLF     L:?pop_w6
   \   000036 8D ......    CALLF     L:?pop_e2
   \   00003A 87           RETF
     74          
     75          
     76          
     77          /*----------------------------------------------*/
     78          /* Formatted string output                      */
     79          /*----------------------------------------------*/
     80          /*  xprintf("%d", 1234);			"1234"
     81              xprintf("%6d,%3d%%", -200, 5);	"  -200,  5%"
     82              xprintf("%-6u", 100);			"100   "
     83              xprintf("%ld", 12345678L);		"12345678"
     84              xprintf("%04x", 0xA3);			"00a3"
     85              xprintf("%08LX", 0x123ABC);		"00123ABC"
     86              xprintf("%016b", 0x550F);		"0101010100001111"
     87              xprintf("%s", "String");		"String"
     88              xprintf("%-4s", "abc");			"abc "
     89              xprintf("%4s", "abc");			" abc"
     90              xprintf("%c", 'a');				"a"
     91              xprintf("%f", 10.0);            <xprintf lacks floating point support>
     92          */
     93          
     94          

   \                                 In section .far_func.text, align 1
     95          void xvprintf (
     96          	const char*	fmt,	/* Pointer to the format string */
     97          	va_list arp			/* Pointer to arguments */
     98          )
     99          {
   \                     xvprintf:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 89           PUSHW     X
   \   000009 9089         PUSHW     Y
   \   00000B 52 16        SUB       SP, #0x16
   \   00000D 20 06        JRA       L:??xvprintf_0
    100          	unsigned int r, i, j, w, f;
    101          	//unsigned long r, i, j, w, f;
    102          	unsigned long v;
    103          	char s[16], c, d, *p;
    104          
    105          
    106          	for (;;) {
    107          		c = *fmt++;					/* Get a char */
    108          		if (!c) break;				/* End of format? */
    109          		if (c != '%') {				/* Pass through it if not a % sequense */
    110          			xputc(c); continue;
   \                     ??xvprintf_1:
   \   00000F B6 ..        LD        A, S:?b12
   \   000011 8D ......    CALLF     xputc
    111          		}
   \                     ??xvprintf_0:
   \   000015 1E 19        LDW       X, (0x19,SP)
   \   000017 F6           LD        A, (X)
   \   000018 B7 ..        LD        S:?b12, A
   \   00001A 1E 19        LDW       X, (0x19,SP)
   \   00001C 5C           INCW      X
   \   00001D 1F 19        LDW       (0x19,SP), X
   \   00001F 3D ..        TNZ       S:?b12
   \   000021 26 06        JRNE      L:??xvprintf_2
    112          		f = 0;
    113          		c = *fmt++;					/* Get first char of the sequense */
    114          		if (c == '0') {				/* Flag: '0' padded */
    115          			f = 1; c = *fmt++;
    116          		} else {
    117          			if (c == '-') {			/* Flag: left justified */
    118          				f = 2; c = *fmt++;
    119          			}
    120          		}
    121          		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
    122          			w = w * 10 + c - '0';
    123          		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    124          			f |= 4; c = *fmt++;
    125          		}
    126          		if (!c) break;				/* End of format? */
    127          		d = c;
    128          		if (d >= 'a') d -= 0x20;
    129          		switch (d) {				/* Type is... */
    130          		case 'S' :					/* String */
    131          			p = va_arg(arp, char*);
    132          			for (j = 0; p[j]; j++) ;
    133          			while (!(f & 2) && j++ < w) xputc(' ');
    134          			xputs(p);
    135          			while (j++ < w) xputc(' ');
    136          			continue;
    137          		case 'C' :					/* Character */
    138          			xputc((char)va_arg(arp, int)); continue;
    139          		case 'B' :					/* Binary */
    140          			r = 2; break;
    141          		case 'O' :					/* Octal */
    142          			r = 8; break;
    143          		case 'D' :					/* Signed decimal */
    144          		case 'U' :					/* Unsigned decimal */
    145          			r = 10; break;
    146          		case 'X' :					/* Hexdecimal */
    147          			r = 16; break;
    148          		default:					/* Unknown type (passthrough) */
    149          			xputc(c); continue;
    150          		}
    151          
    152          		/* Get an argument and put it in numeral */
    153          		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
    154          		if (d == 'D' && (v & 0x80000000)) {
    155          			v = 0 - v;
    156          			f |= 8;
    157          		}
    158          		i = 0;
    159          		do {
    160          			d = (char)(v % r); v /= r;
    161          			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    162          			s[i++] = d + '0';
    163          		} while (v && i < sizeof(s));
    164          		if (f & 8) s[i++] = '-';
    165          		j = i; d = (f & 1) ? '0' : ' ';
    166          		while (!(f & 2) && j++ < w) xputc(d);
    167          		do xputc(s[--i]); while(i);
    168          		while (j++ < w) xputc(' ');
    169          	}
    170          }
   \                     ??xvprintf_3:
   \   000023 5B 1A        ADD       SP, #0x1a
   \   000025 AC ......    JPF       L:?epilogue_l2_l3
   \                     ??xvprintf_2:
   \   000029 B6 ..        LD        A, S:?b12
   \   00002B A1 25        CP        A, #0x25
   \   00002D 26 E0        JRNE      L:??xvprintf_1
   \   00002F 5F           CLRW      X
   \   000030 1F 01        LDW       (0x1,SP), X
   \   000032 1E 19        LDW       X, (0x19,SP)
   \   000034 F6           LD        A, (X)
   \   000035 B7 ..        LD        S:?b12, A
   \   000037 1E 19        LDW       X, (0x19,SP)
   \   000039 5C           INCW      X
   \   00003A 1F 19        LDW       (0x19,SP), X
   \   00003C B6 ..        LD        A, S:?b12
   \   00003E A1 30        CP        A, #0x30
   \   000040 26 10        JRNE      L:??xvprintf_4
   \   000042 5F           CLRW      X
   \   000043 5C           INCW      X
   \   000044 1F 01        LDW       (0x1,SP), X
   \   000046 1E 19        LDW       X, (0x19,SP)
   \   000048 F6           LD        A, (X)
   \   000049 B7 ..        LD        S:?b12, A
   \   00004B 1E 19        LDW       X, (0x19,SP)
   \   00004D 5C           INCW      X
   \   00004E 1F 19        LDW       (0x19,SP), X
   \   000050 20 15        JRA       L:??xvprintf_5
   \                     ??xvprintf_4:
   \   000052 B6 ..        LD        A, S:?b12
   \   000054 A1 2D        CP        A, #0x2d
   \   000056 26 0F        JRNE      L:??xvprintf_5
   \   000058 AE 0002      LDW       X, #0x2
   \   00005B 1F 01        LDW       (0x1,SP), X
   \   00005D 1E 19        LDW       X, (0x19,SP)
   \   00005F F6           LD        A, (X)
   \   000060 B7 ..        LD        S:?b12, A
   \   000062 1E 19        LDW       X, (0x19,SP)
   \   000064 5C           INCW      X
   \   000065 1F 19        LDW       (0x19,SP), X
   \                     ??xvprintf_5:
   \   000067 5F           CLRW      X
   \   000068 1F 03        LDW       (0x3,SP), X
   \   00006A 20 28        JRA       L:??xvprintf_6
   \                     ??xvprintf_7:
   \   00006C 16 03        LDW       Y, (0x3,SP)
   \   00006E AE 000A      LDW       X, #0xa
   \   000071 BF ..        LDW       S:?w0, X
   \   000073 93           LDW       X, Y
   \   000074 8D ......    CALLF     L:?mul16_x_x_w0
   \   000078 905F         CLRW      Y
   \   00007A 61           EXG       A, YL
   \   00007B B6 ..        LD        A, S:?b12
   \   00007D 61           EXG       A, YL
   \   00007E 90BF ..      LDW       S:?w0, Y
   \   000081 72BB ....    ADDW      X, S:?w0
   \   000085 1C FFD0      ADDW      X, #0xffd0
   \   000088 1F 03        LDW       (0x3,SP), X
   \   00008A 1E 19        LDW       X, (0x19,SP)
   \   00008C F6           LD        A, (X)
   \   00008D B7 ..        LD        S:?b12, A
   \   00008F 1E 19        LDW       X, (0x19,SP)
   \   000091 5C           INCW      X
   \   000092 1F 19        LDW       (0x19,SP), X
   \                     ??xvprintf_6:
   \   000094 B6 ..        LD        A, S:?b12
   \   000096 A0 30        SUB       A, #0x30
   \   000098 A1 0A        CP        A, #0xa
   \   00009A 25 D0        JRC       L:??xvprintf_7
   \   00009C B6 ..        LD        A, S:?b12
   \   00009E A1 6C        CP        A, #0x6c
   \   0000A0 27 06        JREQ      L:??xvprintf_8
   \   0000A2 B6 ..        LD        A, S:?b12
   \   0000A4 A1 4C        CP        A, #0x4c
   \   0000A6 26 15        JRNE      L:??xvprintf_9
   \                     ??xvprintf_8:
   \   0000A8 1E 01        LDW       X, (0x1,SP)
   \   0000AA 02           RLWA      X, A
   \   0000AB AA 00        OR        A, #0x0
   \   0000AD 02           RLWA      X, A
   \   0000AE AA 04        OR        A, #0x4
   \   0000B0 02           RLWA      X, A
   \   0000B1 1F 01        LDW       (0x1,SP), X
   \   0000B3 1E 19        LDW       X, (0x19,SP)
   \   0000B5 F6           LD        A, (X)
   \   0000B6 B7 ..        LD        S:?b12, A
   \   0000B8 1E 19        LDW       X, (0x19,SP)
   \   0000BA 5C           INCW      X
   \   0000BB 1F 19        LDW       (0x19,SP), X
   \                     ??xvprintf_9:
   \   0000BD 3D ..        TNZ       S:?b12
   \   0000BF 26 03        JRNE      ??lb_0
   \   0000C1 CC ....      JP        L:??xvprintf_3
   \                     ??lb_0:
   \   0000C4 45 .. ..     MOV       S:?b13, S:?b12
   \   0000C7 B6 ..        LD        A, S:?b13
   \   0000C9 A1 61        CP        A, #0x61
   \   0000CB 25 06        JRC       L:??xvprintf_10
   \   0000CD B6 ..        LD        A, S:?b13
   \   0000CF AB E0        ADD       A, #0xe0
   \   0000D1 B7 ..        LD        S:?b13, A
   \                     ??xvprintf_10:
   \   0000D3 B6 ..        LD        A, S:?b13
   \   0000D5 A0 42        SUB       A, #0x42
   \   0000D7 26 03        JRNE      ??lb_1
   \   0000D9 CC ....      JP        L:??xvprintf_11
   \                     ??lb_1:
   \   0000DC 4A           DEC       A
   \   0000DD 27 7B        JREQ      L:??xvprintf_12
   \   0000DF 4A           DEC       A
   \   0000E0 26 03        JRNE      ??lb_2
   \   0000E2 CC ....      JP        L:??xvprintf_13
   \                     ??lb_2:
   \   0000E5 A0 0B        SUB       A, #0xb
   \   0000E7 26 03        JRNE      ??lb_3
   \   0000E9 CC ....      JP        L:??xvprintf_14
   \                     ??lb_3:
   \   0000EC A0 04        SUB       A, #0x4
   \   0000EE 27 11        JREQ      L:??xvprintf_15
   \   0000F0 A0 02        SUB       A, #0x2
   \   0000F2 26 03        JRNE      ??lb_4
   \   0000F4 CC ....      JP        L:??xvprintf_13
   \                     ??lb_4:
   \   0000F7 A0 03        SUB       A, #0x3
   \   0000F9 26 03        JRNE      ??lb_5
   \   0000FB CC ....      JP        L:??xvprintf_16
   \                     ??lb_5:
   \   0000FE CC ....      JP        L:??xvprintf_17
   \                     ??xvprintf_15:
   \   000101 1E 17        LDW       X, (0x17,SP)
   \   000103 FE           LDW       X, (X)
   \   000104 BF ..        LDW       S:?w5, X
   \   000106 1E 17        LDW       X, (0x17,SP)
   \   000108 5C           INCW      X
   \   000109 5C           INCW      X
   \   00010A 1F 17        LDW       (0x17,SP), X
   \   00010C 3F ..        CLR       S:?b9
   \   00010E 3F ..        CLR       S:?b8
   \   000110 20 05        JRA       L:??xvprintf_18
   \                     ??xvprintf_19:
   \   000112 BE ..        LDW       X, S:?w4
   \   000114 5C           INCW      X
   \   000115 BF ..        LDW       S:?w4, X
   \                     ??xvprintf_18:
   \   000117 BE ..        LDW       X, S:?w4
   \   000119 72BB ....    ADDW      X, S:?w5
   \   00011D 7D           TNZ       (X)
   \   00011E 26 F2        JRNE      L:??xvprintf_19
   \                     ??xvprintf_20:
   \   000120 7B 02        LD        A, (0x2,SP)
   \   000122 A4 02        AND       A, #0x2
   \   000124 A1 00        CP        A, #0x0
   \   000126 26 14        JRNE      L:??xvprintf_21
   \   000128 90BE ..      LDW       Y, S:?w4
   \   00012B 93           LDW       X, Y
   \   00012C 5C           INCW      X
   \   00012D BF ..        LDW       S:?w4, X
   \   00012F 93           LDW       X, Y
   \   000130 13 03        CPW       X, (0x3,SP)
   \   000132 24 08        JRNC      L:??xvprintf_21
   \   000134 A6 20        LD        A, #0x20
   \   000136 8D ......    CALLF     xputc
   \   00013A 20 E4        JRA       L:??xvprintf_20
   \                     ??xvprintf_21:
   \   00013C BE ..        LDW       X, S:?w5
   \   00013E 8D ......    CALLF     xputs
   \   000142 20 06        JRA       L:??xvprintf_22
   \                     ??xvprintf_23:
   \   000144 A6 20        LD        A, #0x20
   \   000146 8D ......    CALLF     xputc
   \                     ??xvprintf_22:
   \   00014A BE ..        LDW       X, S:?w4
   \   00014C 9093         LDW       Y, X
   \   00014E 905C         INCW      Y
   \   000150 90BF ..      LDW       S:?w4, Y
   \   000153 13 03        CPW       X, (0x3,SP)
   \   000155 25 ED        JRC       L:??xvprintf_23
   \   000157 CC ....      JP        L:??xvprintf_0
   \                     ??xvprintf_12:
   \   00015A 1E 17        LDW       X, (0x17,SP)
   \   00015C 9093         LDW       Y, X
   \   00015E 72A9 0002    ADDW      Y, #0x2
   \   000162 17 17        LDW       (0x17,SP), Y
   \   000164 FE           LDW       X, (X)
   \   000165 9F           LD        A, XL
   \   000166 8D ......    CALLF     xputc
   \   00016A CC ....      JP        L:??xvprintf_0
   \                     ??xvprintf_11:
   \   00016D AE 0002      LDW       X, #0x2
   \   000170 1F 05        LDW       (0x5,SP), X
   \                     ??xvprintf_24:
   \   000172 7B 02        LD        A, (0x2,SP)
   \   000174 A4 04        AND       A, #0x4
   \   000176 A1 00        CP        A, #0x0
   \   000178 27 2D        JREQ      L:??xvprintf_25
   \   00017A 1E 17        LDW       X, (0x17,SP)
   \   00017C 8D ......    CALLF     L:?load32_l0_0x
   \   000180 1E 17        LDW       X, (0x17,SP)
   \   000182 1C 0004      ADDW      X, #0x4
   \   000185 1F 17        LDW       (0x17,SP), X
   \   000187 20 41        JRA       L:??xvprintf_26
   \                     ??xvprintf_14:
   \   000189 AE 0008      LDW       X, #0x8
   \   00018C 1F 05        LDW       (0x5,SP), X
   \   00018E 20 E2        JRA       L:??xvprintf_24
   \                     ??xvprintf_13:
   \   000190 AE 000A      LDW       X, #0xa
   \   000193 1F 05        LDW       (0x5,SP), X
   \   000195 20 DB        JRA       L:??xvprintf_24
   \                     ??xvprintf_16:
   \   000197 AE 0010      LDW       X, #0x10
   \   00019A 1F 05        LDW       (0x5,SP), X
   \   00019C 20 D4        JRA       L:??xvprintf_24
   \                     ??xvprintf_17:
   \   00019E B6 ..        LD        A, S:?b12
   \   0001A0 8D ......    CALLF     xputc
   \   0001A4 CC ....      JP        L:??xvprintf_0
   \                     ??xvprintf_25:
   \   0001A7 B6 ..        LD        A, S:?b13
   \   0001A9 A1 44        CP        A, #0x44
   \   0001AB 26 0F        JRNE      L:??xvprintf_27
   \   0001AD 1E 17        LDW       X, (0x17,SP)
   \   0001AF FE           LDW       X, (X)
   \   0001B0 8D ......    CALLF     L:?sext32_l0_x
   \   0001B4 1E 17        LDW       X, (0x17,SP)
   \   0001B6 5C           INCW      X
   \   0001B7 5C           INCW      X
   \   0001B8 1F 17        LDW       (0x17,SP), X
   \   0001BA 20 0E        JRA       L:??xvprintf_26
   \                     ??xvprintf_27:
   \   0001BC 1E 17        LDW       X, (0x17,SP)
   \   0001BE FE           LDW       X, (X)
   \   0001BF BF ..        LDW       S:?w1, X
   \   0001C1 5F           CLRW      X
   \   0001C2 BF ..        LDW       S:?w0, X
   \   0001C4 1E 17        LDW       X, (0x17,SP)
   \   0001C6 5C           INCW      X
   \   0001C7 5C           INCW      X
   \   0001C8 1F 17        LDW       (0x17,SP), X
   \                     ??xvprintf_26:
   \   0001CA 8D ......    CALLF     L:?mov_l2_l0
   \   0001CE B6 ..        LD        A, S:?b13
   \   0001D0 A1 44        CP        A, #0x44
   \   0001D2 26 35        JRNE      L:??xvprintf_28
   \   0001D4 AE 8000      LDW       X, #0x8000
   \   0001D7 BF ..        LDW       S:?w0, X
   \   0001D9 58           SLLW      X
   \   0001DA BF ..        LDW       S:?w1, X
   \   0001DC 8D ......    CALLF     L:?mov_l1_l2
   \   0001E0 8D ......    CALLF     L:?and32_l0_l0_l1
   \   0001E4 BE ..        LDW       X, S:?w0
   \   0001E6 A3 0000      CPW       X, #0x0
   \   0001E9 26 05        JRNE      L:??xvprintf_29
   \   0001EB BE ..        LDW       X, S:?w1
   \   0001ED A3 0000      CPW       X, #0x0
   \                     ??xvprintf_29:
   \   0001F0 27 17        JREQ      L:??xvprintf_28
   \   0001F2 8D ......    CALLF     L:?mov_l0_l2
   \   0001F6 8D ......    CALLF     L:?neg32_l0_l0
   \   0001FA 8D ......    CALLF     L:?mov_l2_l0
   \   0001FE 1E 01        LDW       X, (0x1,SP)
   \   000200 02           RLWA      X, A
   \   000201 AA 00        OR        A, #0x0
   \   000203 02           RLWA      X, A
   \   000204 AA 08        OR        A, #0x8
   \   000206 02           RLWA      X, A
   \   000207 1F 01        LDW       (0x1,SP), X
   \                     ??xvprintf_28:
   \   000209 3F ..        CLR       S:?b15
   \   00020B 3F ..        CLR       S:?b14
   \                     ??xvprintf_30:
   \   00020D 1E 05        LDW       X, (0x5,SP)
   \   00020F BF ..        LDW       S:?w3, X
   \   000211 5F           CLRW      X
   \   000212 BF ..        LDW       S:?w2, X
   \   000214 8D ......    CALLF     L:?mov_l0_l2
   \   000218 8D ......    CALLF     L:?umod32_l1_l0_l1
   \   00021C 45 .. ..     MOV       S:?b13, S:?b7
   \   00021F 1E 05        LDW       X, (0x5,SP)
   \   000221 BF ..        LDW       S:?w1, X
   \   000223 5F           CLRW      X
   \   000224 BF ..        LDW       S:?w0, X
   \   000226 8D ......    CALLF     L:?mov_l1_l0
   \   00022A 8D ......    CALLF     L:?mov_l0_l2
   \   00022E 8D ......    CALLF     L:?udiv32_l0_l0_l1
   \   000232 8D ......    CALLF     L:?mov_l2_l0
   \   000236 B6 ..        LD        A, S:?b13
   \   000238 A1 0A        CP        A, #0xa
   \   00023A 25 13        JRC       L:??xvprintf_31
   \   00023C B6 ..        LD        A, S:?b12
   \   00023E A1 78        CP        A, #0x78
   \   000240 26 05        JRNE      L:??xvprintf_32
   \   000242 AE 0027      LDW       X, #0x27
   \   000245 20 03        JRA       L:??xvprintf_33
   \                     ??xvprintf_32:
   \   000247 AE 0007      LDW       X, #0x7
   \                     ??xvprintf_33:
   \   00024A 9F           LD        A, XL
   \   00024B BB ..        ADD       A, S:?b13
   \   00024D B7 ..        LD        S:?b13, A
   \                     ??xvprintf_31:
   \   00024F B6 ..        LD        A, S:?b13
   \   000251 AB 30        ADD       A, #0x30
   \   000253 96           LDW       X, SP
   \   000254 1C 0007      ADDW      X, #0x7
   \   000257 72BB ....    ADDW      X, S:?w7
   \   00025B F7           LD        (X), A
   \   00025C BE ..        LDW       X, S:?w7
   \   00025E 5C           INCW      X
   \   00025F BF ..        LDW       S:?w7, X
   \   000261 BE ..        LDW       X, S:?w4
   \   000263 A3 0000      CPW       X, #0x0
   \   000266 26 05        JRNE      L:??xvprintf_34
   \   000268 BE ..        LDW       X, S:?w5
   \   00026A A3 0000      CPW       X, #0x0
   \                     ??xvprintf_34:
   \   00026D 27 07        JREQ      L:??xvprintf_35
   \   00026F BE ..        LDW       X, S:?w7
   \   000271 A3 0010      CPW       X, #0x10
   \   000274 25 97        JRC       L:??xvprintf_30
   \                     ??xvprintf_35:
   \   000276 7B 02        LD        A, (0x2,SP)
   \   000278 A4 08        AND       A, #0x8
   \   00027A A1 00        CP        A, #0x0
   \   00027C 27 10        JREQ      L:??xvprintf_36
   \   00027E 96           LDW       X, SP
   \   00027F 1C 0007      ADDW      X, #0x7
   \   000282 72BB ....    ADDW      X, S:?w7
   \   000286 A6 2D        LD        A, #0x2d
   \   000288 F7           LD        (X), A
   \   000289 BE ..        LDW       X, S:?w7
   \   00028B 5C           INCW      X
   \   00028C BF ..        LDW       S:?w7, X
   \                     ??xvprintf_36:
   \   00028E 8D ......    CALLF     L:?mov_w4_w7
   \   000292 7B 02        LD        A, (0x2,SP)
   \   000294 A4 01        AND       A, #0x1
   \   000296 A1 00        CP        A, #0x0
   \   000298 27 04        JREQ      L:??xvprintf_37
   \   00029A A6 30        LD        A, #0x30
   \   00029C 20 02        JRA       L:??xvprintf_38
   \                     ??xvprintf_37:
   \   00029E A6 20        LD        A, #0x20
   \                     ??xvprintf_38:
   \   0002A0 B7 ..        LD        S:?b13, A
   \   0002A2 20 06        JRA       L:??xvprintf_39
   \                     ??xvprintf_40:
   \   0002A4 B6 ..        LD        A, S:?b13
   \   0002A6 8D ......    CALLF     xputc
   \                     ??xvprintf_39:
   \   0002AA 7B 02        LD        A, (0x2,SP)
   \   0002AC A4 02        AND       A, #0x2
   \   0002AE A1 00        CP        A, #0x0
   \   0002B0 26 0C        JRNE      L:??xvprintf_41
   \   0002B2 90BE ..      LDW       Y, S:?w4
   \   0002B5 93           LDW       X, Y
   \   0002B6 5C           INCW      X
   \   0002B7 BF ..        LDW       S:?w4, X
   \   0002B9 93           LDW       X, Y
   \   0002BA 13 03        CPW       X, (0x3,SP)
   \   0002BC 25 E6        JRC       L:??xvprintf_40
   \                     ??xvprintf_41:
   \   0002BE BE ..        LDW       X, S:?w7
   \   0002C0 5A           DECW      X
   \   0002C1 BF ..        LDW       S:?w7, X
   \   0002C3 96           LDW       X, SP
   \   0002C4 1C 0007      ADDW      X, #0x7
   \   0002C7 72BB ....    ADDW      X, S:?w7
   \   0002CB F6           LD        A, (X)
   \   0002CC 8D ......    CALLF     xputc
   \   0002D0 BE ..        LDW       X, S:?w7
   \   0002D2 5D           TNZW      X
   \   0002D3 26 E9        JRNE      L:??xvprintf_41
   \                     ??xvprintf_42:
   \   0002D5 BE ..        LDW       X, S:?w4
   \   0002D7 9093         LDW       Y, X
   \   0002D9 905C         INCW      Y
   \   0002DB 90BF ..      LDW       S:?w4, Y
   \   0002DE 13 03        CPW       X, (0x3,SP)
   \   0002E0 25 03        JRC       ??lb_6
   \   0002E2 CC ....      JP        L:??xvprintf_0
   \                     ??lb_6:
   \   0002E5 A6 20        LD        A, #0x20
   \   0002E7 8D ......    CALLF     xputc
   \   0002EB 20 E8        JRA       L:??xvprintf_42
    171          
    172          

   \                                 In section .far_func.text, align 1, keep-with-next
    173          void xprintf (			/* Put a formatted string to the default device */
    174          	const char*	fmt,	/* Pointer to the format string */
    175          	...					/* Optional arguments */
    176          )
    177          {
    178          	va_list arp;
    179          
    180          
    181          	va_start(arp, fmt);
   \                     xprintf:
   \   000000 9096         LDW       Y, SP
   \   000002 72A9 0004    ADDW      Y, #0x4
    182          	xvprintf(fmt, arp);
   \   000006              REQUIRE xvprintf
   \   000006              ;               // Fall through to label xvprintf
    183          	va_end(arp);
    184          }
    185          
    186          
    187          
    188          
    189          
    190          
    191          
    192          
    193          

   \                                 In section .far_func.text, align 1
    194          void xsprintf (			/* Put a formatted string to the memory */
    195          	char* buff,			/* Pointer to the output buffer */
    196          	const char*	fmt,	/* Pointer to the format string */
    197          	...					/* Optional arguments */
    198          )
    199          {
   \                     xsprintf:
   \   000000 90BF ..      LDW       S:?w0, Y
    200          	va_list arp;
    201          
    202          
    203          	outptr = buff;		/* Switch destination for memory */
   \   000003 CF ....      LDW       L:outptr, X
    204          
    205          	va_start(arp, fmt);
   \   000006 9096         LDW       Y, SP
   \   000008 72A9 0004    ADDW      Y, #0x4
    206          	xvprintf(fmt, arp);
   \   00000C BE ..        LDW       X, S:?w0
   \   00000E 8D ......    CALLF     xvprintf
    207          	va_end(arp);
    208          
    209          	*outptr = 0;		/* Terminate output string with a \0 */
   \   000012 4F           CLR       A
   \   000013 72C7 ....    LD        [L:outptr.w], A
    210          	outptr = 0;			/* Switch destination for device */
   \   000017 5F           CLRW      X
   \   000018 CF ....      LDW       L:outptr, X
    211          }
   \   00001B 87           RETF
    212          
    213          

   \                                 In section .far_func.text, align 1
    214          void xfprintf (					/* Put a formatted string to the specified device */
    215          	void(*func)(unsigned char),	/* Pointer to the output function */
    216          	const char*	fmt,			/* Pointer to the format string */
    217          	...							/* Optional arguments */
    218          )
    219          {
   \                     xfprintf:
   \   000000 8D ......    CALLF     L:?push_e2
   \   000004 BF ..        LDW       S:?w2, X
    220          	va_list arp;
    221          	void (*pf)(unsigned char);
    222          
    223          
    224          	pf = xfunc_out;		/* Save current output device */
   \   000006 AE ....      LDW       X, #xfunc_out
   \   000009 8D ......    CALLF     L:?load24_e2_0x
    225          	xfunc_out = func;	/* Switch output to specified device */
   \   00000D AE ....      LDW       X, #xfunc_out
   \   000010 8D ......    CALLF     L:?load24_0x_e0
    226          
    227          	va_start(arp, fmt);
   \   000014 9096         LDW       Y, SP
   \   000016 72A9 0007    ADDW      Y, #0x7
    228          	xvprintf(fmt, arp);
   \   00001A BE ..        LDW       X, S:?w2
   \   00001C 8D ......    CALLF     xvprintf
    229          	va_end(arp);
    230          
    231          	xfunc_out = pf;		/* Restore output device */
   \   000020 AE ....      LDW       X, #xfunc_out
   \   000023 8D ......    CALLF     L:?load24_0x_e2
    232          }
   \   000027 8D ......    CALLF     L:?pop_e2
   \   00002B 87           RETF
    233          
    234          
    235          
    236          /*----------------------------------------------*/
    237          /* Dump a line of binary dump                   */
    238          /*----------------------------------------------*/
    239          

   \                                 In section .far_func.text, align 1
    240          void put_dump (
    241          	const void* buff,		/* Pointer to the array to be dumped */
    242          	unsigned long addr,		/* Heading address value */
    243          	int len,				/* Number of items to be dumped */
    244          	int width				/* Size of the items (DW_CHAR, DW_SHORT, DW_LONG) */
    245          )
    246          {
   \                     put_dump:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 BF ..        LDW       S:?w4, X
   \   00000A 90BF ..      LDW       S:?w5, Y
   \   00000D 8D ......    CALLF     L:?mov_w6_w2
    247          	int i;
    248          	const unsigned char *bp;
    249          	const unsigned short *sp;
    250          	const unsigned long *lp;
    251          
    252          
    253          	xprintf("%08lX ", addr);		/* address */
   \   000011 8D ......    CALLF     L:?push_l0
   \   000015 AE ....      LDW       X, #`?<Constant "%08lX ">`
   \   000018 8D ......    CALLF     xprintf
   \   00001C 5B 04        ADD       SP, #0x4
    254          
    255          	switch (width) {
   \   00001E BE ..        LDW       X, S:?w6
   \   000020 5A           DECW      X
   \   000021 27 0B        JREQ      L:??put_dump_0
   \   000023 5A           DECW      X
   \   000024 27 63        JREQ      L:??put_dump_1
   \   000026 1D 0002      SUBW      X, #0x2
   \   000029 27 7C        JREQ      L:??put_dump_2
   \   00002B CC ....      JP        L:??put_dump_3
    256          	case DW_CHAR:
    257          		bp = buff;
   \                     ??put_dump_0:
   \   00002E 8D ......    CALLF     L:?mov_w6_w4
    258          		for (i = 0; i < len; i++)		/* Hexdecimal dump */
   \   000032 3F ..        CLR       S:?b9
   \   000034 3F ..        CLR       S:?b8
   \   000036 20 18        JRA       L:??put_dump_4
    259          			xprintf(" %02X", bp[i]);
   \                     ??put_dump_5:
   \   000038 BE ..        LDW       X, S:?w4
   \   00003A 72BB ....    ADDW      X, S:?w6
   \   00003E F6           LD        A, (X)
   \   00003F 5F           CLRW      X
   \   000040 97           LD        XL, A
   \   000041 89           PUSHW     X
   \   000042 AE ....      LDW       X, #`?<Constant " %02X">`
   \   000045 8D ......    CALLF     xprintf
   \   000049 5B 02        ADD       SP, #0x2
   \   00004B BE ..        LDW       X, S:?w4
   \   00004D 5C           INCW      X
   \   00004E BF ..        LDW       S:?w4, X
   \                     ??put_dump_4:
   \   000050 BE ..        LDW       X, S:?w4
   \   000052 B3 ..        CPW       X, S:?w5
   \   000054 2F E2        JRSLT     L:??put_dump_5
    260          		xputc(' ');
   \   000056 A6 20        LD        A, #0x20
   \   000058 8D ......    CALLF     xputc
    261          		for (i = 0; i < len; i++)		/* ASCII dump */
   \   00005C 3F ..        CLR       S:?b9
   \   00005E 3F ..        CLR       S:?b8
   \   000060 20 0B        JRA       L:??put_dump_6
    262          			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
   \                     ??put_dump_7:
   \   000062 A6 2E        LD        A, #0x2e
   \                     ??put_dump_8:
   \   000064 8D ......    CALLF     xputc
   \   000068 BE ..        LDW       X, S:?w4
   \   00006A 5C           INCW      X
   \   00006B BF ..        LDW       S:?w4, X
   \                     ??put_dump_6:
   \   00006D BE ..        LDW       X, S:?w4
   \   00006F B3 ..        CPW       X, S:?w5
   \   000071 2E 56        JRSGE     L:??put_dump_3
   \   000073 BE ..        LDW       X, S:?w4
   \   000075 72BB ....    ADDW      X, S:?w6
   \   000079 F6           LD        A, (X)
   \   00007A A0 20        SUB       A, #0x20
   \   00007C A1 5F        CP        A, #0x5f
   \   00007E 24 E2        JRNC      L:??put_dump_7
   \   000080 BE ..        LDW       X, S:?w4
   \   000082 72BB ....    ADDW      X, S:?w6
   \   000086 F6           LD        A, (X)
   \   000087 20 DB        JRA       L:??put_dump_8
    263          		break;
    264          	case DW_SHORT:
    265          		sp = buff;
    266          		do								/* Hexdecimal dump */
    267          			xprintf(" %04X", *sp++);
   \                     ??put_dump_1:
   \   000089 92CE ..      LDW       X, [S:?w4.w]
   \   00008C 89           PUSHW     X
   \   00008D AE ....      LDW       X, #`?<Constant " %04X">`
   \   000090 8D ......    CALLF     xprintf
   \   000094 5B 02        ADD       SP, #0x2
   \   000096 BE ..        LDW       X, S:?w4
   \   000098 1C 0002      ADDW      X, #0x2
   \   00009B BF ..        LDW       S:?w4, X
    268          		while (--len);
   \   00009D BE ..        LDW       X, S:?w5
   \   00009F 5A           DECW      X
   \   0000A0 BF ..        LDW       S:?w5, X
   \   0000A2 5D           TNZW      X
   \   0000A3 26 E4        JRNE      L:??put_dump_1
    269          		break;
   \   0000A5 20 22        JRA       L:??put_dump_3
    270          	case DW_LONG:
    271          		lp = buff;
    272          		do								/* Hexdecimal dump */
    273          			xprintf(" %08LX", *lp++);
   \                     ??put_dump_2:
   \   0000A7 BE ..        LDW       X, S:?w4
   \   0000A9 8D ......    CALLF     L:?load32_l0_0x
   \   0000AD 8D ......    CALLF     L:?push_l0
   \   0000B1 AE ....      LDW       X, #`?<Constant " %08LX">`
   \   0000B4 8D ......    CALLF     xprintf
   \   0000B8 5B 04        ADD       SP, #0x4
   \   0000BA BE ..        LDW       X, S:?w4
   \   0000BC 1C 0004      ADDW      X, #0x4
   \   0000BF BF ..        LDW       S:?w4, X
    274          		while (--len);
   \   0000C1 BE ..        LDW       X, S:?w5
   \   0000C3 5A           DECW      X
   \   0000C4 BF ..        LDW       S:?w5, X
   \   0000C6 5D           TNZW      X
   \   0000C7 26 DE        JRNE      L:??put_dump_2
    275          		break;
    276          	}
    277          
    278          	xputc('\n');
   \                     ??put_dump_3:
   \   0000C9 A6 0A        LD        A, #0xa
   \   0000CB 8D ......    CALLF     xputc
    279          }
   \   0000CF AC ......    JPF       L:?epilogue_l2_w6
    280          
    281          #endif /* _USE_XFUNC_OUT */
    282          
    283          
    284          
    285          #if _USE_XFUNC_IN

   \                                 In section .near.bss, align 1
    286          unsigned char (*xfunc_in)(void);	/* Pointer to the input stream */
   \                     xfunc_in:
   \   000000              DS8 3
    287          
    288          /*----------------------------------------------*/
    289          /* Get a line from the input                    */
    290          /*----------------------------------------------*/
    291          

   \                                 In section .far_func.text, align 1
    292          int xgets (		/* 0:End of stream, 1:A line arrived */
    293          	char* buff,	/* Pointer to the buffer */
    294          	int len		/* Buffer length */
    295          )
    296          {
   \                     xgets:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 BF ..        LDW       S:?w6, X
   \   00000A 90BF ..      LDW       S:?w5, Y
    297          	int c, i;
    298          
    299          
    300          	if (!xfunc_in) return 0;		/* No input function specified */
   \   00000D AE ....      LDW       X, #xfunc_in
   \   000010 9093         LDW       Y, X
   \   000012 3F ..        CLR       S:?b1
   \   000014 5F           CLRW      X
   \   000015 BF ..        LDW       S:?w1, X
   \   000017 93           LDW       X, Y
   \   000018 8D ......    CALLF     L:?ucmp24_c_0x_e0
   \   00001C 26 05        JRNE      L:??xgets_0
   \   00001E 5F           CLRW      X
   \   00001F AC ......    JPF       L:?epilogue_l2_w6
    301          
    302          	i = 0;
   \                     ??xgets_0:
   \   000023 3F ..        CLR       S:?b9
   \   000025 3F ..        CLR       S:?b8
   \   000027 20 0B        JRA       L:??xgets_1
    303          	for (;;) {
    304          		c = xfunc_in();				/* Get a char from the incoming stream */
    305          		if (!c) return 0;			/* End of stream? */
    306          		if (c == '\r') break;		/* End of line? */
    307          		if (c == '\b' && i) {		/* Back space? */
    308          			i--;
   \                     ??xgets_2:
   \   000029 BE ..        LDW       X, S:?w4
   \   00002B 5A           DECW      X
   \   00002C BF ..        LDW       S:?w4, X
    309          			if (_LINE_ECHO) xputc(c);
   \   00002E 909F         LD        A, YL
   \   000030 8D ......    CALLF     xputc
    310          			continue;
    311          		}
   \                     ??xgets_1:
   \   000034 AE ....      LDW       X, #xfunc_in
   \   000037 8D ......    CALLF     L:?load24_e0_0x
   \   00003B 928D ....    CALLF     [S:?e0.e]
   \   00003F 5F           CLRW      X
   \   000040 97           LD        XL, A
   \   000041 9093         LDW       Y, X
   \   000043 93           LDW       X, Y
   \   000044 5D           TNZW      X
   \   000045 26 05        JRNE      L:??xgets_3
   \   000047 5F           CLRW      X
   \   000048 AC ......    JPF       L:?epilogue_l2_w6
   \                     ??xgets_3:
   \   00004C 93           LDW       X, Y
   \   00004D A3 000D      CPW       X, #0xd
   \   000050 26 14        JRNE      L:??xgets_4
    312          		if (c >= ' ' && i < len - 1) {	/* Visible chars */
    313          			buff[i++] = c;
    314          			if (_LINE_ECHO) xputc(c);
    315          		}
    316          	}
    317          	buff[i] = 0;	/* Terminate with a \0 */
   \   000052 BE ..        LDW       X, S:?w4
   \   000054 72BB ....    ADDW      X, S:?w6
   \   000058 4F           CLR       A
   \   000059 F7           LD        (X), A
    318          	if (_LINE_ECHO) xputc('\n');
   \   00005A A6 0A        LD        A, #0xa
   \   00005C 8D ......    CALLF     xputc
    319          	return 1;
   \   000060 5F           CLRW      X
   \   000061 5C           INCW      X
   \   000062 AC ......    JPF       L:?epilogue_l2_w6
   \                     ??xgets_4:
   \   000066 93           LDW       X, Y
   \   000067 A3 0008      CPW       X, #0x8
   \   00006A 26 05        JRNE      L:??xgets_5
   \   00006C BE ..        LDW       X, S:?w4
   \   00006E 5D           TNZW      X
   \   00006F 26 B8        JRNE      L:??xgets_2
   \                     ??xgets_5:
   \   000071 93           LDW       X, Y
   \   000072 A3 0020      CPW       X, #0x20
   \   000075 2F BD        JRSLT     L:??xgets_1
   \   000077 BE ..        LDW       X, S:?w5
   \   000079 5A           DECW      X
   \   00007A BF ..        LDW       S:?w0, X
   \   00007C BE ..        LDW       X, S:?w4
   \   00007E B3 ..        CPW       X, S:?w0
   \   000080 2E B2        JRSGE     L:??xgets_1
   \   000082 BE ..        LDW       X, S:?w4
   \   000084 72BB ....    ADDW      X, S:?w6
   \   000088 909F         LD        A, YL
   \   00008A F7           LD        (X), A
   \   00008B BE ..        LDW       X, S:?w4
   \   00008D 5C           INCW      X
   \   00008E BF ..        LDW       S:?w4, X
   \   000090 909F         LD        A, YL
   \   000092 8D ......    CALLF     xputc
   \   000096 20 9C        JRA       L:??xgets_1
    320          }
    321          
    322          

   \                                 In section .far_func.text, align 1
    323          int xfgets (	/* 0:End of stream, 1:A line arrived */
    324          	unsigned char (*func)(void),	/* Pointer to the input stream function */
    325          	char* buff,	/* Pointer to the buffer */
    326          	int len		/* Buffer length */
    327          )
    328          {
   \                     xfgets:
   \   000000 8D ......    CALLF     L:?push_e2
   \   000004 BF ..        LDW       S:?w2, X
    329          	unsigned char (*pf)(void);
    330          	int n;
    331          
    332          
    333          	pf = xfunc_in;			/* Save current input device */
   \   000006 AE ....      LDW       X, #xfunc_in
   \   000009 8D ......    CALLF     L:?load24_e2_0x
    334          	xfunc_in = func;		/* Switch input to specified device */
   \   00000D AE ....      LDW       X, #xfunc_in
   \   000010 8D ......    CALLF     L:?load24_0x_e0
    335          	n = xgets(buff, len);	/* Get a line */
   \   000014 BE ..        LDW       X, S:?w2
   \   000016 8D ......    CALLF     xgets
   \   00001A 9093         LDW       Y, X
    336          	xfunc_in = pf;			/* Restore input device */
   \   00001C AE ....      LDW       X, #xfunc_in
   \   00001F 8D ......    CALLF     L:?load24_0x_e2
    337          
    338          	return n;
   \   000023 93           LDW       X, Y
   \   000024 8D ......    CALLF     L:?pop_e2
   \   000028 87           RETF
    339          }
    340          
    341          
    342          /*----------------------------------------------*/
    343          /* Get a value of the string                    */
    344          /*----------------------------------------------*/
    345          /*	"123 -5   0x3ff 0b1111 0377  w "
    346          	    ^                           1st call returns 123 and next ptr
    347          	       ^                        2nd call returns -5 and next ptr
    348                             ^                3rd call returns 1023 and next ptr
    349                                    ^         4th call returns 15 and next ptr
    350                                         ^    5th call returns 255 and next ptr
    351                                            ^ 6th call fails and returns 0
    352          */
    353          

   \                                 In section .far_func.text, align 1
    354          int xatoi (			/* 0:Failed, 1:Successful */
    355          	char **str,		/* Pointer to pointer to the string */
    356          	long *res		/* Pointer to the valiable to store the value */
    357          )
    358          {
   \                     xatoi:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 BF ..        LDW       S:?w4, X
    359          	unsigned long val;
    360          	unsigned char c, r, s = 0;
   \   00000A 3F ..        CLR       S:?b11
    361          
    362          
    363          	*res = 0;
   \   00000C 5F           CLRW      X
   \   00000D BF ..        LDW       S:?w1, X
   \   00000F BF ..        LDW       S:?w0, X
   \   000011 93           LDW       X, Y
   \   000012 8D ......    CALLF     L:?load32_0x_l0
   \   000016 20 07        JRA       L:??xatoi_0
    364          
    365          	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
   \                     ??xatoi_1:
   \   000018 92CE ..      LDW       X, [S:?w4.w]
   \   00001B 5C           INCW      X
   \   00001C 92CF ..      LDW       [S:?w4.w], X
   \                     ??xatoi_0:
   \   00001F 92CE ..      LDW       X, [S:?w4.w]
   \   000022 F6           LD        A, (X)
   \   000023 B7 ..        LD        S:?b4, A
   \   000025 B6 ..        LD        A, S:?b4
   \   000027 A1 20        CP        A, #0x20
   \   000029 27 ED        JREQ      L:??xatoi_1
    366          
    367          	if (c == '-') {		/* negative? */
   \   00002B B6 ..        LD        A, S:?b4
   \   00002D A1 2D        CP        A, #0x2d
   \   00002F 26 0E        JRNE      L:??xatoi_2
    368          		s = 1;
   \   000031 35 01 ....   MOV       S:?b11, #0x1
    369          		c = *(++(*str));
   \   000035 92CE ..      LDW       X, [S:?w4.w]
   \   000038 5C           INCW      X
   \   000039 92CF ..      LDW       [S:?w4.w], X
   \   00003C F6           LD        A, (X)
   \   00003D B7 ..        LD        S:?b4, A
    370          	}
    371          
    372          	if (c == '0') {
   \                     ??xatoi_2:
   \   00003F B6 ..        LD        A, S:?b4
   \   000041 A1 30        CP        A, #0x30
   \   000043 26 53        JRNE      L:??xatoi_3
    373          		c = *(++(*str));
   \   000045 92CE ..      LDW       X, [S:?w4.w]
   \   000048 5C           INCW      X
   \   000049 92CF ..      LDW       [S:?w4.w], X
   \   00004C F6           LD        A, (X)
   \   00004D B7 ..        LD        S:?b4, A
    374          		switch (c) {
   \   00004F B6 ..        LD        A, S:?b4
   \   000051 A1 62        CP        A, #0x62
   \   000053 27 14        JREQ      L:??xatoi_4
   \   000055 A1 78        CP        A, #0x78
   \   000057 26 20        JRNE      L:??xatoi_5
    375          		case 'x':		/* hexdecimal */
    376          			r = 16; c = *(++(*str));
   \   000059 35 10 ....   MOV       S:?b10, #0x10
   \   00005D 92CE ..      LDW       X, [S:?w4.w]
   \   000060 5C           INCW      X
   \   000061 92CF ..      LDW       [S:?w4.w], X
   \   000064 F6           LD        A, (X)
   \   000065 B7 ..        LD        S:?b4, A
    377          			break;
   \   000067 20 40        JRA       L:??xatoi_6
    378          		case 'b':		/* binary */
    379          			r = 2; c = *(++(*str));
   \                     ??xatoi_4:
   \   000069 35 02 ....   MOV       S:?b10, #0x2
   \   00006D 92CE ..      LDW       X, [S:?w4.w]
   \   000070 5C           INCW      X
   \   000071 92CF ..      LDW       [S:?w4.w], X
   \   000074 F6           LD        A, (X)
   \   000075 B7 ..        LD        S:?b4, A
    380          			break;
   \   000077 20 30        JRA       L:??xatoi_6
    381          		default:
    382          			if (c <= ' ') return 1;	/* single zero */
   \                     ??xatoi_5:
   \   000079 B6 ..        LD        A, S:?b4
   \   00007B A1 21        CP        A, #0x21
   \   00007D 24 06        JRNC      L:??xatoi_7
   \   00007F 5F           CLRW      X
   \   000080 5C           INCW      X
   \   000081 AC ......    JPF       L:?epilogue_l2_l3
    383          			if (c < '0' || c > '9') return 0;	/* invalid char */
   \                     ??xatoi_7:
   \   000085 B6 ..        LD        A, S:?b4
   \   000087 A0 30        SUB       A, #0x30
   \   000089 A1 0A        CP        A, #0xa
   \   00008B 25 05        JRC       L:??xatoi_8
   \   00008D 5F           CLRW      X
   \   00008E AC ......    JPF       L:?epilogue_l2_l3
    384          			r = 8;		/* octal */
   \                     ??xatoi_8:
   \   000092 35 08 ....   MOV       S:?b10, #0x8
   \   000096 20 11        JRA       L:??xatoi_6
    385          		}
    386          	} else {
    387          		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
   \                     ??xatoi_3:
   \   000098 B6 ..        LD        A, S:?b4
   \   00009A A0 30        SUB       A, #0x30
   \   00009C A1 0A        CP        A, #0xa
   \   00009E 25 05        JRC       L:??xatoi_9
   \   0000A0 5F           CLRW      X
   \   0000A1 AC ......    JPF       L:?epilogue_l2_l3
    388          		r = 10;			/* decimal */
   \                     ??xatoi_9:
   \   0000A5 35 0A ....   MOV       S:?b10, #0xa
    389          	}
    390          
    391          	val = 0;
   \                     ??xatoi_6:
   \   0000A9 5F           CLRW      X
   \   0000AA BF ..        LDW       S:?w1, X
   \   0000AC BF ..        LDW       S:?w0, X
   \   0000AE 20 2E        JRA       L:??xatoi_10
    392          	while (c > ' ') {
    393          		if (c >= 'a') c -= 0x20;
    394          		c -= '0';
    395          		if (c >= 17) {
    396          			c -= 7;
    397          			if (c <= 9) return 0;	/* invalid char */
    398          		}
    399          		if (c >= r) return 0;		/* invalid char for current radix */
    400          		val = val * r + c;
   \                     ??xatoi_11:
   \   0000B0 5F           CLRW      X
   \   0000B1 41           EXG       A, XL
   \   0000B2 B6 ..        LD        A, S:?b4
   \   0000B4 41           EXG       A, XL
   \   0000B5 BF ..        LDW       S:?w3, X
   \   0000B7 5F           CLRW      X
   \   0000B8 BF ..        LDW       S:?w2, X
   \   0000BA 8D ......    CALLF     L:?mov_l3_l1
   \   0000BE 5F           CLRW      X
   \   0000BF 41           EXG       A, XL
   \   0000C0 B6 ..        LD        A, S:?b10
   \   0000C2 41           EXG       A, XL
   \   0000C3 BF ..        LDW       S:?w3, X
   \   0000C5 5F           CLRW      X
   \   0000C6 BF ..        LDW       S:?w2, X
   \   0000C8 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   0000CC 8D ......    CALLF     L:?mov_l1_l3
   \   0000D0 8D ......    CALLF     L:?add32_l0_l0_l1
    401          		c = *(++(*str));
   \   0000D4 92CE ..      LDW       X, [S:?w4.w]
   \   0000D7 5C           INCW      X
   \   0000D8 92CF ..      LDW       [S:?w4.w], X
   \   0000DB F6           LD        A, (X)
   \   0000DC B7 ..        LD        S:?b4, A
   \                     ??xatoi_10:
   \   0000DE B6 ..        LD        A, S:?b4
   \   0000E0 A1 21        CP        A, #0x21
   \   0000E2 25 34        JRC       L:??xatoi_12
   \   0000E4 B6 ..        LD        A, S:?b4
   \   0000E6 A1 61        CP        A, #0x61
   \   0000E8 25 06        JRC       L:??xatoi_13
   \   0000EA B6 ..        LD        A, S:?b4
   \   0000EC AB E0        ADD       A, #0xe0
   \   0000EE B7 ..        LD        S:?b4, A
   \                     ??xatoi_13:
   \   0000F0 B6 ..        LD        A, S:?b4
   \   0000F2 AB D0        ADD       A, #0xd0
   \   0000F4 B7 ..        LD        S:?b4, A
   \   0000F6 B6 ..        LD        A, S:?b4
   \   0000F8 A1 11        CP        A, #0x11
   \   0000FA 25 11        JRC       L:??xatoi_14
   \   0000FC B6 ..        LD        A, S:?b4
   \   0000FE AB F9        ADD       A, #0xf9
   \   000100 B7 ..        LD        S:?b4, A
   \   000102 B6 ..        LD        A, S:?b4
   \   000104 A1 0A        CP        A, #0xa
   \   000106 24 05        JRNC      L:??xatoi_14
   \   000108 5F           CLRW      X
   \   000109 AC ......    JPF       L:?epilogue_l2_l3
   \                     ??xatoi_14:
   \   00010D B6 ..        LD        A, S:?b4
   \   00010F B1 ..        CP        A, S:?b10
   \   000111 25 9D        JRC       L:??xatoi_11
   \   000113 5F           CLRW      X
   \   000114 AC ......    JPF       L:?epilogue_l2_l3
    402          	}
    403          	if (s) val = 0 - val;			/* apply sign if needed */
   \                     ??xatoi_12:
   \   000118 3D ..        TNZ       S:?b11
   \   00011A 27 04        JREQ      L:??xatoi_15
   \   00011C 8D ......    CALLF     L:?neg32_l0_l0
    404          
    405          	*res = val;
   \                     ??xatoi_15:
   \   000120 93           LDW       X, Y
   \   000121 8D ......    CALLF     L:?load32_0x_l0
    406          	return 1;
   \   000125 5F           CLRW      X
   \   000126 5C           INCW      X
   \   000127 AC ......    JPF       L:?epilogue_l2_l3
    407          }

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "%08lX ">`:
   \   000000 25 30 38 6C  DC8 "%08lX "
   \          58 20 00    

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " %02X">`:
   \   000000 20 25 30 32  DC8 " %02X"
   \          58 00       

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " %04X">`:
   \   000000 20 25 30 34  DC8 " %04X"
   \          58 00       

   \                                 In section .near.rodata, align 1
   \                     `?<Constant " %08LX">`:
   \   000000 20 25 30 38  DC8 " %08LX"
   \          4C 58 00    
    408          
    409          #endif /* _USE_XFUNC_IN */

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant " %02X">
       6  ?<Constant " %04X">
       7  ?<Constant " %08LX">
       7  ?<Constant "%08lX ">
       2  outptr
     211  put_dump
     299  xatoi
      41  xfgets
      44  xfprintf
      59  xfputs
       3  xfunc_in
       3  xfunc_out
     152  xgets
       6  xprintf
      51  xputc
      29  xputs
      28  xsprintf
     749  xvprintf

 
 1 669 bytes in section .far_func.text
     8 bytes in section .near.bss
    26 bytes in section .near.rodata
 
 1 669 bytes of CODE  memory
    26 bytes of CONST memory
     8 bytes of DATA  memory

Errors: none
Warnings: none
