###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:48 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_exti. #
#                    c                                                        #
#    Command line =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_exti. #
#                    c -e -Ol --no_cse --no_unroll --no_inline                #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model medium --data_model medium -o               #
#                    E:\hwpro-2016\20160627_L\iar\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8L15X_MD -lC             #
#                    E:\hwpro-2016\20160627_L\iar\Debug\List\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\ -I     #
#                    E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I             #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_exti.ls #
#                    t                                                        #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_exti.o   #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_exti.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the EXTI peripheral:
      9            *            - Interrupt sensitivity of GPIO ports/pins configuration
     10            *            - Interrupt status management
     11            *  @verbatim
     12            *  
     13            *          ===================================================================
     14            *                                 How to use this driver
     15            *          ===================================================================
     16            *          This driver provides functions to configure and initialize the EXTI 
     17            *          peripheral
     18            *          These functions are split in 2 groups: 
     19            *   
     20            *          1. EXTI configuration: this group includes all needed functions 
     21            *             to configure the EXTI GPIO ports and pins:
     22            *                   - Set GPIO pins sensitivity
     23            *                   - Select GPIO port, GPIO half port and set the GPIO port sensitivity
     24            *                         
     25            *          2. EXTI interrupt status management
     26            *                   - Get the interrupt status: set/reset
     27            *                   - Clear interrupt pending bits
     28            *
     29            *  @endverbatim
     30            *   
     31            ******************************************************************************
     32            * @attention
     33            *
     34            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     35            *
     36            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     37            * You may not use this file except in compliance with the License.
     38            * You may obtain a copy of the License at:
     39            *
     40            *        http://www.st.com/software_license_agreement_liberty_v2
     41            *
     42            * Unless required by applicable law or agreed to in writing, software 
     43            * distributed under the License is distributed on an "AS IS" BASIS, 
     44            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     45            * See the License for the specific language governing permissions and
     46            * limitations under the License.
     47            *
     48            ******************************************************************************
     49            */
     50          
     51          /* Includes ------------------------------------------------------------------*/
     52          #include "stm8l15x_exti.h"
     53          
     54          /** @addtogroup STM8L15x_StdPeriph_Driver
     55            * @{
     56            */
     57          
     58          /** @defgroup EXTI 
     59            * @brief EXTI driver modules
     60            * @{
     61            */ 
     62            
     63          /* Private typedef -----------------------------------------------------------*/
     64          /* Private define ------------------------------------------------------------*/
     65          /* Private macro -------------------------------------------------------------*/
     66          /* Private variables ---------------------------------------------------------*/
     67          /* Private function prototypes -----------------------------------------------*/
     68          /* Private functions ---------------------------------------------------------*/
     69          
     70          /** @defgroup EXTI_Private_Functions
     71            * @{
     72            */
     73          
     74          /** @defgroup EXTI_Group1 Interrupt sensitivity of GPIO ports/pins configuration
     75           *  @brief   Interrupt sensitivity of GPIO ports/pins configuration
     76           *
     77          @verbatim   
     78           ===============================================================================
     79                                   EXTI configuration functions
     80           ===============================================================================  
     81            
     82                 ===================================================================      
     83                                  EXTI Driver: how to configure EXTI
     84                 =================================================================== 
     85                 To use a GPIO pin as an interrupt source, follow theses steps:
     86                 
     87                   1. Configure the GPIO pin in input mode with interrupt enabled using
     88                      GPIO_Init()
     89                    
     90                   2. Configure the GPIO pin sensitivity (falling, rising...) using 
     91                      EXTI_SetPinSensitivity()
     92                    
     93                   3. Enable global interrupts using enableInterrupts()
     94                 
     95                   4. In the IRQ handler corresponding to the GPIO pin, clear the interrupt
     96                      pending bit using EXTI_ClearITPendingBit()
     97          
     98                 To use a GPIO port as an interrupt source, follows theses steps:  
     99                      
    100                   1. Configure the GPIO pins of the same port in input mode with interrupt
    101                      enabled using GPIO_Init()
    102                    
    103                   2. Configure the GPIO port sensitivity (falling, rising...) using 
    104                      EXTI_SetPortSensitivity()
    105                    
    106                   3. Select the GPIO port and the corresponding half port using  
    107                      EXTI_SelectPort() then EXTI_SetHalfPortSelection()
    108                  
    109                   4. Enable global interrupts using enableInterrupts()
    110                 
    111                   5. In the IRQ handler corresponding to the GPIO port, clear the interrupt
    112                      pending bit using EXTI_ClearITPendingBit()
    113          
    114          @endverbatim
    115            * @{
    116            */
    117          
    118          /**
    119            * @brief  Deinitializes the EXTI registers to their default reset value.
    120            * @param  None
    121            * @retval None
    122            */

   \                                 In section .far_func.text, align 1
    123          void EXTI_DeInit(void)
    124          {
    125            EXTI->CR1 = EXTI_CR1_RESET_VALUE;
   \                     EXTI_DeInit:
   \   000000 35 00 50A0   MOV       L:0x50a0, #0x0
    126            EXTI->CR2 = EXTI_CR2_RESET_VALUE;
   \   000004 35 00 50A1   MOV       L:0x50a1, #0x0
    127            EXTI->CR3 = EXTI_CR3_RESET_VALUE;
   \   000008 35 00 50A2   MOV       L:0x50a2, #0x0
    128            EXTI->CR4 = EXTI_CR4_RESET_VALUE;
   \   00000C 35 00 50AA   MOV       L:0x50aa, #0x0
    129            EXTI->SR1 = 0xFF; /* Setting SR1 bits in order to clear flags */
   \   000010 35 FF 50A3   MOV       L:0x50a3, #0xff
    130            EXTI->SR2 = 0xFF; /* Setting SR2 bits in order to clear flags */
   \   000014 35 FF 50A4   MOV       L:0x50a4, #0xff
    131            EXTI->CONF1 = EXTI_CONF1_RESET_VALUE;
   \   000018 35 00 50A5   MOV       L:0x50a5, #0x0
    132            EXTI->CONF2 = EXTI_CONF2_RESET_VALUE;
   \   00001C 35 00 50AB   MOV       L:0x50ab, #0x0
    133          }
   \   000020 87           RETF
    134          
    135          /**
    136            * @brief  Sets the external interrupt sensitivity of the selected pin.
    137            * @note   Global interrupts must be disabled before calling this function.
    138            * @note   The modification of external interrupt sensitivity is only possible
    139            *         when he interrupts are disabled.
    140            * @note   The normal behavior is to disable the interrupts before calling this
    141            *         function, and re-enable them after.
    142            * @param  EXTI_Pin : The pin to configure.
    143            *          This parameter can be one of the following values:
    144            *            @arg EXTI_Pin_0: GPIO Pin 0
    145            *            @arg EXTI_Pin_1: GPIO Pin 1
    146            *            @arg EXTI_Pin_2: GPIO Pin 2
    147            *            @arg EXTI_Pin_3: GPIO Pin 3
    148            *            @arg EXTI_Pin_4: GPIO Pin 4
    149            *            @arg EXTI_Pin_5: GPIO Pin 5
    150            *            @arg EXTI_Pin_6: GPIO Pin 6
    151            *            @arg EXTI_Pin_7: GPIO Pin 7              
    152            * @param  EXTI_Trigger : The external interrupt sensitivity value to set.
    153            *          This parameter can be one of the following values:
    154            *            @arg EXTI_Trigger_Falling_Low: Interrupt on Falling edge and Low level
    155            *            @arg EXTI_Trigger_Rising: Interrupt on Rising edge only  
    156            *            @arg EXTI_Trigger_Falling: Interrupt on Falling edge only 
    157            *            @arg EXTI_Trigger_Rising_Falling: Interrupt on Rising and Falling edges       
    158            * @retval None
    159            */

   \                                 In section .far_func.text, align 1
    160          void EXTI_SetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin, EXTI_Trigger_TypeDef EXTI_Trigger)
    161          {
   \                     EXTI_SetPinSensitivity:
   \   000000 B7 ..        LD        S:?b1, A
    162          
    163            /* Check function parameters */
    164            assert_param(IS_EXTI_PINNUM(EXTI_Pin));
    165            assert_param(IS_EXTI_TRIGGER(EXTI_Trigger));
    166          
    167            /* Clear port sensitivity bits */
    168            switch (EXTI_Pin)
   \   000002 B6 ..        LD        A, S:?b1
   \   000004 4D           TNZ       A
   \   000005 27 29        JREQ      L:??EXTI_SetPinSensitivity_0
   \   000007 A0 02        SUB       A, #0x2
   \   000009 27 40        JREQ      L:??EXTI_SetPinSensitivity_1
   \   00000B A0 02        SUB       A, #0x2
   \   00000D 27 57        JREQ      L:??EXTI_SetPinSensitivity_2
   \   00000F A0 02        SUB       A, #0x2
   \   000011 27 6E        JREQ      L:??EXTI_SetPinSensitivity_3
   \   000013 A0 0A        SUB       A, #0xa
   \   000015 26 03        JRNE      ??lb_0
   \   000017 CC ....      JP        L:??EXTI_SetPinSensitivity_4
   \                     ??lb_0:
   \   00001A A0 02        SUB       A, #0x2
   \   00001C 26 03        JRNE      ??lb_1
   \   00001E CC ....      JP        L:??EXTI_SetPinSensitivity_5
   \                     ??lb_1:
   \   000021 A0 02        SUB       A, #0x2
   \   000023 26 03        JRNE      ??lb_2
   \   000025 CC ....      JP        L:??EXTI_SetPinSensitivity_6
   \                     ??lb_2:
   \   000028 A0 02        SUB       A, #0x2
   \   00002A 26 03        JRNE      ??lb_3
   \   00002C CC ....      JP        L:??EXTI_SetPinSensitivity_7
   \                     ??lb_3:
   \   00002F 87           RETF
    169            {
    170              case EXTI_Pin_0:
    171                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P0IS);
   \                     ??EXTI_SetPinSensitivity_0:
   \   000030 C6 50A0      LD        A, L:0x50a0
   \   000033 A4 FC        AND       A, #0xfc
   \   000035 C7 50A0      LD        L:0x50a0, A
    172                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   000038 5F           CLRW      X
   \   000039 41           EXG       A, XL
   \   00003A B6 ..        LD        A, S:?b0
   \   00003C 41           EXG       A, XL
   \   00003D B6 ..        LD        A, S:?b1
   \   00003F 8D ......    CALLF     L:?sll16_x_x_a
   \   000043 9F           LD        A, XL
   \   000044 CA 50A0      OR        A, L:0x50a0
   \   000047 C7 50A0      LD        L:0x50a0, A
    173                break;
   \   00004A 87           RETF
    174              case EXTI_Pin_1:
    175                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P1IS);
   \                     ??EXTI_SetPinSensitivity_1:
   \   00004B C6 50A0      LD        A, L:0x50a0
   \   00004E A4 F3        AND       A, #0xf3
   \   000050 C7 50A0      LD        L:0x50a0, A
    176                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   000053 5F           CLRW      X
   \   000054 41           EXG       A, XL
   \   000055 B6 ..        LD        A, S:?b0
   \   000057 41           EXG       A, XL
   \   000058 B6 ..        LD        A, S:?b1
   \   00005A 8D ......    CALLF     L:?sll16_x_x_a
   \   00005E 9F           LD        A, XL
   \   00005F CA 50A0      OR        A, L:0x50a0
   \   000062 C7 50A0      LD        L:0x50a0, A
    177                break;
   \   000065 87           RETF
    178              case EXTI_Pin_2:
    179                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P2IS);
   \                     ??EXTI_SetPinSensitivity_2:
   \   000066 C6 50A0      LD        A, L:0x50a0
   \   000069 A4 CF        AND       A, #0xcf
   \   00006B C7 50A0      LD        L:0x50a0, A
    180                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   00006E 5F           CLRW      X
   \   00006F 41           EXG       A, XL
   \   000070 B6 ..        LD        A, S:?b0
   \   000072 41           EXG       A, XL
   \   000073 B6 ..        LD        A, S:?b1
   \   000075 8D ......    CALLF     L:?sll16_x_x_a
   \   000079 9F           LD        A, XL
   \   00007A CA 50A0      OR        A, L:0x50a0
   \   00007D C7 50A0      LD        L:0x50a0, A
    181                break;
   \   000080 87           RETF
    182              case EXTI_Pin_3:
    183                EXTI->CR1 &=  (uint8_t)(~EXTI_CR1_P3IS);
   \                     ??EXTI_SetPinSensitivity_3:
   \   000081 C6 50A0      LD        A, L:0x50a0
   \   000084 A4 3F        AND       A, #0x3f
   \   000086 C7 50A0      LD        L:0x50a0, A
    184                EXTI->CR1 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Pin);
   \   000089 5F           CLRW      X
   \   00008A 41           EXG       A, XL
   \   00008B B6 ..        LD        A, S:?b0
   \   00008D 41           EXG       A, XL
   \   00008E B6 ..        LD        A, S:?b1
   \   000090 8D ......    CALLF     L:?sll16_x_x_a
   \   000094 9F           LD        A, XL
   \   000095 CA 50A0      OR        A, L:0x50a0
   \   000098 C7 50A0      LD        L:0x50a0, A
    185                break;
   \   00009B 87           RETF
    186              case EXTI_Pin_4:
    187                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P4IS);
   \                     ??EXTI_SetPinSensitivity_4:
   \   00009C C6 50A1      LD        A, L:0x50a1
   \   00009F A4 FC        AND       A, #0xfc
   \   0000A1 C7 50A1      LD        L:0x50a1, A
    188                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   0000A4 B6 ..        LD        A, S:?b1
   \   0000A6 A4 EF        AND       A, #0xef
   \   0000A8 5F           CLRW      X
   \   0000A9 41           EXG       A, XL
   \   0000AA B6 ..        LD        A, S:?b0
   \   0000AC 41           EXG       A, XL
   \   0000AD 8D ......    CALLF     L:?sll16_x_x_a
   \   0000B1 9F           LD        A, XL
   \   0000B2 CA 50A1      OR        A, L:0x50a1
   \   0000B5 C7 50A1      LD        L:0x50a1, A
    189                break;
   \   0000B8 87           RETF
    190              case EXTI_Pin_5:
    191                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P5IS);
   \                     ??EXTI_SetPinSensitivity_5:
   \   0000B9 C6 50A1      LD        A, L:0x50a1
   \   0000BC A4 F3        AND       A, #0xf3
   \   0000BE C7 50A1      LD        L:0x50a1, A
    192                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   0000C1 B6 ..        LD        A, S:?b1
   \   0000C3 A4 EF        AND       A, #0xef
   \   0000C5 5F           CLRW      X
   \   0000C6 41           EXG       A, XL
   \   0000C7 B6 ..        LD        A, S:?b0
   \   0000C9 41           EXG       A, XL
   \   0000CA 8D ......    CALLF     L:?sll16_x_x_a
   \   0000CE 9F           LD        A, XL
   \   0000CF CA 50A1      OR        A, L:0x50a1
   \   0000D2 C7 50A1      LD        L:0x50a1, A
    193                break;
   \   0000D5 87           RETF
    194              case EXTI_Pin_6:
    195                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P6IS);
   \                     ??EXTI_SetPinSensitivity_6:
   \   0000D6 C6 50A1      LD        A, L:0x50a1
   \   0000D9 A4 CF        AND       A, #0xcf
   \   0000DB C7 50A1      LD        L:0x50a1, A
    196                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   0000DE B6 ..        LD        A, S:?b1
   \   0000E0 A4 EF        AND       A, #0xef
   \   0000E2 5F           CLRW      X
   \   0000E3 41           EXG       A, XL
   \   0000E4 B6 ..        LD        A, S:?b0
   \   0000E6 41           EXG       A, XL
   \   0000E7 8D ......    CALLF     L:?sll16_x_x_a
   \   0000EB 9F           LD        A, XL
   \   0000EC CA 50A1      OR        A, L:0x50a1
   \   0000EF C7 50A1      LD        L:0x50a1, A
    197                break;
   \   0000F2 87           RETF
    198              case EXTI_Pin_7:
    199                EXTI->CR2 &=  (uint8_t)(~EXTI_CR2_P7IS);
   \                     ??EXTI_SetPinSensitivity_7:
   \   0000F3 C6 50A1      LD        A, L:0x50a1
   \   0000F6 A4 3F        AND       A, #0x3f
   \   0000F8 C7 50A1      LD        L:0x50a1, A
    200                EXTI->CR2 |= (uint8_t)((uint8_t)(EXTI_Trigger) << ((uint8_t)EXTI_Pin & (uint8_t)0xEF));
   \   0000FB B6 ..        LD        A, S:?b1
   \   0000FD A4 EF        AND       A, #0xef
   \   0000FF 5F           CLRW      X
   \   000100 41           EXG       A, XL
   \   000101 B6 ..        LD        A, S:?b0
   \   000103 41           EXG       A, XL
   \   000104 8D ......    CALLF     L:?sll16_x_x_a
   \   000108 9F           LD        A, XL
   \   000109 CA 50A1      OR        A, L:0x50a1
   \   00010C C7 50A1      LD        L:0x50a1, A
    201                break;
    202              default:
    203                break;
    204            }
    205          }
   \   00010F 87           RETF
    206          
    207          /**
    208            * @brief  Selects the port interrupt selection.
    209            * @param  EXTI_Port : The port number to access.
    210            *          This parameter can be one of the following values:
    211            *            @arg EXTI_Port_B: GPIO Port B
    212            *            @arg EXTI_Port_D: GPIO Port D
    213            *            @arg EXTI_Port_E: GPIO Port E
    214            *            @arg EXTI_Port_F: GPIO Port F
    215            *            @arg EXTI_Port_G: GPIO Port G
    216            *            @arg EXTI_Port_H: GPIO Port H   
    217            * @retval None
    218            */

   \                                 In section .far_func.text, align 1
    219          void EXTI_SelectPort(EXTI_Port_TypeDef EXTI_Port)
    220          {
    221            /* Check function parameter */
    222            assert_param(IS_EXTI_PORT(EXTI_Port));
    223          
    224            if (EXTI_Port == EXTI_Port_B)
   \                     EXTI_SelectPort:
   \   000000 4D           TNZ       A
   \   000001 26 05        JRNE      L:??EXTI_SelectPort_0
    225            {
    226              /* Select Port B by resetting PGBS bit in CONF2 register */
    227              EXTI->CONF2 &= (uint8_t) (~EXTI_CONF2_PGBS);
   \   000003 721B 50AB    BRES      L:0x50ab, #0x5
   \   000007 87           RETF
    228            }
    229            else if (EXTI_Port == EXTI_Port_D)
   \                     ??EXTI_SelectPort_0:
   \   000008 A1 02        CP        A, #0x2
   \   00000A 26 05        JRNE      L:??EXTI_SelectPort_1
    230            {
    231              /* Select Port D by resetting PHDS bit in CONF2 register */
    232              EXTI->CONF2 &= (uint8_t) (~EXTI_CONF2_PHDS);
   \   00000C 721D 50AB    BRES      L:0x50ab, #0x6
   \   000010 87           RETF
    233            }
    234            else if (EXTI_Port == EXTI_Port_E)
   \                     ??EXTI_SelectPort_1:
   \   000011 A1 04        CP        A, #0x4
   \   000013 26 05        JRNE      L:??EXTI_SelectPort_2
    235            {
    236              /* Select Port E by resetting PFES bit in CONF1 register */
    237              EXTI->CONF1 &= (uint8_t) (~EXTI_CONF1_PFES);
   \   000015 721F 50A5    BRES      L:0x50a5, #0x7
   \   000019 87           RETF
    238            }
    239            else if (EXTI_Port == EXTI_Port_F)
   \                     ??EXTI_SelectPort_2:
   \   00001A A1 06        CP        A, #0x6
   \   00001C 26 05        JRNE      L:??EXTI_SelectPort_3
    240            {
    241              /* Select Port F by setting PFES bit in CONF1 register */
    242              EXTI->CONF1 |= (uint8_t) (EXTI_CONF1_PFES);
   \   00001E 721E 50A5    BSET      L:0x50a5, #0x7
   \   000022 87           RETF
    243            }
    244            else if (EXTI_Port == EXTI_Port_G)
   \                     ??EXTI_SelectPort_3:
   \   000023 A1 10        CP        A, #0x10
   \   000025 26 05        JRNE      L:??EXTI_SelectPort_4
    245            {
    246              /* Select Port G by setting PGBS bit in CONF2 register */
    247              EXTI->CONF2 |= (uint8_t) (EXTI_CONF2_PGBS);
   \   000027 721A 50AB    BSET      L:0x50ab, #0x5
   \   00002B 87           RETF
    248            }
    249            else /* EXTI_Port is EXTI_Port_H */
    250            {
    251              /* Select Port H by setting PHDS bit in CONF2 register */
    252              EXTI->CONF2 |= (uint8_t) (EXTI_CONF2_PHDS);
   \                     ??EXTI_SelectPort_4:
   \   00002C 721C 50AB    BSET      L:0x50ab, #0x6
    253            }
    254          }
   \   000030 87           RETF
    255          
    256          /**
    257            * @brief  Configures the half port interrupt selection.
    258            * @note   This function should be called once the port sensitivity configured,
    259            *         otherwise it will not have any effect on the port external interrupt.
    260            * @note   This function should be called after EXTI_SelectPort() function which
    261            *         selects the port to be used otherwise ports are selected by default
    262            * @param  EXTI_HalfPort : The port part to access (MSB or LSB).
    263            *          This parameter can be one of the following values:
    264            *            @arg EXTI_HalfPort_B_LSB: Interrupt selector PB(3:0)
    265            *            @arg EXTI_HalfPort_B_MSB: Interrupt selector PB(7:4)
    266            *            @arg EXTI_HalfPort_D_LSB: Interrupt selector PD(3:0)
    267            *            @arg EXTI_HalfPort_D_MSB: Interrupt selector PD(7:4)
    268            *            @arg EXTI_HalfPort_E_LSB: Interrupt selector PE(3:0)
    269            *            @arg EXTI_HalfPort_E_MSB: Interrupt selector PE(7:4)
    270            *            @arg EXTI_HalfPort_F_LSB: Interrupt selector PF(3:0)
    271            *            @arg EXTI_HalfPort_F_MSB: Interrupt selector PF(7:4)
    272            *            @arg EXTI_HalfPort_G_LSB: Interrupt selector PG(3:0)
    273            *            @arg EXTI_HalfPort_G_MSB: Interrupt selector PG(7:4)
    274            *            @arg EXTI_HalfPort_H_LSB: Interrupt selector PH(3:0)
    275            *            @arg EXTI_HalfPort_H_MSB: Interrupt selector PH(7:4)                      
    276            * @param  NewState : The external interrupt new state.
    277              *         This parameter can be: ENABLE or DISABLE.
    278            * @retval None
    279            */

   \                                 In section .far_func.text, align 1
    280          void EXTI_SetHalfPortSelection(EXTI_HalfPort_TypeDef EXTI_HalfPort,
    281                                         FunctionalState NewState)
    282          {
   \                     EXTI_SetHalfPortSelection:
   \   000000 B7 ..        LD        S:?b1, A
    283            /* Check function parameters */
    284            assert_param(IS_EXTI_HALFPORT(EXTI_HalfPort));
    285            assert_param(IS_FUNCTIONAL_STATE(NewState));
    286          
    287            if ((EXTI_HalfPort & 0x80) == 0x00)
   \   000002 B6 ..        LD        A, S:?b1
   \   000004 A4 80        AND       A, #0x80
   \   000006 A1 00        CP        A, #0x0
   \   000008 26 18        JRNE      L:??EXTI_SetHalfPortSelection_0
    288            {
    289              if (NewState != DISABLE)
   \   00000A 3D ..        TNZ       S:?b0
   \   00000C 27 09        JREQ      L:??EXTI_SetHalfPortSelection_1
    290              {
    291                /* Enable port interrupt selector */
    292                EXTI->CONF1 |= (uint8_t)EXTI_HalfPort;
   \   00000E B6 ..        LD        A, S:?b1
   \   000010 CA 50A5      OR        A, L:0x50a5
   \   000013 C7 50A5      LD        L:0x50a5, A
   \   000016 87           RETF
    293              }
    294              else /*NewState == DISABLE */
    295              {
    296                /* Disable port interrupt selector */
    297                EXTI->CONF1 &= (uint8_t)(~(uint8_t)EXTI_HalfPort);
   \                     ??EXTI_SetHalfPortSelection_1:
   \   000017 33 ..        CPL       S:?b1
   \   000019 B6 ..        LD        A, S:?b1
   \   00001B C4 50A5      AND       A, L:0x50a5
   \   00001E C7 50A5      LD        L:0x50a5, A
   \   000021 87           RETF
    298              }
    299            }
    300            else
    301            {
    302              if (NewState != DISABLE)
   \                     ??EXTI_SetHalfPortSelection_0:
   \   000022 3D ..        TNZ       S:?b0
   \   000024 27 0B        JREQ      L:??EXTI_SetHalfPortSelection_2
    303              {
    304                /* Enable port interrupt selector */
    305                EXTI->CONF2 |= (uint8_t)(EXTI_HalfPort & (uint8_t)0x7F);
   \   000026 B6 ..        LD        A, S:?b1
   \   000028 A4 7F        AND       A, #0x7f
   \   00002A CA 50AB      OR        A, L:0x50ab
   \   00002D C7 50AB      LD        L:0x50ab, A
   \   000030 87           RETF
    306              }
    307              else /*NewState == DISABLE */
    308              {
    309                /* Disable port interrupt selector */
    310                EXTI->CONF2 &= (uint8_t)(~(uint8_t) (EXTI_HalfPort & (uint8_t)0x7F));
   \                     ??EXTI_SetHalfPortSelection_2:
   \   000031 B6 ..        LD        A, S:?b1
   \   000033 A4 7F        AND       A, #0x7f
   \   000035 43           CPL       A
   \   000036 C4 50AB      AND       A, L:0x50ab
   \   000039 C7 50AB      LD        L:0x50ab, A
    311              }
    312            }
    313          }
   \   00003C 87           RETF
    314          
    315          /**
    316            * @brief  Sets the external interrupt sensitivity of the selected port.
    317            * @note   Global interrupts must be disabled before calling this function.
    318            * @note   The modification of external interrupt sensitivity is only possible
    319            *         when the interrupts are disabled.
    320            * @note   The normal behavior is to disable the interrupts before calling this
    321            *         function, and re-enable them after.
    322            * @param  EXTI_Port : The port number to access.
    323            *          This parameter can be one of the following values:
    324            *            @arg EXTI_Port_B: GPIO Port B
    325            *            @arg EXTI_Port_D: GPIO Port D
    326            *            @arg EXTI_Port_E: GPIO Port E
    327            *            @arg EXTI_Port_F: GPIO Port F
    328            *            @arg EXTI_Port_G: GPIO Port G
    329            *            @arg EXTI_Port_H: GPIO Port H  
    330            * @param  EXTI_Trigger : The external interrupt sensitivity value to set.
    331            *          This parameter can be one of the following values:
    332            *            @arg EXTI_Trigger_Falling_Low: Interrupt on Falling edge and Low level
    333            *            @arg EXTI_Trigger_Rising: Interrupt on Rising edge only  
    334            *            @arg EXTI_Trigger_Falling: Interrupt on Falling edge only 
    335            *            @arg EXTI_Trigger_Rising_Falling: Interrupt on Rising and Falling edges 
    336            * @retval None
    337            */

   \                                 In section .far_func.text, align 1
    338          void EXTI_SetPortSensitivity(EXTI_Port_TypeDef EXTI_Port,
    339                                       EXTI_Trigger_TypeDef EXTI_Trigger)
    340          {
   \                     EXTI_SetPortSensitivity:
   \   000000 B7 ..        LD        S:?b1, A
    341            /* Check function parameters */
    342            assert_param(IS_EXTI_PORT(EXTI_Port));
    343            assert_param(IS_EXTI_TRIGGER(EXTI_Trigger));
    344          
    345            /* Ceck if selected port is in EXTI_CR3 register */
    346            if ((EXTI_Port & 0xF0) == 0x00)
   \   000002 B6 ..        LD        A, S:?b1
   \   000004 A4 F0        AND       A, #0xf0
   \   000006 A1 00        CP        A, #0x0
   \   000008 26 24        JRNE      L:??EXTI_SetPortSensitivity_0
    347            {
    348              /* Reset the trigger bits corresponding to EXTI_Port */
    349              EXTI->CR3 &= (uint8_t) (~(uint8_t)((uint8_t)0x03 << EXTI_Port));
   \   00000A AE 0003      LDW       X, #0x3
   \   00000D B6 ..        LD        A, S:?b1
   \   00000F 8D ......    CALLF     L:?sll16_x_x_a
   \   000013 9F           LD        A, XL
   \   000014 43           CPL       A
   \   000015 C4 50A2      AND       A, L:0x50a2
   \   000018 C7 50A2      LD        L:0x50a2, A
    350              /* Write EXTI port trigger */
    351              EXTI->CR3 |= (uint8_t)((uint8_t)(EXTI_Trigger) << EXTI_Port);
   \   00001B 5F           CLRW      X
   \   00001C 41           EXG       A, XL
   \   00001D B6 ..        LD        A, S:?b0
   \   00001F 41           EXG       A, XL
   \   000020 B6 ..        LD        A, S:?b1
   \   000022 8D ......    CALLF     L:?sll16_x_x_a
   \   000026 9F           LD        A, XL
   \   000027 CA 50A2      OR        A, L:0x50a2
   \   00002A C7 50A2      LD        L:0x50a2, A
   \   00002D 87           RETF
    352            }
    353            else /* selected port is in EXTI_CR4 register */
    354            {
    355              /* Reset the trigger bits corresponding to EXTI_Port */
    356              EXTI->CR4 &= (uint8_t) (~(uint8_t)((uint8_t)0x03 << (EXTI_Port & 0x0F)));
   \                     ??EXTI_SetPortSensitivity_0:
   \   00002E B6 ..        LD        A, S:?b1
   \   000030 A4 0F        AND       A, #0xf
   \   000032 AE 0003      LDW       X, #0x3
   \   000035 8D ......    CALLF     L:?sll16_x_x_a
   \   000039 9F           LD        A, XL
   \   00003A 43           CPL       A
   \   00003B C4 50AA      AND       A, L:0x50aa
   \   00003E C7 50AA      LD        L:0x50aa, A
    357              /* Write EXTI port trigger */
    358              EXTI->CR4 |= (uint8_t)(EXTI_Trigger << (EXTI_Port & 0x0F));
   \   000041 B6 ..        LD        A, S:?b1
   \   000043 A4 0F        AND       A, #0xf
   \   000045 5F           CLRW      X
   \   000046 41           EXG       A, XL
   \   000047 B6 ..        LD        A, S:?b0
   \   000049 41           EXG       A, XL
   \   00004A 8D ......    CALLF     L:?sll16_x_x_a
   \   00004E 9F           LD        A, XL
   \   00004F CA 50AA      OR        A, L:0x50aa
   \   000052 C7 50AA      LD        L:0x50aa, A
    359            }
    360          }
   \   000055 87           RETF
    361          
    362          /**
    363            * @brief  Gets the external interrupt sensitivity of the selected pin.
    364            * @param  EXTI_Pin : The pin number to access.
    365            *          This parameter can be one of the following values:
    366            *            @arg EXTI_Pin_0: GPIO Pin 0
    367            *            @arg EXTI_Pin_1: GPIO Pin 1
    368            *            @arg EXTI_Pin_2: GPIO Pin 2
    369            *            @arg EXTI_Pin_3: GPIO Pin 3
    370            *            @arg EXTI_Pin_4: GPIO Pin 4
    371            *            @arg EXTI_Pin_5: GPIO Pin 5
    372            *            @arg EXTI_Pin_6: GPIO Pin 6
    373            *            @arg EXTI_Pin_7: GPIO Pin 7 
    374            * @retval The external interrupt sensitivity of the selected port.
    375            */

   \                                 In section .far_func.text, align 1
    376          EXTI_Trigger_TypeDef EXTI_GetPinSensitivity(EXTI_Pin_TypeDef EXTI_Pin)
    377          {
    378            uint8_t value = 0;
   \                     EXTI_GetPinSensitivity:
   \   000000 3F ..        CLR       S:?b0
    379          
    380            /* Check function parameters */
    381            assert_param(IS_EXTI_PINNUM(EXTI_Pin));
    382          
    383            switch (EXTI_Pin)
   \   000002 4D           TNZ       A
   \   000003 27 1E        JREQ      L:??EXTI_GetPinSensitivity_0
   \   000005 A0 02        SUB       A, #0x2
   \   000007 27 23        JREQ      L:??EXTI_GetPinSensitivity_1
   \   000009 A0 02        SUB       A, #0x2
   \   00000B 27 2A        JREQ      L:??EXTI_GetPinSensitivity_2
   \   00000D A0 02        SUB       A, #0x2
   \   00000F 27 32        JREQ      L:??EXTI_GetPinSensitivity_3
   \   000011 A0 0A        SUB       A, #0xa
   \   000013 27 39        JREQ      L:??EXTI_GetPinSensitivity_4
   \   000015 A0 02        SUB       A, #0x2
   \   000017 27 3E        JREQ      L:??EXTI_GetPinSensitivity_5
   \   000019 A0 02        SUB       A, #0x2
   \   00001B 27 45        JREQ      L:??EXTI_GetPinSensitivity_6
   \   00001D A0 02        SUB       A, #0x2
   \   00001F 27 4D        JREQ      L:??EXTI_GetPinSensitivity_7
   \   000021 20 54        JRA       L:??EXTI_GetPinSensitivity_8
    384            {
    385              case EXTI_Pin_0:
    386                value = (uint8_t)(EXTI->CR1 & EXTI_CR1_P0IS);
   \                     ??EXTI_GetPinSensitivity_0:
   \   000023 C6 50A0      LD        A, L:0x50a0
   \   000026 A4 03        AND       A, #0x3
   \   000028 B7 ..        LD        S:?b0, A
    387                break;
   \   00002A 20 4B        JRA       L:??EXTI_GetPinSensitivity_8
    388              case EXTI_Pin_1:
    389                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P1IS) >> EXTI_Pin_1);
   \                     ??EXTI_GetPinSensitivity_1:
   \   00002C C6 50A0      LD        A, L:0x50a0
   \   00002F A4 0C        AND       A, #0xc
   \   000031 44           SRL       A
   \   000032 44           SRL       A
   \   000033 B7 ..        LD        S:?b0, A
    390                break;
   \   000035 20 40        JRA       L:??EXTI_GetPinSensitivity_8
    391              case EXTI_Pin_2:
    392                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P2IS) >> EXTI_Pin_2);
   \                     ??EXTI_GetPinSensitivity_2:
   \   000037 C6 50A0      LD        A, L:0x50a0
   \   00003A A4 30        AND       A, #0x30
   \   00003C 4E           SWAP      A
   \   00003D A4 0F        AND       A, #0xf
   \   00003F B7 ..        LD        S:?b0, A
    393                break;
   \   000041 20 34        JRA       L:??EXTI_GetPinSensitivity_8
    394              case EXTI_Pin_3:
    395                value = (uint8_t)((uint8_t)(EXTI->CR1 & EXTI_CR1_P3IS) >> EXTI_Pin_3);
   \                     ??EXTI_GetPinSensitivity_3:
   \   000043 C6 50A0      LD        A, L:0x50a0
   \   000046 8D ......    CALLF     L:?srl8_a_a_6
   \   00004A B7 ..        LD        S:?b0, A
    396                break;
   \   00004C 20 29        JRA       L:??EXTI_GetPinSensitivity_8
    397              case EXTI_Pin_4:
    398                value = (uint8_t)(EXTI->CR2 & EXTI_CR2_P4IS);
   \                     ??EXTI_GetPinSensitivity_4:
   \   00004E C6 50A1      LD        A, L:0x50a1
   \   000051 A4 03        AND       A, #0x3
   \   000053 B7 ..        LD        S:?b0, A
    399                break;
   \   000055 20 20        JRA       L:??EXTI_GetPinSensitivity_8
    400              case EXTI_Pin_5:
    401                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P5IS) >> ((uint8_t)EXTI_Pin_5 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_5:
   \   000057 C6 50A1      LD        A, L:0x50a1
   \   00005A A4 0C        AND       A, #0xc
   \   00005C 44           SRL       A
   \   00005D 44           SRL       A
   \   00005E B7 ..        LD        S:?b0, A
    402                break;
   \   000060 20 15        JRA       L:??EXTI_GetPinSensitivity_8
    403              case EXTI_Pin_6:
    404                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P6IS) >> ((uint8_t)EXTI_Pin_6 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_6:
   \   000062 C6 50A1      LD        A, L:0x50a1
   \   000065 A4 30        AND       A, #0x30
   \   000067 4E           SWAP      A
   \   000068 A4 0F        AND       A, #0xf
   \   00006A B7 ..        LD        S:?b0, A
    405                break;
   \   00006C 20 09        JRA       L:??EXTI_GetPinSensitivity_8
    406              case EXTI_Pin_7:
    407                value = (uint8_t)((uint8_t)(EXTI->CR2 & EXTI_CR2_P7IS) >> ((uint8_t)EXTI_Pin_7 & (uint8_t)0x0F));
   \                     ??EXTI_GetPinSensitivity_7:
   \   00006E C6 50A1      LD        A, L:0x50a1
   \   000071 8D ......    CALLF     L:?srl8_a_a_6
   \   000075 B7 ..        LD        S:?b0, A
    408                break;
    409              default:
    410                break;
    411            }
    412            return((EXTI_Trigger_TypeDef)value);
   \                     ??EXTI_GetPinSensitivity_8:
   \   000077 B6 ..        LD        A, S:?b0
   \   000079 87           RETF
    413          }
    414          
    415          /**
    416            * @brief  Gets the external interrupt sensitivity of the selected port.
    417            * @param  EXTI_Port : The port number to access.
    418            *          This parameter can be one of the following values:
    419            *            @arg EXTI_Port_B: GPIO Port B
    420            *            @arg EXTI_Port_D: GPIO Port D
    421            *            @arg EXTI_Port_E: GPIO Port E
    422            *            @arg EXTI_Port_F: GPIO Port F
    423            *            @arg EXTI_Port_G: GPIO Port G
    424            *            @arg EXTI_Port_H: GPIO Port H  
    425            * @retval The external interrupt sensitivity of the selected port.
    426            */

   \                                 In section .far_func.text, align 1
    427          EXTI_Trigger_TypeDef EXTI_GetPortSensitivity(EXTI_Port_TypeDef EXTI_Port)
    428          {
   \                     EXTI_GetPortSensitivity:
   \   000000 B7 ..        LD        S:?b1, A
    429            uint8_t portsensitivity = 0;
   \   000002 3F ..        CLR       S:?b0
    430          
    431            /* Check function parameters */
    432            assert_param(IS_EXTI_PORT(EXTI_Port));
    433          
    434            /* Check if selected port is in EXTI_CR3 */
    435            if ((EXTI_Port & 0xF0) == 0x00)
   \   000004 B6 ..        LD        A, S:?b1
   \   000006 A4 F0        AND       A, #0xf0
   \   000008 A1 00        CP        A, #0x0
   \   00000A 26 12        JRNE      L:??EXTI_GetPortSensitivity_0
    436            {
    437              /* Get port sensitivity */
    438              portsensitivity = (uint8_t)((uint8_t)0x03 & (uint8_t)(EXTI->CR3 >> EXTI_Port));
   \   00000C C6 50A2      LD        A, L:0x50a2
   \   00000F 5F           CLRW      X
   \   000010 97           LD        XL, A
   \   000011 B6 ..        LD        A, S:?b1
   \   000013 8D ......    CALLF     L:?sra16_x_x_a
   \   000017 9F           LD        A, XL
   \   000018 A4 03        AND       A, #0x3
   \   00001A B7 ..        LD        S:?b0, A
   \   00001C 20 16        JRA       L:??EXTI_GetPortSensitivity_1
    439            }
    440            /* selected port is in EXTI_CR4 */
    441            else
    442            {
    443              /* Get port sensitivity */
    444              portsensitivity = (uint8_t)((uint8_t)0x03 & (uint8_t)(EXTI->CR4 >> (EXTI_Port & 0x0F)));
   \                     ??EXTI_GetPortSensitivity_0:
   \   00001E B6 ..        LD        A, S:?b1
   \   000020 A4 0F        AND       A, #0xf
   \   000022 B7 ..        LD        S:?b0, A
   \   000024 C6 50AA      LD        A, L:0x50aa
   \   000027 5F           CLRW      X
   \   000028 97           LD        XL, A
   \   000029 B6 ..        LD        A, S:?b0
   \   00002B 8D ......    CALLF     L:?sra16_x_x_a
   \   00002F 9F           LD        A, XL
   \   000030 A4 03        AND       A, #0x3
   \   000032 B7 ..        LD        S:?b0, A
    445            }
    446          
    447            return((EXTI_Trigger_TypeDef)portsensitivity);
   \                     ??EXTI_GetPortSensitivity_1:
   \   000034 B6 ..        LD        A, S:?b0
   \   000036 87           RETF
    448          }
    449          
    450          /**
    451            * @}
    452            */
    453          
    454          /** @defgroup EXTI_Group2 EXTI Interrupt status management functions
    455           *  @brief    EXTI Interrupt status management functions
    456           *
    457          @verbatim   
    458           ===============================================================================
    459                             EXTI Interrupt status management functions
    460           ===============================================================================  
    461          
    462          @endverbatim
    463            * @{
    464            */
    465          
    466          /**
    467            * @brief  Gets the external interrupt status.
    468            * @param  EXTI_IT : Specifies the interrupt to read.
    469            *          This parameter can be one of the following values:
    470            *            @arg EXTI_IT_Pin0: GPIO Pin 0
    471            *            @arg EXTI_IT_Pin1: GPIO Pin 1
    472            *            @arg EXTI_IT_Pin2: GPIO Pin 2
    473            *            @arg EXTI_IT_Pin3: GPIO Pin 3
    474            *            @arg EXTI_IT_Pin4: GPIO Pin 4
    475            *            @arg EXTI_IT_Pin5: GPIO Pin 5
    476            *            @arg EXTI_IT_Pin6: GPIO Pin 6
    477            *            @arg EXTI_IT_Pin7: GPIO Pin 7 
    478            *            @arg EXTI_IT_PortB: GPIO Port B
    479            *            @arg EXTI_IT_PortD: GPIO Port D
    480            *            @arg EXTI_IT_PortE: GPIO Port E
    481            *            @arg EXTI_IT_PortF: GPIO Port F
    482            *            @arg EXTI_IT_PortG: GPIO Port G
    483            *            @arg EXTI_IT_PortH: GPIO Port H           
    484            * @retval The status of the specified interrupt.
    485            *         This parameter can be a SET or RESET
    486            */

   \                                 In section .far_func.text, align 1
    487          ITStatus EXTI_GetITStatus(EXTI_IT_TypeDef EXTI_IT)
    488          {
    489            ITStatus status = RESET;
   \                     EXTI_GetITStatus:
   \   000000 4F           CLR       A
    490            /* Check function parameters */
    491            assert_param(IS_EXTI_ITPENDINGBIT(EXTI_IT));
    492          
    493            if (((uint16_t)EXTI_IT & (uint16_t)0xFF00) == 0x0100)
   \   000001 9093         LDW       Y, X
   \   000003 51           EXGW      X, Y
   \   000004 02           RLWA      X, A
   \   000005 A4 FF        AND       A, #0xff
   \   000007 02           RLWA      X, A
   \   000008 A4 00        AND       A, #0x0
   \   00000A 02           RLWA      X, A
   \   00000B 51           EXGW      X, Y
   \   00000C 90A3 0100    CPW       Y, #0x100
   \   000010 26 05        JRNE      L:??EXTI_GetITStatus_0
    494            {
    495              status = (ITStatus)(EXTI->SR2 & (uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF));
   \   000012 9F           LD        A, XL
   \   000013 C4 50A4      AND       A, L:0x50a4
   \   000016 87           RETF
    496            }
    497            else
    498            {
    499              status = (ITStatus)(EXTI->SR1 & ((uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF)));
   \                     ??EXTI_GetITStatus_0:
   \   000017 9F           LD        A, XL
   \   000018 C4 50A3      AND       A, L:0x50a3
    500            }
    501            return((ITStatus)status);
   \   00001B 87           RETF
    502          }
    503          
    504          /**
    505            * @brief  Clears the specified interrupt pending bit
    506            * @param  EXTI_IT : Specifies the interrupt to clear
    507            *          This parameter can be one of the following values:
    508            *            @arg EXTI_IT_Pin0: GPIO Pin 0
    509            *            @arg EXTI_IT_Pin1: GPIO Pin 1
    510            *            @arg EXTI_IT_Pin2: GPIO Pin 2
    511            *            @arg EXTI_IT_Pin3: GPIO Pin 3
    512            *            @arg EXTI_IT_Pin4: GPIO Pin 4
    513            *            @arg EXTI_IT_Pin5: GPIO Pin 5
    514            *            @arg EXTI_IT_Pin6: GPIO Pin 6
    515            *            @arg EXTI_IT_Pin7: GPIO Pin 7 
    516            *            @arg EXTI_IT_PortB: GPIO Port B
    517            *            @arg EXTI_IT_PortD: GPIO Port D
    518            *            @arg EXTI_IT_PortE: GPIO Port E
    519            *            @arg EXTI_IT_PortF: GPIO Port F
    520            *            @arg EXTI_IT_PortG: GPIO Port G
    521            *            @arg EXTI_IT_PortH: GPIO Port H  
    522            * @retval None
    523            */

   \                                 In section .far_func.text, align 1
    524          void EXTI_ClearITPendingBit(EXTI_IT_TypeDef EXTI_IT)
    525          {
   \                     EXTI_ClearITPendingBit:
   \   000000 BF ..        LDW       S:?w0, X
    526            uint16_t tempvalue = 0;
   \   000002 905F         CLRW      Y
    527          
    528            /* Check function parameters */
    529            assert_param(IS_EXTI_ITPENDINGBIT(EXTI_IT));
    530          
    531            tempvalue = ((uint16_t)EXTI_IT & (uint16_t)0xFF00);
   \   000004 BE ..        LDW       X, S:?w0
   \   000006 02           RLWA      X, A
   \   000007 A4 FF        AND       A, #0xff
   \   000009 02           RLWA      X, A
   \   00000A A4 00        AND       A, #0x0
   \   00000C 02           RLWA      X, A
   \   00000D 9093         LDW       Y, X
    532          
    533            if ( tempvalue == 0x0100)
   \   00000F 90A3 0100    CPW       Y, #0x100
   \   000013 26 06        JRNE      L:??EXTI_ClearITPendingBit_0
    534            {
    535              EXTI->SR2 = (uint8_t)((uint16_t)EXTI_IT & (uint16_t)0x00FF);
   \   000015 B6 ..        LD        A, S:?b1
   \   000017 C7 50A4      LD        L:0x50a4, A
   \   00001A 87           RETF
    536            }
    537            else
    538            {
    539              EXTI->SR1 = (uint8_t) (EXTI_IT);
   \                     ??EXTI_ClearITPendingBit_0:
   \   00001B B6 ..        LD        A, S:?b1
   \   00001D C7 50A3      LD        L:0x50a3, A
    540            }
    541          }
   \   000020 87           RETF
    542          
    543          /**
    544            * @}
    545            */ 
    546          
    547          /**
    548            * @}
    549            */ 
    550            
    551          /**
    552            * @}
    553            */
    554          
    555          /**
    556            * @}
    557            */
    558          
    559          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      33  EXTI_ClearITPendingBit
      33  EXTI_DeInit
      28  EXTI_GetITStatus
     122  EXTI_GetPinSensitivity
      55  EXTI_GetPortSensitivity
      49  EXTI_SelectPort
      61  EXTI_SetHalfPortSelection
     272  EXTI_SetPinSensitivity
      86  EXTI_SetPortSensitivity

 
 739 bytes in section .far_func.text
 
 739 bytes of CODE memory

Errors: none
Warnings: none
