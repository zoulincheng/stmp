###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.42.1.142 for STM8               01/Jul/2016  17:30:48 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_itc.c #
#    Command line =  E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_itc.c #
#                     -e -Ol --no_cse --no_unroll --no_inline                 #
#                    --no_code_motion --no_tbaa --no_cross_call --debug       #
#                    --code_model medium --data_model medium -o               #
#                    E:\hwpro-2016\20160627_L\iar\Debug\Obj\ --dlib_config    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8L15X_MD -lC             #
#                    E:\hwpro-2016\20160627_L\iar\Debug\List\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\stm8l15x_lib\inc\ -I     #
#                    E:\hwpro-2016\20160627_L\iar\..\user\inc\ -I             #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\xprintf\ -I        #
#                    E:\hwpro-2016\20160627_L\iar\..\drivers\ -I              #
#                    E:\hwpro-2016\20160627_L\iar\..\utils\ -I                #
#                    E:\hwpro-2016\20160627_L\iar\..\app\ --vregs 16          #
#    List file    =  E:\hwpro-2016\20160627_L\iar\Debug\List\stm8l15x_itc.lst #
#    Object file  =  E:\hwpro-2016\20160627_L\iar\Debug\Obj\stm8l15x_itc.o    #
#                                                                             #
#                                                                             #
###############################################################################

E:\hwpro-2016\20160627_L\stm8l15x_lib\src\stm8l15x_itc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm8l15x_itc.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    30-September-2014
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionality of the Interrupt controller (ITC) peripheral:           
      9            *           - Configuration and management
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm8l15x_itc.h"
     32          
     33          /** @addtogroup STM8L15x_StdPeriph_Driver
     34            * @{
     35            */
     36            
     37          /** @defgroup ITC 
     38            * @brief ITC driver modules
     39            * @{
     40            */ 
     41          /* Private typedef -----------------------------------------------------------*/
     42          /* Private define ------------------------------------------------------------*/
     43          /* Private macro -------------------------------------------------------------*/
     44          /* Private function prototypes -----------------------------------------------*/
     45          /* Private functions ---------------------------------------------------------*/
     46          
     47          /** @defgroup ITC_Private_Functions
     48            * @{
     49            */
     50          
     51          /**
     52            * @brief  Utility function used to read CC register.
     53            * @param  None
     54            * @retval CPU CC register value
     55            */

   \                                 In section .far_func.text, align 1
     56          uint8_t ITC_GetCPUCC(void)
     57          {
     58          #ifdef _COSMIC_
     59            _asm("push cc");
     60            _asm("pop a");
     61            return; /* Ignore compiler warning, the returned value is in A register */
     62          #elif defined _RAISONANCE_ /* _RAISONANCE_ */
     63            return _getCC_();
     64          #else /* _IAR_ */
     65            asm("push cc");
   \                     ITC_GetCPUCC:
   \   000000 8A           push cc
     66            asm("pop a"); /* Ignore compiler warning, the returned value is in A register */
   \   000001 84           pop a
     67          #endif /* _COSMIC_*/
     68          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ITC_GetCPUCC"
   \   000002 87           RETF
     69          
     70          /** @defgroup ITC_Group1 ITC configuration and management functions
     71           *  @brief   ITC configuration and management functions
     72           *
     73          @verbatim   
     74           ===============================================================================
     75                            ITC configuration and management functions
     76           ===============================================================================  
     77          
     78          @endverbatim
     79            * @{
     80            */
     81            
     82          /**
     83            * @brief  Deinitializes the ITC registers to their default reset value.
     84            * @param  None
     85            * @retval None
     86           */

   \                                 In section .far_func.text, align 1
     87          void ITC_DeInit(void)
     88          {
     89            ITC->ISPR1 = ITC_SPRX_RESET_VALUE;
   \                     ITC_DeInit:
   \   000000 35 FF 7F70   MOV       L:0x7f70, #0xff
     90            ITC->ISPR2 = ITC_SPRX_RESET_VALUE;
   \   000004 35 FF 7F71   MOV       L:0x7f71, #0xff
     91            ITC->ISPR3 = ITC_SPRX_RESET_VALUE;
   \   000008 35 FF 7F72   MOV       L:0x7f72, #0xff
     92            ITC->ISPR4 = ITC_SPRX_RESET_VALUE;
   \   00000C 35 FF 7F73   MOV       L:0x7f73, #0xff
     93            ITC->ISPR5 = ITC_SPRX_RESET_VALUE;
   \   000010 35 FF 7F74   MOV       L:0x7f74, #0xff
     94            ITC->ISPR6 = ITC_SPRX_RESET_VALUE;
   \   000014 35 FF 7F75   MOV       L:0x7f75, #0xff
     95            ITC->ISPR7 = ITC_SPRX_RESET_VALUE;
   \   000018 35 FF 7F76   MOV       L:0x7f76, #0xff
     96            ITC->ISPR8 = ITC_SPRX_RESET_VALUE;
   \   00001C 35 FF 7F77   MOV       L:0x7f77, #0xff
     97          }
   \   000020 87           RETF
     98          
     99          /**
    100            * @brief  Gets the interrupt software priority bits (I1, I0) value from CPU CC register.
    101            * @param  None
    102            * @retval The interrupt software priority bits value.
    103           */

   \                                 In section .far_func.text, align 1
    104          uint8_t ITC_GetSoftIntStatus(void)
    105          {
    106            return ((uint8_t)(ITC_GetCPUCC() & CPU_SOFT_INT_DISABLED));
   \                     ITC_GetSoftIntStatus:
   \   000000 8D ......    CALLF     ITC_GetCPUCC
   \   000004 A4 28        AND       A, #0x28
   \   000006 87           RETF
    107          }
    108          
    109          /**
    110            * @brief  Gets the software priority of the specified interrupt source.
    111            * @param  IRQn : Specifies the peripheral interrupt source.
    112            * @retval Specifies the software priority of the interrupt source.
    113           */

   \                                 In section .far_func.text, align 1
    114          ITC_PriorityLevel_TypeDef ITC_GetSoftwarePriority(IRQn_TypeDef IRQn)
    115          {
   \                     ITC_GetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b0, A
    116            uint8_t Value = 0;
   \   000002 3F ..        CLR       S:?b2
    117            uint8_t Mask = 0;
   \   000004 3F ..        CLR       S:?b3
    118          
    119            /* Check function parameters */
    120            assert_param(IS_ITC_IRQ(IRQn));
    121          
    122            /* Define the mask corresponding to the bits position in the SPR register */
    123            Mask = (uint8_t)(0x03U << ((IRQn % 4U) * 2U));
   \   000006 A6 04        LD        A, #0x4
   \   000008 5F           CLRW      X
   \   000009 01           RRWA      X, A
   \   00000A B6 ..        LD        A, S:?b0
   \   00000C 02           RLWA      X, A
   \   00000D 62           DIV       X, A
   \   00000E 35 02 ....   MOV       S:?b1, #0x2
   \   000012 97           LD        XL, A
   \   000013 B6 ..        LD        A, S:?b1
   \   000015 42           MUL       X, A
   \   000016 9F           LD        A, XL
   \   000017 AE 0003      LDW       X, #0x3
   \   00001A 8D ......    CALLF     L:?sll16_x_x_a
   \   00001E 9F           LD        A, XL
   \   00001F B7 ..        LD        S:?b3, A
    124          
    125            switch (IRQn)
   \   000021 B6 ..        LD        A, S:?b0
   \   000023 4A           DEC       A
   \   000024 27 56        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000026 4A           DEC       A
   \   000027 27 53        JREQ      L:??ITC_GetSoftwarePriority_0
   \   000029 4A           DEC       A
   \   00002A 27 50        JREQ      L:??ITC_GetSoftwarePriority_0
   \   00002C 4A           DEC       A
   \   00002D 27 56        JREQ      L:??ITC_GetSoftwarePriority_1
   \   00002F 4A           DEC       A
   \   000030 27 53        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000032 4A           DEC       A
   \   000033 27 50        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000035 4A           DEC       A
   \   000036 27 4D        JREQ      L:??ITC_GetSoftwarePriority_1
   \   000038 4A           DEC       A
   \   000039 27 53        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00003B 4A           DEC       A
   \   00003C 27 50        JREQ      L:??ITC_GetSoftwarePriority_2
   \   00003E 4A           DEC       A
   \   00003F 27 4D        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000041 4A           DEC       A
   \   000042 27 4A        JREQ      L:??ITC_GetSoftwarePriority_2
   \   000044 4A           DEC       A
   \   000045 27 50        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000047 4A           DEC       A
   \   000048 27 4D        JREQ      L:??ITC_GetSoftwarePriority_3
   \   00004A 4A           DEC       A
   \   00004B 27 4A        JREQ      L:??ITC_GetSoftwarePriority_3
   \   00004D 4A           DEC       A
   \   00004E 27 47        JREQ      L:??ITC_GetSoftwarePriority_3
   \   000050 4A           DEC       A
   \   000051 27 4D        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000053 4A           DEC       A
   \   000054 27 4A        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000056 4A           DEC       A
   \   000057 27 47        JREQ      L:??ITC_GetSoftwarePriority_4
   \   000059 4A           DEC       A
   \   00005A 27 44        JREQ      L:??ITC_GetSoftwarePriority_4
   \   00005C 4A           DEC       A
   \   00005D 27 4A        JREQ      L:??ITC_GetSoftwarePriority_5
   \   00005F 4A           DEC       A
   \   000060 27 47        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000062 4A           DEC       A
   \   000063 27 44        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000065 4A           DEC       A
   \   000066 27 41        JREQ      L:??ITC_GetSoftwarePriority_5
   \   000068 4A           DEC       A
   \   000069 27 47        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006B 4A           DEC       A
   \   00006C 27 44        JREQ      L:??ITC_GetSoftwarePriority_6
   \   00006E 4A           DEC       A
   \   00006F 27 41        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000071 4A           DEC       A
   \   000072 27 3E        JREQ      L:??ITC_GetSoftwarePriority_6
   \   000074 4A           DEC       A
   \   000075 27 44        JREQ      L:??ITC_GetSoftwarePriority_7
   \   000077 4A           DEC       A
   \   000078 27 41        JREQ      L:??ITC_GetSoftwarePriority_7
   \   00007A 20 46        JRA       L:??ITC_GetSoftwarePriority_8
    126            {
    127              case FLASH_IRQn:
    128              case DMA1_CHANNEL0_1_IRQn:
    129              case DMA1_CHANNEL2_3_IRQn:
    130                Value = (uint8_t)(ITC->ISPR1 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_0:
   \   00007C B6 ..        LD        A, S:?b3
   \   00007E C4 7F70      AND       A, L:0x7f70
   \   000081 B7 ..        LD        S:?b2, A
    131                break;
   \   000083 20 3D        JRA       L:??ITC_GetSoftwarePriority_8
    132          
    133              case EXTIE_F_PVD_IRQn:
    134          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    135              case RTC_IRQn:
    136              case EXTIB_IRQn:
    137              case EXTID_IRQn:
    138          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    139              case RTC_CSSLSE_IRQn:
    140              case EXTIB_IRQn:
    141              case EXTID_IRQn:
    142          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    143              case RTC_CSSLSE_IRQn:
    144              case EXTIB_G_IRQn:
    145              case EXTID_H_IRQn:
    146          #endif  /* STM8L15X_MD */
    147                Value = (uint8_t)(ITC->ISPR2 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_1:
   \   000085 B6 ..        LD        A, S:?b3
   \   000087 C4 7F71      AND       A, L:0x7f71
   \   00008A B7 ..        LD        S:?b2, A
    148                break;
   \   00008C 20 34        JRA       L:??ITC_GetSoftwarePriority_8
    149          
    150              case EXTI0_IRQn:
    151              case EXTI1_IRQn:
    152              case EXTI2_IRQn:
    153              case EXTI3_IRQn:
    154                Value = (uint8_t)(ITC->ISPR3 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_2:
   \   00008E B6 ..        LD        A, S:?b3
   \   000090 C4 7F72      AND       A, L:0x7f72
   \   000093 B7 ..        LD        S:?b2, A
    155                break;
   \   000095 20 2B        JRA       L:??ITC_GetSoftwarePriority_8
    156          
    157              case EXTI4_IRQn:
    158              case EXTI5_IRQn:
    159              case EXTI6_IRQn:
    160              case EXTI7_IRQn:
    161                Value = (uint8_t)(ITC->ISPR4 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_3:
   \   000097 B6 ..        LD        A, S:?b3
   \   000099 C4 7F73      AND       A, L:0x7f73
   \   00009C B7 ..        LD        S:?b2, A
    162                break;
   \   00009E 20 22        JRA       L:??ITC_GetSoftwarePriority_8
    163          
    164          #if defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    165              case SWITCH_CSS_IRQn:
    166          #else
    167              case SWITCH_CSS_BREAK_DAC_IRQn:
    168          #endif /* STM8L15X_LD */		
    169              case ADC1_COMP_IRQn:
    170          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    171              case LCD_IRQn:
    172              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    173          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    174              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    175          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    176              case LCD_AES_IRQn:
    177              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    178          #endif  /* STM8L15X_MD */
    179                Value = (uint8_t)(ITC->ISPR5 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_4:
   \   0000A0 B6 ..        LD        A, S:?b3
   \   0000A2 C4 7F74      AND       A, L:0x7f74
   \   0000A5 B7 ..        LD        S:?b2, A
    180                break;
   \   0000A7 20 19        JRA       L:??ITC_GetSoftwarePriority_8
    181          			
    182          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    183              case TIM1_UPD_OVF_TRG_IRQn:
    184          #endif /* STM8L15X_LD */		
    185          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    186           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    187              case TIM2_CC_IRQn:
    188              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    189              case TIM3_CC_IRQn:
    190          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    191              case TIM2_CC_USART2_RX_IRQn:
    192              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    193              case TIM3_CC_USART3_RX_IRQn:
    194          #endif  /* STM8L15X_MD */
    195                Value = (uint8_t)(ITC->ISPR6 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_5:
   \   0000A9 B6 ..        LD        A, S:?b3
   \   0000AB C4 7F75      AND       A, L:0x7f75
   \   0000AE B7 ..        LD        S:?b2, A
    196                break;
   \   0000B0 20 10        JRA       L:??ITC_GetSoftwarePriority_8
    197          			
    198          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    199              case TIM1_CC_IRQn:
    200          #endif /* STM8L15X_LD */	
    201              case TIM4_UPD_OVF_TRG_IRQn:
    202              case SPI1_IRQn:
    203          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    204           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    205              case USART1_TX_IRQn:
    206          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    207              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    208          #endif  /* STM8L15X_MD || STM8L15X_LD */
    209                Value = (uint8_t)(ITC->ISPR7 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_6:
   \   0000B2 B6 ..        LD        A, S:?b3
   \   0000B4 C4 7F76      AND       A, L:0x7f76
   \   0000B7 B7 ..        LD        S:?b2, A
    210                break;
   \   0000B9 20 07        JRA       L:??ITC_GetSoftwarePriority_8
    211          
    212          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    213           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    214              case USART1_RX_IRQn:
    215              case I2C1_IRQn:
    216          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    217              case USART1_RX_TIM5_CC_IRQn:
    218              case I2C1_SPI2_IRQn:
    219          #endif  /* STM8L15X_MD || STM8L15X_LD*/
    220                Value = (uint8_t)(ITC->ISPR8 & Mask); /* Read software priority */
   \                     ??ITC_GetSoftwarePriority_7:
   \   0000BB B6 ..        LD        A, S:?b3
   \   0000BD C4 7F77      AND       A, L:0x7f77
   \   0000C0 B7 ..        LD        S:?b2, A
    221                break;
    222          
    223              default:
    224                break;
    225            }
    226          
    227            Value >>= (uint8_t)((IRQn % 4u) * 2u);
   \                     ??ITC_GetSoftwarePriority_8:
   \   0000C2 A6 04        LD        A, #0x4
   \   0000C4 5F           CLRW      X
   \   0000C5 01           RRWA      X, A
   \   0000C6 B6 ..        LD        A, S:?b0
   \   0000C8 02           RLWA      X, A
   \   0000C9 62           DIV       X, A
   \   0000CA 35 02 ....   MOV       S:?b0, #0x2
   \   0000CE 97           LD        XL, A
   \   0000CF B6 ..        LD        A, S:?b0
   \   0000D1 42           MUL       X, A
   \   0000D2 41           EXG       A, XL
   \   0000D3 B7 ..        LD        S:?b0, A
   \   0000D5 41           EXG       A, XL
   \   0000D6 B6 ..        LD        A, S:?b2
   \   0000D8 8D ......    CALLF     L:?srl8_a_a_b0
   \   0000DC B7 ..        LD        S:?b2, A
    228          
    229            return((ITC_PriorityLevel_TypeDef)Value);
   \   0000DE B6 ..        LD        A, S:?b2
   \   0000E0 87           RETF
    230          
    231          }
    232          
    233          /**
    234            * @brief  Sets the software priority of the specified interrupt source.
    235            * @note   The modification of the software priority is only possible when
    236            *         the interrupts are disabled.
    237            * @note   The normal behavior is to disable the interrupt before calling
    238            *         this function, and re-enable it after.
    239            * @note   The priority level 0 cannot be set (see product specification
    240            *         for more details).
    241            * @param  IRQn : Specifies the peripheral interrupt source.
    242            * @param  ITC_PriorityLevel : Specifies the software priority value to set
    243            *          This parameter can be one of the following values:
    244            *            @arg ITC_PriorityLevel_0: Software priority level 0 (cannot be written)
    245            *            @arg ITC_PriorityLevel_1: Software priority level 1
    246            *            @arg ITC_PriorityLevel_2: Software priority level 2
    247            *            @arg ITC_PriorityLevel_3: Software priority level 3     
    248            * @retval None
    249            */

   \                                 In section .far_func.text, align 1
    250          void ITC_SetSoftwarePriority(IRQn_TypeDef IRQn, ITC_PriorityLevel_TypeDef ITC_PriorityLevel)
    251          {
   \                     ITC_SetSoftwarePriority:
   \   000000 B7 ..        LD        S:?b1, A
   \   000002 45 .. ..     MOV       S:?b2, S:?b0
    252            uint8_t Mask = 0;
   \   000005 3F ..        CLR       S:?b4
    253            uint8_t NewPriority = 0;
   \   000007 3F ..        CLR       S:?b3
    254          
    255            /* Check function parameters */
    256            assert_param(IS_ITC_IRQ(IRQn));
    257            assert_param(IS_ITC_PRIORITY(ITC_PriorityLevel));
    258          
    259            /* Check if interrupts are disabled */
    260            assert_param(IS_ITC_INTERRUPTS_DISABLED);
    261          
    262            /* Define the mask corresponding to the bits position in the SPR register */
    263            /* The mask is reversed in order to clear the 2 bits after more easily */
    264            Mask = (uint8_t)(~(uint8_t)(0x03U << ((IRQn % 4U) * 2U)));
   \   000009 A6 04        LD        A, #0x4
   \   00000B 5F           CLRW      X
   \   00000C 01           RRWA      X, A
   \   00000D B6 ..        LD        A, S:?b1
   \   00000F 02           RLWA      X, A
   \   000010 62           DIV       X, A
   \   000011 35 02 ....   MOV       S:?b0, #0x2
   \   000015 97           LD        XL, A
   \   000016 B6 ..        LD        A, S:?b0
   \   000018 42           MUL       X, A
   \   000019 9F           LD        A, XL
   \   00001A AE 0003      LDW       X, #0x3
   \   00001D 8D ......    CALLF     L:?sll16_x_x_a
   \   000021 9F           LD        A, XL
   \   000022 43           CPL       A
   \   000023 B7 ..        LD        S:?b4, A
    265            /* Define the new priority to write */
    266            NewPriority = (uint8_t)((uint8_t)(ITC_PriorityLevel) << ((IRQn % 4U) * 2U));
   \   000025 A6 04        LD        A, #0x4
   \   000027 5F           CLRW      X
   \   000028 01           RRWA      X, A
   \   000029 B6 ..        LD        A, S:?b1
   \   00002B 02           RLWA      X, A
   \   00002C 62           DIV       X, A
   \   00002D 35 02 ....   MOV       S:?b0, #0x2
   \   000031 97           LD        XL, A
   \   000032 B6 ..        LD        A, S:?b0
   \   000034 42           MUL       X, A
   \   000035 9F           LD        A, XL
   \   000036 5F           CLRW      X
   \   000037 41           EXG       A, XL
   \   000038 B6 ..        LD        A, S:?b2
   \   00003A 41           EXG       A, XL
   \   00003B 8D ......    CALLF     L:?sll16_x_x_a
   \   00003F 9F           LD        A, XL
   \   000040 B7 ..        LD        S:?b3, A
    267          
    268            switch (IRQn)
   \   000042 B6 ..        LD        A, S:?b1
   \   000044 4A           DEC       A
   \   000045 27 55        JREQ      L:??ITC_SetSoftwarePriority_0
   \   000047 4A           DEC       A
   \   000048 27 52        JREQ      L:??ITC_SetSoftwarePriority_0
   \   00004A 4A           DEC       A
   \   00004B 27 4F        JREQ      L:??ITC_SetSoftwarePriority_0
   \   00004D 4A           DEC       A
   \   00004E 27 5D        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000050 4A           DEC       A
   \   000051 27 5A        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000053 4A           DEC       A
   \   000054 27 57        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000056 4A           DEC       A
   \   000057 27 54        JREQ      L:??ITC_SetSoftwarePriority_1
   \   000059 4A           DEC       A
   \   00005A 27 62        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00005C 4A           DEC       A
   \   00005D 27 5F        JREQ      L:??ITC_SetSoftwarePriority_2
   \   00005F 4A           DEC       A
   \   000060 27 5C        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000062 4A           DEC       A
   \   000063 27 59        JREQ      L:??ITC_SetSoftwarePriority_2
   \   000065 4A           DEC       A
   \   000066 27 67        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000068 4A           DEC       A
   \   000069 27 64        JREQ      L:??ITC_SetSoftwarePriority_3
   \   00006B 4A           DEC       A
   \   00006C 27 61        JREQ      L:??ITC_SetSoftwarePriority_3
   \   00006E 4A           DEC       A
   \   00006F 27 5E        JREQ      L:??ITC_SetSoftwarePriority_3
   \   000071 4A           DEC       A
   \   000072 27 6C        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000074 4A           DEC       A
   \   000075 27 69        JREQ      L:??ITC_SetSoftwarePriority_4
   \   000077 4A           DEC       A
   \   000078 27 66        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00007A 4A           DEC       A
   \   00007B 27 63        JREQ      L:??ITC_SetSoftwarePriority_4
   \   00007D 4A           DEC       A
   \   00007E 27 71        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000080 4A           DEC       A
   \   000081 27 6E        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000083 4A           DEC       A
   \   000084 27 6B        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000086 4A           DEC       A
   \   000087 27 68        JREQ      L:??ITC_SetSoftwarePriority_5
   \   000089 4A           DEC       A
   \   00008A 27 76        JREQ      L:??ITC_SetSoftwarePriority_6
   \   00008C 4A           DEC       A
   \   00008D 27 73        JREQ      L:??ITC_SetSoftwarePriority_6
   \   00008F 4A           DEC       A
   \   000090 27 70        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000092 4A           DEC       A
   \   000093 27 6D        JREQ      L:??ITC_SetSoftwarePriority_6
   \   000095 4A           DEC       A
   \   000096 27 7B        JREQ      L:??ITC_SetSoftwarePriority_7
   \   000098 4A           DEC       A
   \   000099 27 78        JREQ      L:??ITC_SetSoftwarePriority_7
   \   00009B 87           RETF
    269            {
    270              case FLASH_IRQn:
    271              case DMA1_CHANNEL0_1_IRQn:
    272              case DMA1_CHANNEL2_3_IRQn:
    273                ITC->ISPR1 &= Mask;
   \                     ??ITC_SetSoftwarePriority_0:
   \   00009C B6 ..        LD        A, S:?b4
   \   00009E C4 7F70      AND       A, L:0x7f70
   \   0000A1 C7 7F70      LD        L:0x7f70, A
    274                ITC->ISPR1 |= NewPriority;
   \   0000A4 B6 ..        LD        A, S:?b3
   \   0000A6 CA 7F70      OR        A, L:0x7f70
   \   0000A9 C7 7F70      LD        L:0x7f70, A
    275                break;
   \   0000AC 87           RETF
    276          
    277              case EXTIE_F_PVD_IRQn:
    278          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    279              case RTC_IRQn:
    280              case EXTIB_IRQn:
    281              case EXTID_IRQn:
    282          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    283              case RTC_CSSLSE_IRQn:
    284              case EXTIB_IRQn:
    285              case EXTID_IRQn:
    286          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    287              case RTC_CSSLSE_IRQn:
    288              case EXTIB_G_IRQn:
    289              case EXTID_H_IRQn:
    290          #endif  /* STM8L15X_MD */
    291                ITC->ISPR2 &= Mask;
   \                     ??ITC_SetSoftwarePriority_1:
   \   0000AD B6 ..        LD        A, S:?b4
   \   0000AF C4 7F71      AND       A, L:0x7f71
   \   0000B2 C7 7F71      LD        L:0x7f71, A
    292                ITC->ISPR2 |= NewPriority;
   \   0000B5 B6 ..        LD        A, S:?b3
   \   0000B7 CA 7F71      OR        A, L:0x7f71
   \   0000BA C7 7F71      LD        L:0x7f71, A
    293                break;
   \   0000BD 87           RETF
    294          
    295              case EXTI0_IRQn:
    296              case EXTI1_IRQn:
    297              case EXTI2_IRQn:
    298              case EXTI3_IRQn:
    299                ITC->ISPR3 &= Mask;
   \                     ??ITC_SetSoftwarePriority_2:
   \   0000BE B6 ..        LD        A, S:?b4
   \   0000C0 C4 7F72      AND       A, L:0x7f72
   \   0000C3 C7 7F72      LD        L:0x7f72, A
    300                ITC->ISPR3 |= NewPriority;
   \   0000C6 B6 ..        LD        A, S:?b3
   \   0000C8 CA 7F72      OR        A, L:0x7f72
   \   0000CB C7 7F72      LD        L:0x7f72, A
    301                break;
   \   0000CE 87           RETF
    302          
    303              case EXTI4_IRQn:
    304              case EXTI5_IRQn:
    305              case EXTI6_IRQn:
    306              case EXTI7_IRQn:
    307                ITC->ISPR4 &= Mask;
   \                     ??ITC_SetSoftwarePriority_3:
   \   0000CF B6 ..        LD        A, S:?b4
   \   0000D1 C4 7F73      AND       A, L:0x7f73
   \   0000D4 C7 7F73      LD        L:0x7f73, A
    308                ITC->ISPR4 |= NewPriority;
   \   0000D7 B6 ..        LD        A, S:?b3
   \   0000D9 CA 7F73      OR        A, L:0x7f73
   \   0000DC C7 7F73      LD        L:0x7f73, A
    309                break;
   \   0000DF 87           RETF
    310          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    311              case SWITCH_CSS_BREAK_DAC_IRQn:
    312          #else
    313              case SWITCH_CSS_IRQn:
    314          #endif /*	STM8L15X_LD	*/
    315              case ADC1_COMP_IRQn:
    316          #if defined (STM8L15X_MD) || defined (STM8L05X_MD_VL) || defined (STM8AL31_L_MD)
    317              case LCD_IRQn:
    318              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    319          #elif defined (STM8L15X_LD) || defined (STM8L05X_LD_VL)
    320              case TIM2_UPD_OVF_TRG_BRK_IRQn:
    321          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    322              case LCD_AES_IRQn:
    323              case TIM2_UPD_OVF_TRG_BRK_USART2_TX_IRQn:
    324          #endif  /* STM8L15X_MD */
    325                ITC->ISPR5 &= Mask;
   \                     ??ITC_SetSoftwarePriority_4:
   \   0000E0 B6 ..        LD        A, S:?b4
   \   0000E2 C4 7F74      AND       A, L:0x7f74
   \   0000E5 C7 7F74      LD        L:0x7f74, A
    326                ITC->ISPR5 |= NewPriority;
   \   0000E8 B6 ..        LD        A, S:?b3
   \   0000EA CA 7F74      OR        A, L:0x7f74
   \   0000ED C7 7F74      LD        L:0x7f74, A
    327                break;
   \   0000F0 87           RETF
    328          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    329              case TIM1_UPD_OVF_TRG_IRQn:
    330          #endif  /* STM8L15X_LD */
    331          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    332           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    333              case TIM2_CC_IRQn:
    334              case TIM3_UPD_OVF_TRG_BRK_IRQn :
    335              case TIM3_CC_IRQn:
    336          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    337              case TIM2_CC_USART2_RX_IRQn:
    338              case TIM3_UPD_OVF_TRG_BRK_USART3_TX_IRQn :
    339              case TIM3_CC_USART3_RX_IRQn:
    340          #endif  /* STM8L15X_MD */
    341                ITC->ISPR6 &= Mask;
   \                     ??ITC_SetSoftwarePriority_5:
   \   0000F1 B6 ..        LD        A, S:?b4
   \   0000F3 C4 7F75      AND       A, L:0x7f75
   \   0000F6 C7 7F75      LD        L:0x7f75, A
    342                ITC->ISPR6 |= NewPriority;
   \   0000F9 B6 ..        LD        A, S:?b3
   \   0000FB CA 7F75      OR        A, L:0x7f75
   \   0000FE C7 7F75      LD        L:0x7f75, A
    343                break;
   \   000101 87           RETF
    344          
    345          #if !defined (STM8L15X_LD) && !defined (STM8L05X_LD_VL)
    346              case TIM1_CC_IRQn:
    347          #endif  /* STM8L15X_LD */
    348              case TIM4_UPD_OVF_TRG_IRQn:
    349              case SPI1_IRQn:
    350          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    351           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    352              case USART1_TX_IRQn:
    353          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    354              case USART1_TX_TIM5_UPD_OVF_TRG_BRK_IRQn:
    355          #endif  /* STM8L15X_MD */
    356                ITC->ISPR7 &= Mask;
   \                     ??ITC_SetSoftwarePriority_6:
   \   000102 B6 ..        LD        A, S:?b4
   \   000104 C4 7F76      AND       A, L:0x7f76
   \   000107 C7 7F76      LD        L:0x7f76, A
    357                ITC->ISPR7 |= NewPriority;
   \   00010A B6 ..        LD        A, S:?b3
   \   00010C CA 7F76      OR        A, L:0x7f76
   \   00010F C7 7F76      LD        L:0x7f76, A
    358                break;
   \   000112 87           RETF
    359          
    360          #if defined (STM8L15X_MD) || defined (STM8L15X_LD) || defined (STM8L05X_MD_VL) ||\
    361           defined (STM8AL31_L_MD) || defined (STM8L05X_LD_VL)
    362              case USART1_RX_IRQn:
    363              case I2C1_IRQn:
    364          #elif defined (STM8L15X_HD) || defined (STM8L15X_MDP) || defined (STM8L05X_HD_VL)
    365              case USART1_RX_TIM5_CC_IRQn:
    366              case I2C1_SPI2_IRQn:
    367          #endif  /* STM8L15X_MD */
    368                ITC->ISPR8 &= Mask;
   \                     ??ITC_SetSoftwarePriority_7:
   \   000113 B6 ..        LD        A, S:?b4
   \   000115 C4 7F77      AND       A, L:0x7f77
   \   000118 C7 7F77      LD        L:0x7f77, A
    369                ITC->ISPR8 |= NewPriority;
   \   00011B B6 ..        LD        A, S:?b3
   \   00011D CA 7F77      OR        A, L:0x7f77
   \   000120 C7 7F77      LD        L:0x7f77, A
    370                break;
    371          
    372              default:
    373                break;
    374            }
    375          }
   \   000123 87           RETF
    376          
    377          /**
    378            * @}
    379            */
    380          
    381          /**
    382            * @}
    383            */
    384          
    385          /**
    386            * @}
    387            */
    388          
    389          /**
    390            * @}
    391            */
    392            
    393          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      33  ITC_DeInit
       3  ITC_GetCPUCC
       7  ITC_GetSoftIntStatus
     225  ITC_GetSoftwarePriority
     292  ITC_SetSoftwarePriority

 
 560 bytes in section .far_func.text
 
 560 bytes of CODE memory

Errors: none
Warnings: 1
